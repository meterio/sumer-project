{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerableUpgradeable.sol\";\nimport \"./AccessControlUpgradeable.sol\";\nimport \"../utils/structs/EnumerableSetUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\n    function __AccessControlEnumerable_init() internal onlyInitializing {\n    }\n\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\n    }\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(account),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable2Step.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Ownable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2Step is Ownable {\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() external {\n        address sender = _msgSender();\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\n        _transferOwnership(sender);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/ProxyAdmin.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./TransparentUpgradeableProxy.sol\";\nimport \"../../access/Ownable.sol\";\n\n/**\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\n */\ncontract ProxyAdmin is Ownable {\n    /**\n     * @dev Returns the current implementation of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"implementation()\")) == 0x5c60da1b\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"5c60da1b\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Returns the current admin of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"admin()\")) == 0xf851a440\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"f851a440\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Changes the admin of `proxy` to `newAdmin`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the current admin of `proxy`.\n     */\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\n        proxy.changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\n        proxy.upgradeTo(implementation);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgradeAndCall(\n        TransparentUpgradeableProxy proxy,\n        address implementation,\n        bytes memory data\n    ) public payable virtual onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(\n        address _logic,\n        address admin_,\n        bytes memory _data\n    ) payable ERC1967Proxy(_logic, _data) {\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function admin() external ifAdmin returns (address admin_) {\n        admin_ = _getAdmin();\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function implementation() external ifAdmin returns (address implementation_) {\n        implementation_ = _implementation();\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n     */\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\n        _changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n     */\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n     */\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n        _upgradeToAndCall(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n     */\n    function _beforeFallback() internal virtual override {\n        require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n        super._beforeFallback();\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC20/extensions/ERC20Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../security/Pausable.sol\";\n\n/**\n * @dev ERC20 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n *\n * IMPORTANT: This contract does not include public pause and unpause functions. In\n * addition to inheriting this contract, you must define both functions, invoking the\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\n * make the contract unpausable.\n */\nabstract contract ERC20Pausable is ERC20, Pausable {\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/presets/ERC20PresetMinterPauser.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../extensions/ERC20Burnable.sol\";\nimport \"../extensions/ERC20Pausable.sol\";\nimport \"../../../access/AccessControlEnumerable.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev {ERC20} token, including:\n *\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *  - a pauser role that allows to stop all token transfers\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to other accounts.\n *\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\n */\ncontract ERC20PresetMinterPauser is Context, AccessControlEnumerable, ERC20Burnable, ERC20Pausable {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\n     * account that deploys the contract.\n     *\n     * See {ERC20-constructor}.\n     */\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n    }\n\n    /**\n     * @dev Creates `amount` new tokens for `to`.\n     *\n     * See {ERC20-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(address to, uint256 amount) public virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have minter role to mint\");\n        _mint(to, amount);\n    }\n\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to pause\");\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to unpause\");\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override(ERC20, ERC20Pausable) {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@pythnetwork/pyth-sdk-solidity/IPyth.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"./PythStructs.sol\";\nimport \"./IPythEvents.sol\";\n\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\n/// @dev Please refer to the guidance at https://docs.pyth.network/consumers/best-practices for how to consume prices safely.\n/// @author Pyth Data Association\ninterface IPyth is IPythEvents {\n    /// @notice Returns the period (in seconds) that a price feed is considered valid since its publish time\n    function getValidTimePeriod() external view returns (uint validTimePeriod);\n\n    /// @notice Returns the price and confidence interval.\n    /// @dev Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\n    /// @param id The Pyth Price Feed ID of which to fetch the price and confidence interval.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getPrice(\n        bytes32 id\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Returns the exponentially-weighted moving average price and confidence interval.\n    /// @dev Reverts if the EMA price is not available.\n    /// @param id The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getEmaPrice(\n        bytes32 id\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Returns the price of a price feed without any sanity checks.\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\n    ///\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\n    /// sufficiently recent for their application. If you are considering using this function, it may be\n    /// safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getPriceUnsafe(\n        bytes32 id\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\n    /// recently.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getPriceNoOlderThan(\n        bytes32 id,\n        uint age\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\n    /// However, if the price is not recent this function returns the latest available price.\n    ///\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\n    /// the returned price is recent or useful for any particular application.\n    ///\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\n    /// sufficiently recent for their application. If you are considering using this function, it may be\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getEmaPriceUnsafe(\n        bytes32 id\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\n    /// of the current time.\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\n    /// recently.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getEmaPriceNoOlderThan(\n        bytes32 id,\n        uint age\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Update price feeds with given update messages.\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\n    /// `getUpdateFee` with the length of the `updateData` array.\n    /// Prices will be updated if they are more recent than the current stored prices.\n    /// The call will succeed even if the update is not the most recent.\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\n    /// @param updateData Array of price update data.\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\n\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\n    ///\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\n    /// `getUpdateFee` with the length of the `updateData` array.\n    ///\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\n    ///\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\n    /// @param updateData Array of price update data.\n    /// @param priceIds Array of price ids.\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\n    function updatePriceFeedsIfNecessary(\n        bytes[] calldata updateData,\n        bytes32[] calldata priceIds,\n        uint64[] calldata publishTimes\n    ) external payable;\n\n    /// @notice Returns the required fee to update an array of price updates.\n    /// @param updateData Array of price update data.\n    /// @return feeAmount The required fee in Wei.\n    function getUpdateFee(\n        bytes[] calldata updateData\n    ) external view returns (uint feeAmount);\n\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\n    /// within `minPublishTime` and `maxPublishTime`.\n    ///\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\n    /// otherwise, please consider using `updatePriceFeeds`. This method does not store the price updates on-chain.\n    ///\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\n    /// `getUpdateFee` with the length of the `updateData` array.\n    ///\n    ///\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\n    /// no update for any of the given `priceIds` within the given time range.\n    /// @param updateData Array of price update data.\n    /// @param priceIds Array of price ids.\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\n    function parsePriceFeedUpdates(\n        bytes[] calldata updateData,\n        bytes32[] calldata priceIds,\n        uint64 minPublishTime,\n        uint64 maxPublishTime\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\n}\n"
    },
    "@pythnetwork/pyth-sdk-solidity/IPythEvents.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n/// @title IPythEvents contains the events that Pyth contract emits.\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\ninterface IPythEvents {\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\n    /// @param id The Pyth Price Feed ID.\n    /// @param publishTime Publish time of the given price update.\n    /// @param price Price of the given price update.\n    /// @param conf Confidence interval of the given price update.\n    event PriceFeedUpdate(\n        bytes32 indexed id,\n        uint64 publishTime,\n        int64 price,\n        uint64 conf\n    );\n\n    /// @dev Emitted when a batch price update is processed successfully.\n    /// @param chainId ID of the source chain that the batch price update comes from.\n    /// @param sequenceNumber Sequence number of the batch price update.\n    event BatchPriceFeedUpdate(uint16 chainId, uint64 sequenceNumber);\n}\n"
    },
    "@pythnetwork/pyth-sdk-solidity/PythStructs.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\ncontract PythStructs {\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\n    //\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\n    // Both the price and confidence are stored in a fixed-point numeric representation,\n    // `x * (10^expo)`, where `expo` is the exponent.\n    //\n    // Please refer to the documentation at https://docs.pyth.network/consumers/best-practices for how\n    // to how this price safely.\n    struct Price {\n        // Price\n        int64 price;\n        // Confidence interval around the price\n        uint64 conf;\n        // Price exponent\n        int32 expo;\n        // Unix timestamp describing when the price was published\n        uint publishTime;\n    }\n\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\n    struct PriceFeed {\n        // The price ID.\n        bytes32 id;\n        // Latest available price\n        Price price;\n        // Latest available exponentially-weighted moving average price\n        Price emaPrice;\n    }\n}\n"
    },
    "contracts/Comptroller/AccountLiquidity.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\nimport '../Exponential/ExponentialNoError.sol';\nimport './Interfaces/IComptroller.sol';\nimport './Interfaces/ICToken.sol';\nimport './Interfaces/IPriceOracle.sol';\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol';\n\ncontract AccountLiquidity is AccessControlEnumerableUpgradeable {\n  using ExponentialNoError for uint256;\n  using ExponentialNoError for Exp;\n  using ExponentialNoError for Double;\n\n  IComptroller public comptroller;\n\n  function initialize(address _admin) external initializer {\n    _setupRole(DEFAULT_ADMIN_ROLE, _admin);\n  }\n\n  function setComptroller(IComptroller _comptroller) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    comptroller = _comptroller;\n  }\n\n  /**\n   * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\n   *  Note that `cTokenBalance` is the number of cTokens the account owns in the market,\n   *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\n   */\n  struct AccountLiquidityLocalVars {\n    uint8 equalAssetsGroupNum;\n    uint8 assetGroupId;\n    uint256 sumCollateral;\n    uint256 sumBorrowPlusEffects;\n    uint256 cTokenBalance;\n    uint256 borrowBalance;\n    uint256 exchangeRateMantissa;\n    uint256 oraclePriceMantissa;\n    Exp collateralFactor;\n    Exp exchangeRate;\n    Exp oraclePrice;\n    Exp tokensToDenom;\n    Exp intraCRate;\n    Exp intraMintRate;\n    Exp interCRate;\n    Exp intraSuRate;\n    Exp interSuRate;\n    Exp discountRate;\n    bool isSuToken;\n    uint256 tokenDepositVal;\n    uint256 tokenBorrowVal;\n  }\n\n  struct AccountGroupLocalVars {\n    uint8 groupId;\n    uint256 cTokenBalanceSum;\n    uint256 cTokenBorrowSum;\n    uint256 suTokenBalanceSum;\n    uint256 suTokenBorrowSum;\n  }\n\n  /**\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\n     * @param cTokenModify The market to hypothetically redeem/borrow in\n     * @param account The account to determine liquidity for\n     * @param redeemTokens The number of tokens to hypothetically redeem\n     * @param borrowAmount The amount of underlying to hypothetically borrow\n     * @dev Note that we calculate the exchangeRateStored for each collateral cToken using stored data,\n     *  without calculating accumulated interest.\n     * @return (possible error code,\n                hypothetical account liquidity in excess of collateral requirements,\n     *          hypothetical account shortfall below collateral requirements)\n     */\n  function getHypotheticalAccountLiquidity(\n    address account,\n    address cTokenModify,\n    uint256 redeemTokens,\n    uint256 borrowAmount\n  ) public view returns (uint256, uint256, uint256) {\n    AccountLiquidityLocalVars memory vars; // Holds all our calculation results\n    uint256 oErr;\n\n    vars.equalAssetsGroupNum = IComptroller(comptroller).getAssetGroupNum();\n    AccountGroupLocalVars[] memory groupVars = new AccountGroupLocalVars[](vars.equalAssetsGroupNum);\n\n    if ((cTokenModify != address(0)) && !ICToken(cTokenModify).isCToken()) {\n      vars.isSuToken = true;\n    } else {\n      vars.isSuToken = false;\n    }\n\n    // For each asset the account is in\n    address[] memory assets = comptroller.getAssetsIn(account);\n    for (uint256 i = 0; i < assets.length; ++i) {\n      address asset = assets[i];\n      vars.tokenDepositVal = uint256(0);\n      vars.tokenBorrowVal = uint256(0);\n\n      (, uint8 assetGroupId, ) = comptroller.markets(asset);\n\n      // Read the balances and exchange rate from the cToken\n      (oErr, vars.cTokenBalance, vars.borrowBalance, vars.exchangeRateMantissa) = ICToken(asset).getAccountSnapshot(\n        account\n      );\n      require(oErr == 0, 'snapshot error');\n      vars.exchangeRate = Exp({mantissa: vars.exchangeRateMantissa});\n      vars.discountRate = Exp({mantissa: ICToken(asset).getDiscountRate()});\n\n      // Get the normalized price of the asset\n      IPriceOracle oracle = IPriceOracle(comptroller.oracle());\n      vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);\n      require(vars.oraclePriceMantissa > 0, 'price error');\n      vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});\n\n      // Pre-compute a conversion factor from tokens -> ether (normalized price value)\n      // vars.tokensToDenom = vars.exchangeRate.mul_(vars.oraclePriceMantissa).div_(1e18);\n\n      vars.tokensToDenom = vars.exchangeRate.mul_(vars.oraclePrice);\n      vars.tokensToDenom = vars.tokensToDenom.mul_(vars.discountRate);\n      uint8 decimals = ICToken(asset).decimals();\n      if (decimals < 18) vars.tokensToDenom = vars.tokensToDenom.mul_(10 ** (18 - decimals));\n\n      uint8 index;\n      for (index = 0; index < vars.equalAssetsGroupNum; ++index) {\n        if (groupVars[index].groupId > 0) {\n          if (groupVars[index].groupId == assetGroupId) {\n            break;\n          }\n        } else {\n          groupVars[index].groupId = assetGroupId;\n          break;\n        }\n      }\n      // require(index < vars.equalAssetsGroupNum);\n      vars.tokenDepositVal = vars.tokensToDenom.mul_ScalarTruncateAddUInt(vars.cTokenBalance, vars.tokenDepositVal);\n      vars.tokenBorrowVal = vars.oraclePrice.mul_ScalarTruncateAddUInt(vars.borrowBalance, vars.tokenBorrowVal);\n      if (asset == cTokenModify) {\n        uint256 redeemVal = vars.tokensToDenom.mul_(redeemTokens).truncate();\n        if (redeemVal <= vars.tokenDepositVal) {\n          // if redeemedVal <= tokenDepositVal\n          // absorb it with deposits\n          // tokenDepositVal -= redeemVal\n          vars.tokenDepositVal = vars.tokenDepositVal.sub_(redeemVal);\n          redeemVal = 0;\n        } else {\n          // if redeemVal > tokenDepositVal\n          // redeemVal -= tokenDepositVal\n          redeemVal = redeemVal.sub_(vars.tokenDepositVal);\n          vars.tokenBorrowVal = vars.tokenBorrowVal.add_(redeemVal);\n          vars.tokenDepositVal = 0;\n        }\n\n        vars.tokenBorrowVal = vars.oraclePrice.mul_ScalarTruncateAddUInt(borrowAmount, vars.tokenBorrowVal);\n      }\n\n      if (ICToken(asset).isCToken()) {\n        groupVars[index].cTokenBalanceSum = vars.tokenDepositVal.add_(groupVars[index].cTokenBalanceSum);\n        groupVars[index].cTokenBorrowSum = vars.tokenBorrowVal.add_(groupVars[index].cTokenBorrowSum);\n      } else {\n        groupVars[index].suTokenBalanceSum = vars.tokenDepositVal.add_(groupVars[index].suTokenBalanceSum);\n        groupVars[index].suTokenBorrowSum = vars.tokenBorrowVal.add_(groupVars[index].suTokenBorrowSum);\n      }\n    }\n\n    AccountGroupLocalVars memory targetGroup;\n    AccountLiquidityLocalVars memory targetVars;\n    for (uint8 i = 0; i < vars.equalAssetsGroupNum; ++i) {\n      (, uint8 assetGroupId, ) = comptroller.markets(cTokenModify);\n      if (groupVars[i].groupId == 0) {\n        continue;\n      }\n      IComptroller.AssetGroup memory equalAssetsGroup = IComptroller(comptroller).getAssetGroup(groupVars[i].groupId);\n\n      vars.intraCRate = Exp({mantissa: equalAssetsGroup.intraCRateMantissa});\n      vars.intraMintRate = Exp({mantissa: equalAssetsGroup.intraMintRateMantissa});\n      vars.intraSuRate = Exp({mantissa: equalAssetsGroup.intraSuRateMantissa});\n      vars.interCRate = Exp({mantissa: equalAssetsGroup.interCRateMantissa});\n      vars.interSuRate = Exp({mantissa: equalAssetsGroup.interSuRateMantissa});\n\n      // absorb sutoken loan with ctoken collateral\n      if (groupVars[i].suTokenBorrowSum > 0) {\n        uint256 collateralizedLoan = vars.intraMintRate.mul_ScalarTruncate(groupVars[i].cTokenBalanceSum);\n        if (groupVars[i].suTokenBorrowSum <= collateralizedLoan) {\n          // collateral could cover the loan\n          uint256 usedCollateral = groupVars[i].suTokenBorrowSum.div_(vars.intraMintRate);\n          groupVars[i].cTokenBalanceSum = groupVars[i].cTokenBalanceSum.sub_(usedCollateral);\n          groupVars[i].suTokenBorrowSum = 0;\n        } else {\n          // collateral could not cover the loan\n          groupVars[i].suTokenBorrowSum = groupVars[i].suTokenBorrowSum.sub_(collateralizedLoan);\n          groupVars[i].cTokenBalanceSum = 0;\n        }\n      }\n\n      // absorb ctoken loan with ctoken collateral\n      if (groupVars[i].cTokenBorrowSum > 0) {\n        uint256 collateralizedLoan = vars.intraCRate.mul_ScalarTruncate(groupVars[i].cTokenBalanceSum);\n        if (groupVars[i].cTokenBorrowSum <= collateralizedLoan) {\n          // collateral could cover the loan\n          uint256 usedCollateral = groupVars[i].cTokenBorrowSum.div_(vars.intraCRate);\n          groupVars[i].cTokenBalanceSum = groupVars[i].cTokenBalanceSum.sub_(usedCollateral);\n          groupVars[i].cTokenBorrowSum = 0;\n        } else {\n          // collateral could not cover the loan\n          groupVars[i].cTokenBalanceSum = 0;\n          groupVars[i].cTokenBorrowSum = groupVars[i].cTokenBorrowSum.sub_(collateralizedLoan);\n        }\n      }\n\n      // absorb sutoken loan with sutoken collateral\n      if (groupVars[i].suTokenBorrowSum > 0) {\n        uint256 collateralizedLoan = vars.intraSuRate.mul_ScalarTruncate(groupVars[i].suTokenBalanceSum);\n        if (groupVars[i].suTokenBorrowSum <= collateralizedLoan) {\n          // collateral could cover the loan\n          uint256 usedCollateral = groupVars[i].suTokenBorrowSum.div_(vars.intraSuRate);\n          groupVars[i].suTokenBalanceSum = groupVars[i].suTokenBalanceSum.sub_(usedCollateral);\n          groupVars[i].suTokenBorrowSum = 0;\n        } else {\n          // collateral could not cover the loan\n          groupVars[i].suTokenBalanceSum = 0;\n          groupVars[i].suTokenBorrowSum = groupVars[i].suTokenBorrowSum.sub_(collateralizedLoan);\n        }\n      }\n\n      // absorb ctoken loan with sutoken collateral\n      if (groupVars[i].cTokenBorrowSum > 0) {\n        uint256 collateralizedLoan = vars.intraSuRate.mul_ScalarTruncate(groupVars[i].suTokenBalanceSum);\n        if (groupVars[i].cTokenBorrowSum <= collateralizedLoan) {\n          uint256 usedCollateral = groupVars[i].cTokenBorrowSum.div_(vars.intraSuRate);\n          groupVars[i].suTokenBalanceSum = groupVars[i].suTokenBalanceSum.sub_(usedCollateral);\n          groupVars[i].cTokenBorrowSum = 0;\n        } else {\n          groupVars[i].suTokenBalanceSum = 0;\n          groupVars[i].cTokenBorrowSum = groupVars[i].cTokenBorrowSum.sub_(collateralizedLoan);\n        }\n      }\n\n      if (groupVars[i].groupId == assetGroupId) {\n        targetGroup = groupVars[i];\n        targetVars = vars;\n      } else {\n        vars.sumCollateral = vars.interCRate.mul_ScalarTruncateAddUInt(\n          groupVars[i].cTokenBalanceSum,\n          vars.sumCollateral\n        );\n        vars.sumCollateral = vars.interSuRate.mul_ScalarTruncateAddUInt(\n          groupVars[i].suTokenBalanceSum,\n          vars.sumCollateral\n        );\n      }\n\n      vars.sumBorrowPlusEffects = vars.sumBorrowPlusEffects.add_(\n        groupVars[i].cTokenBorrowSum.add_(groupVars[i].suTokenBorrowSum)\n      );\n    }\n\n    // These are safe, as the underflow condition is checked first\n    if (vars.sumCollateral > vars.sumBorrowPlusEffects) {\n      vars.sumCollateral = vars.sumCollateral - vars.sumBorrowPlusEffects;\n      vars.sumBorrowPlusEffects = 0;\n    } else {\n      vars.sumBorrowPlusEffects = vars.sumBorrowPlusEffects - vars.sumCollateral;\n      vars.sumCollateral = 0;\n    }\n\n    if (vars.sumBorrowPlusEffects > 0) {\n      uint256 collateralizedLoan = targetVars.interCRate.mul_ScalarTruncate(targetGroup.cTokenBalanceSum);\n      if (collateralizedLoan > vars.sumBorrowPlusEffects) {\n        targetGroup.cTokenBalanceSum = targetGroup.cTokenBalanceSum.sub_(\n          vars.sumBorrowPlusEffects.div_(targetVars.interCRate)\n        );\n        vars.sumBorrowPlusEffects = 0;\n      } else {\n        vars.sumBorrowPlusEffects = vars.sumBorrowPlusEffects.sub_(collateralizedLoan);\n        targetGroup.cTokenBalanceSum = 0;\n      }\n    }\n\n    if (vars.sumBorrowPlusEffects > 0) {\n      uint256 collateralizedLoan = targetVars.interSuRate.mul_ScalarTruncate(targetGroup.suTokenBalanceSum);\n      if (collateralizedLoan > vars.sumBorrowPlusEffects) {\n        targetGroup.suTokenBalanceSum = targetGroup.suTokenBalanceSum.sub_(\n          vars.sumBorrowPlusEffects.div_(targetVars.interSuRate)\n        );\n        vars.sumBorrowPlusEffects = 0;\n      } else {\n        vars.sumBorrowPlusEffects = vars.sumBorrowPlusEffects.sub_(collateralizedLoan);\n        targetGroup.suTokenBalanceSum = 0;\n      }\n    }\n    if (vars.isSuToken) {\n      vars.sumCollateral = vars.intraMintRate.mul_ScalarTruncateAddUInt(\n        targetGroup.cTokenBalanceSum,\n        vars.sumCollateral\n      );\n    } else {\n      vars.sumCollateral = vars.intraCRate.mul_ScalarTruncateAddUInt(targetGroup.cTokenBalanceSum, vars.sumCollateral);\n    }\n    vars.sumCollateral = vars.intraSuRate.mul_ScalarTruncateAddUInt(targetGroup.suTokenBalanceSum, vars.sumCollateral);\n\n    if (vars.sumCollateral > vars.sumBorrowPlusEffects) {\n      return (0, vars.sumCollateral - vars.sumBorrowPlusEffects, 0);\n    } else {\n      return (0, 0, vars.sumBorrowPlusEffects - vars.sumCollateral);\n    }\n  }\n}\n"
    },
    "contracts/Comptroller/CompLogic.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\nimport '../Exponential/ExponentialNoError.sol';\nimport './Interfaces/IComptroller.sol';\nimport './Interfaces/ICToken.sol';\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol';\n\ncontract CompLogic is AccessControlEnumerableUpgradeable {\n  using ExponentialNoError for uint256;\n  using ExponentialNoError for Exp;\n  using ExponentialNoError for Double;\n\n  /// @notice The market's last updated compBorrowIndex or compSupplyIndex\n  /// @notice The block number the index was last updated at\n  struct CompMarketState {\n    uint224 index;\n    uint32 block;\n  }\n  address public comp;\n\n  IComptroller public comptroller;\n  /// @notice The COMP accrued but not yet transferred to each user\n  mapping(address => uint256) public compAccrued;\n  /// @notice The portion of COMP that each contributor receives per block\n  mapping(address => uint256) public compContributorSpeeds;\n  /// @notice The initial COMP index for a market\n  uint224 public constant compInitialIndex = 1e36;\n  /// @notice Last block at which a contributor's COMP rewards have been allocated\n  mapping(address => uint256) public lastContributorBlock;\n  /// @notice The COMP borrow index for each market for each supplier as of the last time they accrued COMP\n  mapping(address => mapping(address => uint256)) public compSupplierIndex;\n  /// @notice The COMP borrow index for each market for each borrower as of the last time they accrued COMP\n  mapping(address => mapping(address => uint256)) public compBorrowerIndex;\n  /// @notice The rate at which comp is distributed to the corresponding supply market (per block)\n  mapping(address => uint256) public compSupplySpeeds;\n  /// @notice The rate at which comp is distributed to the corresponding borrow market (per block)\n  mapping(address => uint256) public compBorrowSpeeds;\n  /// @notice The COMP market supply state for each market\n  mapping(address => CompMarketState) public compSupplyState;\n  /// @notice The COMP market borrow state for each market\n  mapping(address => CompMarketState) public compBorrowState;\n\n  /// @notice Emitted when COMP is granted by admin\n  event CompGranted(address recipient, uint256 amount);\n  /// @notice Emitted when a new COMP speed is set for a contributor\n  event ContributorCompSpeedUpdated(address indexed contributor, uint256 newSpeed);\n  /// @notice Emitted when a new supply-side COMP speed is calculated for a market\n  event CompSupplySpeedUpdated(address indexed cToken, uint256 newSpeed);\n  /// @notice Emitted when a new borrow-side COMP speed is calculated for a market\n  event CompBorrowSpeedUpdated(address indexed cToken, uint256 newSpeed);\n  /// @notice Emitted when COMP is distributed to a supplier\n  event DistributedSupplierComp(\n    address indexed cToken,\n    address indexed supplier,\n    uint256 compDelta,\n    uint256 compSupplyIndex\n  );\n\n  /// @notice Emitted when COMP is distributed to a borrower\n  event DistributedBorrowerComp(\n    address indexed cToken,\n    address indexed borrower,\n    uint256 compDelta,\n    uint256 compBorrowIndex\n  );\n\n  modifier onlyComptroller() {\n    require(msg.sender == address(comptroller), 'forbidden!');\n    _;\n  }\n\n  function initialize(address _admin, address _comp) external initializer {\n    comp = _comp;\n    _setupRole(DEFAULT_ADMIN_ROLE, _admin);\n  }\n\n  event SetComptroller(address comptroller);\n\n  function setComptroller(IComptroller _comptroller) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    comptroller = _comptroller;\n    emit SetComptroller(address(comptroller));\n  }\n\n  /*** Comp Distribution ***/\n\n  /**\n   * @notice Set COMP speed for a single market\n   * @param cToken The market whose COMP speed to update\n   * @param supplySpeed New supply-side COMP speed for market\n   * @param borrowSpeed New borrow-side COMP speed for market\n   */\n  function setCompSpeed(address cToken, uint256 supplySpeed, uint256 borrowSpeed) external onlyComptroller {\n    _setCompSpeedInternal(cToken, supplySpeed, borrowSpeed);\n  }\n\n  function _setCompSpeedInternal(address cToken, uint256 supplySpeed, uint256 borrowSpeed) private {\n    (bool isListed, , ) = comptroller.markets(cToken);\n    require(isListed, 'comp market is not listed');\n    require(supplySpeed > 0, 'supplySpeed=0');\n    require(borrowSpeed > 0, 'borrowSpeed=0');\n\n    if (compSupplySpeeds[cToken] != supplySpeed) {\n      // Supply speed updated so let's update supply state to ensure that\n      //  1. COMP accrued properly for the old speed, and\n      //  2. COMP accrued at the new speed starts after this block.\n      _updateCompSupplyIndex(cToken);\n\n      // Update speed and emit event\n      compSupplySpeeds[cToken] = supplySpeed;\n      emit CompSupplySpeedUpdated(cToken, supplySpeed);\n    }\n\n    if (compBorrowSpeeds[cToken] != borrowSpeed) {\n      // Borrow speed updated so let's update borrow state to ensure that\n      //  1. COMP accrued properly for the old speed, and\n      //  2. COMP accrued at the new speed starts after this block.\n      Exp memory borrowIndex = Exp({mantissa: ICToken(cToken).borrowIndex()});\n      _updateCompBorrowIndex(cToken, borrowIndex);\n\n      // Update speed and emit event\n      compBorrowSpeeds[cToken] = borrowSpeed;\n      emit CompBorrowSpeedUpdated(cToken, borrowSpeed);\n    }\n  }\n\n  /**\n   * @notice Accrue COMP to the market by updating the supply index\n   * @param cToken The market whose supply index to update\n   * @dev Index is a cumulative sum of the COMP per cToken accrued.\n   */\n  function updateCompSupplyIndex(address cToken) external onlyComptroller {\n    _updateCompSupplyIndex(cToken);\n  }\n\n  function _updateCompSupplyIndex(address cToken) private {\n    CompMarketState storage supplyState = compSupplyState[cToken];\n    uint256 supplySpeed = compSupplySpeeds[cToken];\n    uint32 blockNumber = block.number.safe32('block number exceeds 32 bits');\n    uint256 deltaBlocks = uint256(blockNumber).sub_(uint256(supplyState.block));\n    if (deltaBlocks != 0 && supplySpeed != 0) {\n      uint256 supplyTokens = ICToken(cToken).totalSupply();\n      uint256 _compAccrued = deltaBlocks.mul_(supplySpeed);\n      Double memory ratio = supplyTokens > 0 ? _compAccrued.fraction(supplyTokens) : Double({mantissa: 0});\n      supplyState.index = Double({mantissa: supplyState.index}).add_(ratio).mantissa.safe224(\n        'new index exceeds 224 bits'\n      );\n      supplyState.block = blockNumber;\n    } else if (deltaBlocks > 0) {\n      supplyState.block = blockNumber;\n    }\n  }\n\n  /**\n   * @notice Accrue COMP to the market by updating the borrow index\n   * @param cToken The market whose borrow index to update\n   * @dev Index is a cumulative sum of the COMP per cToken accrued.\n   */\n\n  function updateCompBorrowIndex(address cToken, Exp memory marketBorrowIndex) external onlyComptroller {\n    _updateCompBorrowIndex(cToken, marketBorrowIndex);\n  }\n\n  function _updateCompBorrowIndex(address cToken, Exp memory marketBorrowIndex) private {\n    CompMarketState storage borrowState = compBorrowState[cToken];\n    uint256 borrowSpeed = compBorrowSpeeds[cToken];\n    uint32 blockNumber = block.number.safe32('block number exceeds 32 bits');\n    uint256 deltaBlocks = uint256(blockNumber).sub_(uint256(borrowState.block));\n    if (deltaBlocks > 0 && borrowSpeed > 0) {\n      uint256 borrowAmount = ICToken(cToken).totalBorrows().div_(marketBorrowIndex);\n      uint256 _compAccrued = deltaBlocks.mul_(borrowSpeed);\n      Double memory ratio = borrowAmount > 0 ? _compAccrued.fraction(borrowAmount) : Double({mantissa: 0});\n      borrowState.index = Double({mantissa: borrowState.index}).add_(ratio).mantissa.safe224(\n        'new index exceeds 224 bits'\n      );\n      borrowState.block = blockNumber;\n    } else if (deltaBlocks > 0) {\n      borrowState.block = blockNumber;\n    }\n  }\n\n  /**\n   * @notice Calculate COMP accrued by a supplier and possibly transfer it to them\n   * @param cToken The market in which the supplier is interacting\n   * @param supplier The address of the supplier to distribute COMP to\n   */\n\n  function distributeSupplierComp(address cToken, address supplier) external onlyComptroller {\n    _distributeSupplierComp(cToken, supplier);\n  }\n\n  function _distributeSupplierComp(address cToken, address supplier) private {\n    // This check should be as gas efficient as possible as distributeSupplierComp is called in many places.\n    // - We really don't want to call an external contract as that's quite expensive.\n\n    CompMarketState storage supplyState = compSupplyState[cToken];\n    uint256 supplyIndex = supplyState.index;\n    uint256 supplierIndex = compSupplierIndex[cToken][supplier];\n\n    // Update supplier's index to the current index since we are distributing accrued COMP\n    compSupplierIndex[cToken][supplier] = supplyIndex;\n\n    if (supplierIndex == 0 && supplyIndex >= compInitialIndex) {\n      // Covers the case where users supplied tokens before the market's supply state index was set.\n      // Rewards the user with COMP accrued from the start of when supplier rewards were first\n      // set for the market.\n      supplierIndex = compInitialIndex;\n    }\n\n    // Calculate change in the cumulative sum of the COMP per cToken accrued\n    Double memory deltaIndex = Double({mantissa: supplyIndex.sub_(supplierIndex)});\n\n    uint256 supplierTokens = ICToken(cToken).balanceOf(supplier);\n\n    // Calculate COMP accrued: cTokenAmount * accruedPerCTokenInterface\n    uint256 supplierDelta = supplierTokens.mul_(deltaIndex);\n\n    uint256 supplierAccrued = compAccrued[supplier].add_(supplierDelta);\n    compAccrued[supplier] = supplierAccrued;\n\n    emit DistributedSupplierComp(cToken, supplier, supplierDelta, supplyIndex);\n  }\n\n  /**\n   * @notice Calculate COMP accrued by a borrower and possibly transfer it to them\n   * @dev Borrowers will not begin to accrue until after the first interaction with the protocol.\n   * @param cToken The market in which the borrower is interacting\n   * @param borrower The address of the borrower to distribute COMP to\n   */\n  function distributeBorrowerComp(\n    address cToken,\n    address borrower,\n    Exp memory marketBorrowIndex\n  ) external onlyComptroller {\n    _distributeBorrowerComp(cToken, borrower, marketBorrowIndex);\n  }\n\n  function _distributeBorrowerComp(address cToken, address borrower, Exp memory marketBorrowIndex) private {\n    // This check should be as gas efficient as possible as distributeBorrowerComp is called in many places.\n    // - We really don't want to call an external contract as that's quite expensive.\n\n    CompMarketState storage borrowState = compBorrowState[cToken];\n    uint256 borrowIndex = borrowState.index;\n    uint256 borrowerIndex = compBorrowerIndex[cToken][borrower];\n\n    // Update borrowers's index to the current index since we are distributing accrued COMP\n    compBorrowerIndex[cToken][borrower] = borrowIndex;\n\n    if (borrowerIndex == 0 && borrowIndex >= compInitialIndex) {\n      // Covers the case where users borrowed tokens before the market's borrow state index was set.\n      // Rewards the user with COMP accrued from the start of when borrower rewards were first\n      // set for the market.\n      borrowerIndex = compInitialIndex;\n    }\n\n    // Calculate change in the cumulative sum of the COMP per borrowed unit accrued\n    Double memory deltaIndex = Double({mantissa: borrowIndex.sub_(borrowerIndex)});\n\n    uint256 borrowerAmount = ICToken(cToken).borrowBalanceStored(borrower).div_(marketBorrowIndex);\n\n    // Calculate COMP accrued: cTokenAmount * accruedPerBorrowedUnit\n    uint256 borrowerDelta = borrowerAmount.mul_(deltaIndex);\n\n    uint256 borrowerAccrued = compAccrued[borrower].add_(borrowerDelta);\n    compAccrued[borrower] = borrowerAccrued;\n\n    emit DistributedBorrowerComp(cToken, borrower, borrowerDelta, borrowIndex);\n  }\n\n  /**\n   * @notice Calculate additional accrued COMP for a contributor since last accrual\n   * @param contributor The address to calculate contributor rewards for\n   */\n  function updateContributorRewards(address contributor) public {\n    uint256 compSpeed = compContributorSpeeds[contributor];\n    uint256 blockNumber = block.number;\n    uint256 deltaBlocks = blockNumber.sub_(lastContributorBlock[contributor]);\n    if (deltaBlocks > 0 && compSpeed > 0) {\n      uint256 newAccrued = deltaBlocks.mul_(compSpeed);\n      uint256 contributorAccrued = compAccrued[contributor].add_(newAccrued);\n\n      compAccrued[contributor] = contributorAccrued;\n      lastContributorBlock[contributor] = blockNumber;\n    }\n  }\n\n  /**\n   * @notice Claim all the comp accrued by holder in all markets\n   * @param holder The address to claim COMP for\n   */\n  function claimSumer(address holder) public {\n    return claimSumer(holder, comptroller.getAllMarkets());\n  }\n\n  /**\n   * @notice Claim all the comp accrued by holder in the specified markets\n   * @param holder The address to claim COMP for\n   * @param cTokens The list of markets to claim COMP in\n   */\n  function claimSumer(address holder, address[] memory cTokens) public {\n    address[] memory holders = new address[](1);\n    holders[0] = holder;\n    claimSumer(holders, cTokens, true, true);\n  }\n\n  /**\n   * @notice Claim all comp accrued by the holders\n   * @param holders The addresses to claim COMP for\n   * @param cTokens The list of markets to claim COMP in\n   * @param borrowers Whether or not to claim COMP earned by borrowing\n   * @param suppliers Whether or not to claim COMP earned by supplying\n   */\n  function claimSumer(address[] memory holders, address[] memory cTokens, bool borrowers, bool suppliers) public {\n    for (uint256 i = 0; i < cTokens.length; ++i) {\n      address cToken = cTokens[i];\n      (bool isListed, , ) = comptroller.markets(cToken);\n      require(isListed, 'market must be listed');\n      if (borrowers) {\n        Exp memory borrowIndex = Exp({mantissa: ICToken(cToken).borrowIndex()});\n        _updateCompBorrowIndex(cToken, borrowIndex);\n        for (uint256 j = 0; j < holders.length; j++) {\n          _distributeBorrowerComp(cToken, holders[j], borrowIndex);\n        }\n      }\n      if (suppliers) {\n        _updateCompSupplyIndex(cToken);\n        for (uint256 j = 0; j < holders.length; j++) {\n          _distributeSupplierComp(cToken, holders[j]);\n        }\n      }\n    }\n    for (uint256 j = 0; j < holders.length; j++) {\n      compAccrued[holders[j]] = grantCompInternal(holders[j], compAccrued[holders[j]]);\n    }\n  }\n\n  /**\n   * @notice Transfer COMP to the user\n   * @dev Note: If there is not enough COMP, we do not perform the transfer at all.\n   * @param user The address of the user to transfer COMP to\n   * @param amount The amount of COMP to (possibly) transfer\n   * @return The amount of COMP which was NOT transferred to the user\n   */\n  function grantCompInternal(address user, uint256 amount) private returns (uint256) {\n    address[] memory markets = comptroller.getAssetsIn(user);\n    /***\n        for (uint i = 0; i < allMarkets.length; ++i) {\n            address market = address(allMarkets[i]);\n        ***/\n    for (uint256 i = 0; i < markets.length; ++i) {\n      address market = address(markets[i]);\n      bool noOriginalSpeed = compBorrowSpeeds[market] == 0;\n      bool invalidSupply = noOriginalSpeed && compSupplierIndex[market][user] > 0;\n      bool invalidBorrow = noOriginalSpeed && compBorrowerIndex[market][user] > 0;\n\n      if (invalidSupply || invalidBorrow) {\n        return amount;\n      }\n    }\n\n    uint256 compRemaining = ICToken(comp).balanceOf(address(this));\n    if (amount > 0 && amount <= compRemaining) {\n      comp.call(abi.encodeWithSignature('transfer(address,uint256)', user, amount));\n      return 0;\n    }\n    return amount;\n  }\n\n  function initializeMarket(address cToken, uint32 blockNumber) external onlyComptroller {\n    CompMarketState storage supplyState = compSupplyState[cToken];\n    CompMarketState storage borrowState = compBorrowState[cToken];\n    /*\n     * Update market state indices\n     */\n    if (supplyState.index == 0) {\n      // Initialize supply state index with default value\n      supplyState.index = compInitialIndex;\n    }\n    if (borrowState.index == 0) {\n      // Initialize borrow state index with default value\n      borrowState.index = compInitialIndex;\n    }\n    /*\n     * Update market state block numbers\n     */\n    supplyState.block = borrowState.block = blockNumber;\n  }\n\n  /*** Comp Distribution Admin ***/\n  /**\n   * @notice Transfer COMP to the recipient\n   * @dev Note: If there is not enough COMP, we do not perform the transfer at all.\n   * @param recipient The address of the recipient to transfer COMP to\n   * @param amount The amount of COMP to (possibly) transfer\n   */\n  function _grantComp(address recipient, uint256 amount) public onlyRole(DEFAULT_ADMIN_ROLE) {\n    uint256 amountLeft = grantCompInternal(recipient, amount);\n    require(amountLeft == 0, 'insufficient comp for grant');\n    emit CompGranted(recipient, amount);\n  }\n\n  /**\n   * @notice Set COMP borrow and supply speeds for the specified markets.\n   * @param cTokens The markets whose COMP speed to update.\n   * @param supplySpeeds New supply-side COMP speed for the corresponding market.\n   * @param borrowSpeeds New borrow-side COMP speed for the corresponding market.\n   */\n  function _setCompSpeeds(\n    address[] memory cTokens,\n    uint256[] memory supplySpeeds,\n    uint256[] memory borrowSpeeds\n  ) public onlyRole(DEFAULT_ADMIN_ROLE) {\n    uint256 numTokens = cTokens.length;\n    require(\n      numTokens == supplySpeeds.length && numTokens == borrowSpeeds.length,\n      'Comptroller::_setCompSpeeds invalid input'\n    );\n\n    for (uint256 i = 0; i < numTokens; ++i) {\n      _setCompSpeedInternal(cTokens[i], supplySpeeds[i], borrowSpeeds[i]);\n    }\n  }\n\n  /**\n   * @notice Set COMP speed for a single contributor\n   * @param contributor The contributor whose COMP speed to update\n   * @param compSpeed New COMP speed for contributor\n   */\n  function _setContributorCompSpeed(address contributor, uint256 compSpeed) public onlyRole(DEFAULT_ADMIN_ROLE) {\n    // note that COMP speed could be set to 0 to halt liquidity rewards for a contributor\n    updateContributorRewards(contributor);\n    if (compSpeed == 0) {\n      // release storage\n      delete lastContributorBlock[contributor];\n    } else {\n      lastContributorBlock[contributor] = block.number;\n    }\n    compContributorSpeeds[contributor] = compSpeed;\n\n    emit ContributorCompSpeedUpdated(contributor, compSpeed);\n  }\n\n  function calculateComp(address holder) external view returns (uint256) {\n    address[] memory cTokens = comptroller.getAllMarkets();\n    uint256 accrued = compAccrued[holder];\n    for (uint256 i = 0; i < cTokens.length; ++i) {\n      address cToken = cTokens[i];\n      Exp memory marketBorrowIndex = Exp({mantissa: ICToken(cToken).borrowIndex()});\n      // _updateCompBorrowIndex\n      CompMarketState memory borrowState = compBorrowState[cToken];\n      uint256 borrowSpeed = compBorrowSpeeds[cToken];\n      uint32 blockNumber = block.number.safe32('block number exceeds 32 bits');\n      uint256 borrowDeltaBlocks = uint256(blockNumber).sub_(uint256(borrowState.block));\n      if (borrowDeltaBlocks > 0 && borrowSpeed > 0) {\n        uint256 borrowAmount = ICToken(cToken).totalBorrows().div_(marketBorrowIndex);\n        uint256 _compAccrued = borrowDeltaBlocks.mul_(borrowSpeed);\n        Double memory ratio = borrowAmount > 0 ? _compAccrued.fraction(borrowAmount) : Double({mantissa: 0});\n        borrowState.index = Double({mantissa: borrowState.index}).add_(ratio).mantissa.safe224(\n          'new index exceeds 224 bits'\n        );\n        borrowState.block = blockNumber;\n      } else if (borrowDeltaBlocks > 0) {\n        borrowState.block = blockNumber;\n      }\n      // _distributeBorrowerComp\n      uint256 borrowIndex = borrowState.index;\n      uint256 borrowerIndex = compBorrowerIndex[cToken][holder];\n      if (borrowerIndex == 0 && borrowIndex >= compInitialIndex) {\n        borrowerIndex = compInitialIndex;\n      }\n      Double memory borrowDeltaIndex = Double({mantissa: borrowIndex.sub_(borrowerIndex)});\n      uint256 borrowerAmount = ICToken(cToken).borrowBalanceStored(holder).div_(marketBorrowIndex);\n      uint256 borrowerDelta = borrowerAmount.mul_(borrowDeltaIndex);\n      accrued = accrued.add_(borrowerDelta);\n      // _updateCompSupplyIndex\n      CompMarketState memory supplyState = compSupplyState[cToken];\n      uint256 supplySpeed = compSupplySpeeds[cToken];\n      uint256 supplyDeltaBlocks = uint256(blockNumber).sub_(uint256(supplyState.block));\n      if (supplyDeltaBlocks > 0 && supplySpeed > 0) {\n        uint256 supplyTokens = ICToken(cToken).totalSupply();\n        uint256 _compAccrued = supplyDeltaBlocks.mul_(supplySpeed);\n        Double memory ratio = supplyTokens > 0 ? _compAccrued.fraction(supplyTokens) : Double({mantissa: 0});\n        supplyState.index = Double({mantissa: supplyState.index}).add_(ratio).mantissa.safe224(\n          'new index exceeds 224 bits'\n        );\n        supplyState.block = blockNumber;\n      } else if (supplyDeltaBlocks > 0) {\n        supplyState.block = blockNumber;\n      }\n      // _distributeSupplierComp\n      uint256 supplyIndex = supplyState.index;\n      uint256 supplierIndex = compSupplierIndex[cToken][holder];\n      if (supplierIndex == 0 && supplyIndex >= compInitialIndex) {\n        supplierIndex = compInitialIndex;\n      }\n      Double memory supplyDeltaIndex = Double({mantissa: supplyIndex.sub_(supplierIndex)});\n      uint256 supplierTokens = ICToken(cToken).balanceOf(holder);\n      uint256 supplierDelta = supplierTokens.mul_(supplyDeltaIndex);\n      accrued = accrued.add_(supplierDelta);\n    }\n    return accrued;\n  }\n}\n"
    },
    "contracts/Comptroller/CompoundLens.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport './Interfaces/ICToken.sol';\nimport './Interfaces/IPriceOracle.sol';\nimport './Interfaces/IGovernorAlpha.sol';\nimport './Interfaces/IComptroller.sol';\nimport './Interfaces/IGovernorBravo.sol';\nimport '../Exponential/ExponentialNoError.sol';\nimport './ComptrollerStorage.sol';\n\ncontract CompoundLens {\n  using ExponentialNoError for uint256;\n  using ExponentialNoError for Exp;\n  using ExponentialNoError for Double;\n  struct CTokenMetadata {\n    address cToken;\n    uint256 exchangeRateCurrent;\n    uint256 supplyRatePerBlock;\n    uint256 borrowRatePerBlock;\n    uint256 reserveFactorMantissa;\n    uint256 totalBorrows;\n    uint256 totalReserves;\n    uint256 totalSupply;\n    uint256 totalCash;\n    bool isListed;\n    // uint256 collateralFactorMantissa;\n    address underlyingAssetAddress;\n    uint256 cTokenDecimals;\n    uint256 underlyingDecimals;\n    bool isCToken;\n    bool isCEther;\n    uint256 borrowCap;\n    uint256 depositCap;\n    uint256 heteroLiquidationIncentive;\n    uint256 homoLiquidationIncentive;\n    uint256 sutokenLiquidationIncentive;\n    uint8 groupId;\n    uint256 intraRate;\n    uint256 mintRate;\n    uint256 interRate;\n    uint256 discountRate;\n  }\n\n  struct GroupInfo {\n    uint256 intraRate;\n    uint256 mintRate;\n    uint256 interRate;\n  }\n\n  function cTokenMetadata(ICToken cToken) public returns (CTokenMetadata memory) {\n    IComptroller comptroller = IComptroller(address(cToken.comptroller()));\n\n    // get underlying info\n    address underlyingAssetAddress;\n    uint256 underlyingDecimals;\n    if (cToken.isCEther()) {\n      underlyingAssetAddress = address(0);\n      underlyingDecimals = 18;\n    } else {\n      underlyingAssetAddress = cToken.underlying();\n      underlyingDecimals = ICToken(cToken.underlying()).decimals();\n    }\n\n    // get group info\n    (bool isListed, uint8 assetGroupId, ) = comptroller.markets(address(cToken));\n    IComptroller.AssetGroup memory group = comptroller.getAssetGroup(assetGroupId);\n    GroupInfo memory gi;\n    if (cToken.isCToken()) {\n      gi.intraRate = group.intraCRateMantissa;\n      gi.interRate = group.interCRateMantissa;\n      gi.mintRate = group.intraMintRateMantissa;\n    } else {\n      gi.intraRate = group.intraSuRateMantissa;\n      gi.interRate = group.interSuRateMantissa;\n      gi.mintRate = group.intraSuRateMantissa;\n    }\n    (uint256 heteroIncentiveMantissa, uint256 homoIncentiveMantissa, uint256 sutokenIncentiveMantissa) = comptroller\n      .liquidationIncentiveMantissa();\n    return\n      CTokenMetadata({\n        cToken: address(cToken),\n        exchangeRateCurrent: cToken.exchangeRateCurrent(),\n        supplyRatePerBlock: cToken.supplyRatePerBlock(),\n        borrowRatePerBlock: cToken.borrowRatePerBlock(),\n        reserveFactorMantissa: cToken.reserveFactorMantissa(),\n        totalBorrows: cToken.totalBorrows(),\n        totalReserves: cToken.totalReserves(),\n        totalSupply: cToken.totalSupply(),\n        totalCash: cToken.getCash(),\n        isListed: isListed,\n        underlyingAssetAddress: underlyingAssetAddress,\n        cTokenDecimals: cToken.decimals(),\n        underlyingDecimals: underlyingDecimals,\n        isCToken: cToken.isCToken(),\n        isCEther: cToken.isCEther(),\n        borrowCap: comptroller._getMarketBorrowCap(address(cToken)),\n        depositCap: ComptrollerStorage(address(comptroller)).maxSupply(address(cToken)),\n        heteroLiquidationIncentive: heteroIncentiveMantissa,\n        homoLiquidationIncentive: homoIncentiveMantissa,\n        sutokenLiquidationIncentive: sutokenIncentiveMantissa,\n        groupId: assetGroupId,\n        intraRate: gi.intraRate,\n        interRate: gi.interRate,\n        mintRate: gi.mintRate,\n        discountRate: cToken.getDiscountRate()\n      });\n  }\n\n  function cTokenMetadataAll(ICToken[] calldata cTokens) external returns (CTokenMetadata[] memory) {\n    uint256 cTokenCount = cTokens.length;\n    CTokenMetadata[] memory res = new CTokenMetadata[](cTokenCount);\n    for (uint256 i = 0; i < cTokenCount; i++) {\n      res[i] = cTokenMetadata(cTokens[i]);\n    }\n    return res;\n  }\n\n  struct CTokenBalances {\n    address cToken;\n    bool isCToken;\n    bool isCEther;\n    uint256 balanceOf;\n    uint256 borrowBalanceCurrent;\n    uint256 balanceOfUnderlying;\n    uint256 tokenBalance;\n    uint256 tokenAllowance;\n  }\n\n  function cTokenBalances(ICToken cToken, address payable account) public returns (CTokenBalances memory) {\n    uint256 balanceOf = cToken.balanceOf(account);\n    uint256 borrowBalanceCurrent = cToken.borrowBalanceCurrent(account);\n    uint256 balanceOfUnderlying = cToken.balanceOfUnderlying(account);\n    uint256 tokenBalance;\n    uint256 tokenAllowance;\n\n    if (cToken.isCEther()) {\n      tokenBalance = account.balance;\n      tokenAllowance = account.balance;\n    } else {\n      ICToken underlying = ICToken(cToken.underlying());\n      tokenBalance = underlying.balanceOf(account);\n      tokenAllowance = underlying.allowance(account, address(cToken));\n    }\n\n    return\n      CTokenBalances({\n        cToken: address(cToken),\n        isCToken: cToken.isCToken(),\n        isCEther: cToken.isCEther(),\n        balanceOf: balanceOf,\n        borrowBalanceCurrent: borrowBalanceCurrent,\n        balanceOfUnderlying: balanceOfUnderlying,\n        tokenBalance: tokenBalance,\n        tokenAllowance: tokenAllowance\n      });\n  }\n\n  function cTokenBalancesAll(\n    ICToken[] calldata cTokens,\n    address payable account\n  ) external returns (CTokenBalances[] memory) {\n    uint256 cTokenCount = cTokens.length;\n    CTokenBalances[] memory res = new CTokenBalances[](cTokenCount);\n    for (uint256 i = 0; i < cTokenCount; i++) {\n      res[i] = cTokenBalances(cTokens[i], account);\n    }\n    return res;\n  }\n\n  struct CTokenUnderlyingPrice {\n    address cToken;\n    uint256 underlyingPrice;\n  }\n\n  function cTokenUnderlyingPrice(ICToken cToken) public view returns (CTokenUnderlyingPrice memory) {\n    IComptroller comptroller = IComptroller(address(cToken.comptroller()));\n    IPriceOracle priceOracle = IPriceOracle(comptroller.oracle());\n\n    return\n      CTokenUnderlyingPrice({\n        cToken: address(cToken),\n        underlyingPrice: priceOracle.getUnderlyingPrice(address(cToken))\n      });\n  }\n\n  function cTokenUnderlyingPriceAll(ICToken[] calldata cTokens) external view returns (CTokenUnderlyingPrice[] memory) {\n    uint256 cTokenCount = cTokens.length;\n    CTokenUnderlyingPrice[] memory res = new CTokenUnderlyingPrice[](cTokenCount);\n    for (uint256 i = 0; i < cTokenCount; i++) {\n      res[i] = cTokenUnderlyingPrice(cTokens[i]);\n    }\n    return res;\n  }\n\n  struct AccountLimits {\n    address[] markets;\n    uint256 liquidity;\n    uint256 shortfall;\n  }\n\n  function getAccountLimits(IComptroller comptroller, address account) public returns (AccountLimits memory) {\n    (uint256 errorCode, uint256 liquidity, uint256 shortfall) = comptroller.getAccountLiquidity(account);\n    require(errorCode == 0);\n\n    return AccountLimits({markets: comptroller.getAssetsIn(account), liquidity: liquidity, shortfall: shortfall});\n  }\n\n  struct GovReceipt {\n    uint256 proposalId;\n    bool hasVoted;\n    bool support;\n    uint96 votes;\n  }\n\n  function getGovReceipts(\n    IGovernorAlpha governor,\n    address voter,\n    uint256[] memory proposalIds\n  ) public view returns (GovReceipt[] memory) {\n    uint256 proposalCount = proposalIds.length;\n    GovReceipt[] memory res = new GovReceipt[](proposalCount);\n    for (uint256 i = 0; i < proposalCount; i++) {\n      IGovernorAlpha.Receipt memory receipt;\n\n      (receipt.hasVoted, receipt.support, receipt.votes) = governor.getReceipt(proposalIds[i], voter);\n      res[i] = GovReceipt({\n        proposalId: proposalIds[i],\n        hasVoted: receipt.hasVoted,\n        support: receipt.support,\n        votes: receipt.votes\n      });\n    }\n    return res;\n  }\n\n  struct GovBravoReceipt {\n    uint256 proposalId;\n    bool hasVoted;\n    uint8 support;\n    uint96 votes;\n  }\n\n  function getGovBravoReceipts(\n    IGovernorBravo governor,\n    address voter,\n    uint256[] memory proposalIds\n  ) public view returns (GovBravoReceipt[] memory) {\n    uint256 proposalCount = proposalIds.length;\n    GovBravoReceipt[] memory res = new GovBravoReceipt[](proposalCount);\n    for (uint256 i = 0; i < proposalCount; i++) {\n      IGovernorBravo.Receipt memory receipt = governor.getReceipt(proposalIds[i], voter);\n      res[i] = GovBravoReceipt({\n        proposalId: proposalIds[i],\n        hasVoted: receipt.hasVoted,\n        support: receipt.support,\n        votes: receipt.votes\n      });\n    }\n    return res;\n  }\n\n  struct GovProposal {\n    uint256 proposalId;\n    address proposer;\n    uint256 eta;\n    address[] targets;\n    uint256[] values;\n    string[] signatures;\n    bytes[] calldatas;\n    uint256 startBlock;\n    uint256 endBlock;\n    uint256 forVotes;\n    uint256 againstVotes;\n    bool canceled;\n    bool executed;\n  }\n\n  function setProposal(GovProposal memory res, IGovernorAlpha governor, uint256 proposalId) internal view {\n    (\n      ,\n      address proposer,\n      uint256 eta,\n      uint256 startBlock,\n      uint256 endBlock,\n      uint256 forVotes,\n      uint256 againstVotes,\n      bool canceled,\n      bool executed\n    ) = governor.proposals(proposalId);\n    res.proposalId = proposalId;\n    res.proposer = proposer;\n    res.eta = eta;\n    res.startBlock = startBlock;\n    res.endBlock = endBlock;\n    res.forVotes = forVotes;\n    res.againstVotes = againstVotes;\n    res.canceled = canceled;\n    res.executed = executed;\n  }\n\n  function getGovProposals(\n    IGovernorAlpha governor,\n    uint256[] calldata proposalIds\n  ) external view returns (GovProposal[] memory) {\n    GovProposal[] memory res = new GovProposal[](proposalIds.length);\n    for (uint256 i = 0; i < proposalIds.length; i++) {\n      (\n        address[] memory targets,\n        uint256[] memory values,\n        string[] memory signatures,\n        bytes[] memory calldatas\n      ) = governor.getActions(proposalIds[i]);\n      res[i] = GovProposal({\n        proposalId: 0,\n        proposer: address(0),\n        eta: 0,\n        targets: targets,\n        values: values,\n        signatures: signatures,\n        calldatas: calldatas,\n        startBlock: 0,\n        endBlock: 0,\n        forVotes: 0,\n        againstVotes: 0,\n        canceled: false,\n        executed: false\n      });\n      setProposal(res[i], governor, proposalIds[i]);\n    }\n    return res;\n  }\n\n  struct GovBravoProposal {\n    uint256 proposalId;\n    address proposer;\n    uint256 eta;\n    address[] targets;\n    uint256[] values;\n    string[] signatures;\n    bytes[] calldatas;\n    uint256 startBlock;\n    uint256 endBlock;\n    uint256 forVotes;\n    uint256 againstVotes;\n    uint256 abstainVotes;\n    bool canceled;\n    bool executed;\n  }\n\n  function setBravoProposal(GovBravoProposal memory res, IGovernorBravo governor, uint256 proposalId) internal view {\n    IGovernorBravo.Proposal memory p = governor.proposals(proposalId);\n\n    res.proposalId = proposalId;\n    res.proposer = p.proposer;\n    res.eta = p.eta;\n    res.startBlock = p.startBlock;\n    res.endBlock = p.endBlock;\n    res.forVotes = p.forVotes;\n    res.againstVotes = p.againstVotes;\n    res.abstainVotes = p.abstainVotes;\n    res.canceled = p.canceled;\n    res.executed = p.executed;\n  }\n\n  function getGovBravoProposals(\n    IGovernorBravo governor,\n    uint256[] calldata proposalIds\n  ) external view returns (GovBravoProposal[] memory) {\n    GovBravoProposal[] memory res = new GovBravoProposal[](proposalIds.length);\n    for (uint256 i = 0; i < proposalIds.length; i++) {\n      (\n        address[] memory targets,\n        uint256[] memory values,\n        string[] memory signatures,\n        bytes[] memory calldatas\n      ) = governor.getActions(proposalIds[i]);\n      res[i] = GovBravoProposal({\n        proposalId: 0,\n        proposer: address(0),\n        eta: 0,\n        targets: targets,\n        values: values,\n        signatures: signatures,\n        calldatas: calldatas,\n        startBlock: 0,\n        endBlock: 0,\n        forVotes: 0,\n        againstVotes: 0,\n        abstainVotes: 0,\n        canceled: false,\n        executed: false\n      });\n      setBravoProposal(res[i], governor, proposalIds[i]);\n    }\n    return res;\n  }\n\n  struct CompBalanceMetadata {\n    uint256 balance;\n    uint256 votes;\n    address delegate;\n  }\n\n  function getCompBalanceMetadata(ICToken comp, address account) external view returns (CompBalanceMetadata memory) {\n    return\n      CompBalanceMetadata({\n        balance: comp.balanceOf(account),\n        votes: uint256(comp.getCurrentVotes(account)),\n        delegate: comp.delegates(account)\n      });\n  }\n\n  struct CompBalanceMetadataExt {\n    uint256 balance;\n    uint256 votes;\n    address delegate;\n    uint256 allocated;\n  }\n\n  function getCompBalanceMetadataExt(\n    ICToken comp,\n    IComptroller comptroller,\n    address account\n  ) external returns (CompBalanceMetadataExt memory) {\n    uint256 balance = comp.balanceOf(account);\n    comptroller.claimComp(account);\n    uint256 newBalance = comp.balanceOf(account);\n    uint256 accrued = comptroller.compAccrued(account);\n    uint256 total = add(accrued, newBalance, 'sum comp total');\n    uint256 allocated = sub(total, balance, 'sub allocated');\n\n    return\n      CompBalanceMetadataExt({\n        balance: balance,\n        votes: uint256(comp.getCurrentVotes(account)),\n        delegate: comp.delegates(account),\n        allocated: allocated\n      });\n  }\n\n  struct CompVotes {\n    uint256 blockNumber;\n    uint256 votes;\n  }\n\n  function getCompVotes(\n    ICToken comp,\n    address account,\n    uint32[] calldata blockNumbers\n  ) external view returns (CompVotes[] memory) {\n    CompVotes[] memory res = new CompVotes[](blockNumbers.length);\n    for (uint256 i = 0; i < blockNumbers.length; i++) {\n      res[i] = CompVotes({\n        blockNumber: uint256(blockNumbers[i]),\n        votes: uint256(comp.getPriorVotes(account, blockNumbers[i]))\n      });\n    }\n    return res;\n  }\n\n  function compareStrings(string memory a, string memory b) internal pure returns (bool) {\n    return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\n  }\n\n  function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a, errorMessage);\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n    require(b <= a, errorMessage);\n    uint256 c = a - b;\n    return c;\n  }\n\n  /**\n   * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\n   * @dev Used in liquidation (called in ICToken(cToken).liquidateBorrowFresh)\n   * @param cTokenBorrowed The address of the borrowed cToken\n   * @param cTokenCollateral The address of the collateral cToken\n   * @param actualRepayAmount The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\n   * @return (errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\n   */\n  function liquidateCalculateSeizeTokens(\n    address cTokenBorrowed,\n    address cTokenCollateral,\n    uint256 actualRepayAmount,\n    IComptroller comptroller\n  ) external view returns (uint256, uint256) {\n    /* Read oracle prices for borrowed and collateral markets */\n    address oracle = comptroller.oracle();\n    uint256 priceBorrowedMantissa = IPriceOracle(oracle).getUnderlyingPrice(address(cTokenBorrowed));\n    uint256 priceCollateralMantissa = IPriceOracle(oracle).getUnderlyingPrice(address(cTokenCollateral));\n    require(priceBorrowedMantissa > 0 && priceCollateralMantissa > 0, 'PRICE_ERROR');\n\n    /*\n     * Get the exchange rate and calculate the number of collateral tokens to seize:\n     *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral\n     *  seizeTokens = seizeAmount / exchangeRate\n     *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\n     */\n    uint256 exchangeRateMantissa = ICToken(cTokenCollateral).exchangeRateStored(); // Note: reverts on error\n    uint256 seizeTokens;\n    Exp memory numerator;\n    Exp memory denominator;\n    Exp memory ratio;\n\n    (, uint8 repayTokenGroupId, ) = comptroller.markets(cTokenBorrowed);\n    (, uint8 seizeTokenGroupId, ) = comptroller.markets(cTokenCollateral);\n    (uint256 heteroIncentiveMantissa, uint256 homoIncentiveMantissa, uint256 sutokenIncentiveMantissa) = comptroller\n      .liquidationIncentiveMantissa();\n\n    // default is repaying heterogeneous assets\n    uint256 incentiveMantissa = heteroIncentiveMantissa;\n    if (repayTokenGroupId == seizeTokenGroupId) {\n      if (ICToken(cTokenBorrowed).isCToken() == false) {\n        // repaying sutoken\n        incentiveMantissa = sutokenIncentiveMantissa;\n      } else {\n        // repaying homogeneous assets\n        incentiveMantissa = homoIncentiveMantissa;\n      }\n    }\n\n    numerator = Exp({mantissa: incentiveMantissa}).mul_(Exp({mantissa: priceBorrowedMantissa}));\n    denominator = Exp({mantissa: priceCollateralMantissa}).mul_(Exp({mantissa: exchangeRateMantissa}));\n    ratio = numerator.div_(denominator);\n\n    seizeTokens = ratio.mul_ScalarTruncate(actualRepayAmount);\n\n    return (uint256(0), seizeTokens);\n  }\n\n  /**\n   * @notice Returns true if the given cToken market has been deprecated\n   * @dev All borrows in a deprecated cToken market can be immediately liquidated\n   * @param cToken The market to check if deprecated\n   */\n  function isDeprecated(address cToken, IComptroller comptroller) public view returns (bool) {\n    return\n      comptroller.marketGroupId(cToken) == 0 &&\n      //borrowGuardianPaused[cToken] == true &&\n      IComptroller(comptroller)._getBorrowPaused(cToken) &&\n      ICToken(cToken).reserveFactorMantissa() == 1e18;\n  }\n\n  /**\n   * @notice Checks if the liquidation should be allowed to occur\n   * @param cTokenBorrowed Asset which was borrowed by the borrower\n   * @param cTokenCollateral Asset which was used as collateral and will be seized\n   * @param liquidator The address repaying the borrow and seizing the collateral\n   * @param borrower The address of the borrower\n   * @param repayAmount The amount of underlying being repaid\n   */\n  function liquidateBorrowAllowed(\n    address cTokenBorrowed,\n    address cTokenCollateral,\n    address liquidator,\n    address borrower,\n    uint256 repayAmount,\n    IComptroller comptroller\n  ) external view returns (uint256) {\n    // Shh - currently unused: liquidator;\n\n    require(comptroller.isListed(cTokenBorrowed) && comptroller.isListed(cTokenCollateral), 'MARKET_NOT_LISTED');\n\n    uint256 borrowBalance = ICToken(cTokenBorrowed).borrowBalanceStored(borrower);\n\n    /* allow accounts to be liquidated if the market is deprecated */\n    if (isDeprecated(cTokenBorrowed, comptroller)) {\n      require(borrowBalance >= repayAmount, 'too much repay');\n    } else {\n      /* The borrower must have shortfall in order to be liquidatable */\n      (, , uint256 shortfall) = comptroller.getHypotheticalAccountLiquidity(borrower, cTokenBorrowed, 0, 0);\n\n      require(shortfall > 0, 'insufficient shortfall');\n\n      /* The liquidator may not repay more than what is allowed by the closeFactor */\n      uint256 maxClose = Exp({mantissa: comptroller.closeFactorMantissa()}).mul_ScalarTruncate(borrowBalance);\n      require(repayAmount <= maxClose, 'too much repay');\n    }\n    return uint256(0);\n  }\n}\n"
    },
    "contracts/Comptroller/Comptroller.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport './ComptrollerStorage.sol';\nimport '../Exponential/ExponentialNoError.sol';\nimport './Interfaces/ICToken.sol';\nimport './Interfaces/IPriceOracle.sol';\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol';\nimport './Interfaces/IComptroller.sol';\n\ninterface ICompLogic {\n  function setCompSpeed(address cToken, uint256 supplySpeed, uint256 borrowSpeed) external;\n\n  function updateCompSupplyIndex(address cToken) external;\n\n  function updateCompBorrowIndex(address cToken, Exp memory marketBorrowIndex) external;\n\n  function distributeSupplierComp(address cToken, address supplier) external;\n\n  function distributeBorrowerComp(address cToken, address borrower, Exp memory marketBorrowIndex) external;\n\n  function initializeMarket(address cToken, uint32 blockNumber) external;\n}\n\ninterface IAccountLiquidity {\n  function getHypotheticalAccountLiquidity(\n    address account,\n    address cTokenModify,\n    uint256 redeemTokens,\n    uint256 borrowAmount\n  ) external view returns (uint256, uint256, uint256);\n}\n\n/**\n * @title Compound's Comptroller Contract\n * @author Compound\n */\ncontract Comptroller is AccessControlEnumerableUpgradeable, ComptrollerStorage {\n  using ExponentialNoError for uint256;\n  using ExponentialNoError for Exp;\n  using ExponentialNoError for Double;\n\n  ICompLogic public compLogic;\n  IPriceOracle public oracle;\n  IAccountLiquidity public accountLiquidity;\n\n  bytes32 public constant COMP_LOGIC = keccak256('COMP_LOGIC');\n\n  address public timelock;\n\n  bytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\n  bytes32 public constant CAPPER_ROLE = keccak256('CAPPER_ROLE');\n\n  /// @notice Emitted when an action is paused on a market\n  event ActionPaused(address cToken, string action, bool pauseState);\n\n  /// @notice Emitted when borrow cap for a cToken is changed\n  event NewBorrowCap(address indexed cToken, uint256 newBorrowCap);\n\n  /// @notice Emitted when borrow cap guardian is changed\n  event NewBorrowCapGuardian(address oldBorrowCapGuardian, address newBorrowCapGuardian);\n\n  /// @notice Emitted when pause guardian is changed\n  event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\n\n  event RemoveAssetGroup(uint8 indexed groupId, uint8 equalAssetsGroupNum);\n\n  function initialize(\n    address _admin,\n    IPriceOracle _oracle,\n    address _gov,\n    ICompLogic _compLogic,\n    IAccountLiquidity _accountLiquidity,\n    uint256 _closeFactorMantissa,\n    uint256 _heteroLiquidationIncentiveMantissa,\n    uint256 _homoLiquidationIncentiveMantissa,\n    uint256 _sutokenLiquidationIncentiveMantissa\n  ) external initializer {\n    _setupRole(DEFAULT_ADMIN_ROLE, _admin);\n\n    governanceToken = _gov;\n    suTokenRateMantissa = 10 ** 18;\n    // Set comptroller's oracle to newOracle\n    oracle = _oracle;\n    // Emit NewPriceOracle(oldOracle, newOracle)\n    emit NewPriceOracle(address(0), address(_oracle));\n    compLogic = _compLogic;\n\n    accountLiquidity = _accountLiquidity;\n\n    closeFactorMantissa = _closeFactorMantissa;\n    emit NewCloseFactor(0, _closeFactorMantissa);\n\n    // Set liquidation incentive to new incentive\n    heteroLiquidationIncentiveMantissa = _heteroLiquidationIncentiveMantissa;\n    homoLiquidationIncentiveMantissa = _homoLiquidationIncentiveMantissa;\n    sutokenLiquidationIncentiveMantissa = _sutokenLiquidationIncentiveMantissa;\n    // Emit event with old incentive, new incentive\n    emit NewLiquidationIncentive(\n      0,\n      _heteroLiquidationIncentiveMantissa,\n      0,\n      _homoLiquidationIncentiveMantissa,\n      0,\n      _sutokenLiquidationIncentiveMantissa\n    );\n  }\n\n  event NewAssetGroup(\n    uint8 indexed groupId,\n    string indexed groupName,\n    uint256 intraCRateMantissa,\n    uint256 intraMintRateMantissa,\n    uint256 intraSuRateMantissa,\n    uint256 interCRateMantissa,\n    uint256 interSuRateMantissa,\n    uint8 assetsGroupNum\n  );\n\n  /*** Assets You Are In ***/\n\n  /**\n   * @notice Returns the assets an account has entered\n   * @param account The address of the account to pull assets for\n   * @return A dynamic list with the assets the account has entered\n   */\n  function getAssetsIn(address account) external view returns (address[] memory) {\n    address[] memory assetsIn = accountAssets[account];\n\n    return assetsIn;\n  }\n\n  /**\n   * @notice Returns whether the given account is entered in the given asset\n   * @param account The address of the account to check\n   * @param cToken The cToken to check\n   * @return True if the account is in the asset, otherwise false.\n   */\n  function checkMembership(address account, address cToken) external view returns (bool) {\n    return markets[cToken].accountMembership[account];\n  }\n\n  function isListed(address asset) external view returns (bool) {\n    return markets[asset].isListed;\n  }\n\n  function marketGroupId(address asset) external view returns (uint8) {\n    return markets[asset].assetGroupId;\n  }\n\n  /**\n   * @notice Add assets to be included in account liquidity calculation\n   * @param cTokens The list of addresses of the cToken markets to be enabled\n   * @return Success indicator for whether each corresponding market was entered\n   */\n  function enterMarkets(address[] memory cTokens) public returns (uint256[] memory) {\n    uint256 len = cTokens.length;\n\n    uint256[] memory results = new uint256[](len);\n    for (uint256 i = 0; i < len; ++i) {\n      address cToken = cTokens[i];\n      //IIComptroller(address(this))IComptroller.AssetGroup memory eqAssets = IComptroller(address(this))getAssetGroup(cToken);\n      //results[i] = uint(addToMarketInternal(cToken, msg.sender, eqAssets.groupName, eqAssets.rateMantissas));\n      results[i] = uint256(addToMarketInternal(cToken, msg.sender));\n    }\n\n    return results;\n  }\n\n  /**\n   * @notice Add the market to the borrower's \"assets in\" for liquidity calculations\n   * @param cToken The market to enter\n   * @param borrower The address of the account to modify\n   * @return Success indicator for whether the market was entered\n   */\n  function addToMarketInternal(address cToken, address borrower) internal returns (uint256) {\n    Market storage marketToJoin = markets[cToken];\n\n    require(marketToJoin.isListed, MARKET_NOT_LISTED);\n\n    if (marketToJoin.accountMembership[borrower]) {\n      // already joined\n      return uint256(0);\n    }\n\n    // survived the gauntlet, add to list\n    // NOTE: we store these somewhat redundantly as a significant optimization\n    //  this avoids having to iterate through the list for the most common use cases\n    //  that is, only when we need to perform liquidity checks\n    //  and not whenever we want to check if an account is in a particular market\n    marketToJoin.accountMembership[borrower] = true;\n    accountAssets[borrower].push(cToken);\n\n    // all tokens are grouped with equal assets.\n    //addToEqualAssetGroupInternal(cToken, borrower, eqAssetGroup, rateMantissa);\n\n    emit MarketEntered(cToken, borrower);\n\n    return uint256(0);\n  }\n\n  /**\n   * @notice Removes asset from sender's account liquidity calculation\n   * @dev Sender must not have an outstanding borrow balance in the asset,\n   *  or be providing necessary collateral for an outstanding borrow.\n   * @param cTokenAddress The address of the asset to be removed\n   * @return Whether or not the account successfully exited the market\n   */\n  function exitMarket(address cTokenAddress) external returns (uint256) {\n    address cToken = cTokenAddress;\n    /* Get sender tokensHeld and amountOwed underlying from the cToken */\n    (uint256 oErr, uint256 tokensHeld, uint256 amountOwed, ) = ICToken(cToken).getAccountSnapshot(msg.sender);\n    require(oErr == 0, SNAPSHOT_ERROR); // semi-opaque error code\n\n    /* Fail if the sender has a borrow balance */\n    require(amountOwed == 0, 'nonzero borrow balance');\n\n    /* Fail if the sender is not permitted to redeem all of their tokens */\n    redeemAllowedInternal(cTokenAddress, msg.sender, tokensHeld);\n\n    Market storage marketToExit = markets[cToken];\n\n    /* Return true if the sender is not already ‘in’ the market */\n    if (!marketToExit.accountMembership[msg.sender]) {\n      return uint256(0);\n    }\n\n    /* Set cToken account membership to false */\n    delete marketToExit.accountMembership[msg.sender];\n\n    /* Delete cToken from the account’s list of assets */\n    // load into memory for faster iteration\n    address[] memory userAssetList = accountAssets[msg.sender];\n    uint256 len = userAssetList.length;\n    uint256 assetIndex = len;\n    for (uint256 i = 0; i < len; ++i) {\n      if (userAssetList[i] == cToken) {\n        assetIndex = i;\n        break;\n      }\n    }\n\n    // We *must* have found the asset in the list or our redundant data structure is broken\n    assert(assetIndex < len);\n\n    // copy last item in list to location of item to be removed, reduce length by 1\n    address[] storage storedList = accountAssets[msg.sender];\n    storedList[assetIndex] = storedList[storedList.length - 1];\n    storedList.pop();\n\n    // remove the same\n    //exitEqualAssetGroupInternal(cTokenAddress, msg.sender);\n\n    emit MarketExited(cToken, msg.sender);\n\n    return uint256(0);\n  }\n\n  /*** Policy Hooks ***/\n\n  /**\n   * @notice Checks if the account should be allowed to mint tokens in the given market\n   * @param cToken The market to verify the mint against\n   * @param minter The account which would get the minted tokens\n   * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\n   * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n   */\n  function mintAllowed(address cToken, address minter, uint256 mintAmount) external returns (uint256) {\n    // Pausing is a very serious situation - we revert to sound the alarms\n    //require(!mintGuardianPaused[cToken], \"mint is paused\");\n    require(!IComptroller(address(this))._getMintPaused(cToken), 'mint paused');\n\n    // Shh - currently unused: minter; mintAmount;\n\n    require(markets[cToken].isListed, MARKET_NOT_LISTED);\n\n    /* Get minter's cToken balance*/\n    (uint256 oErr, uint256 tokensHeld, uint256 amountOwed, ) = ICToken(cToken).getAccountSnapshot(minter);\n    require(oErr == 0, SNAPSHOT_ERROR); // semi-opaque error code\n\n    // only enter market automatically at the first time\n    if ((!markets[cToken].accountMembership[minter]) && (tokensHeld == 0) && (amountOwed == 0)) {\n      // only cTokens may call mintAllowed if minter not in market\n      require(msg.sender == cToken, 'sender must be cToken');\n\n      // attempt to add borrower to the market\n      addToMarketInternal(msg.sender, minter);\n\n      // it should be impossible to break the important invariant\n      assert(markets[cToken].accountMembership[minter]);\n    }\n\n    // Keep the flywheel moving\n    compLogic.updateCompSupplyIndex(cToken);\n    compLogic.distributeSupplierComp(cToken, minter);\n\n    require(\n      maxSupply[cToken] == 0 ||\n        (maxSupply[cToken] > 0 && ICToken(cToken).totalSupply().add_(mintAmount) <= maxSupply[cToken]),\n      'cToken > maxSupply'\n    );\n\n    return uint256(0);\n  }\n\n  /**\n   * @notice Checks if the account should be allowed to redeem tokens in the given market\n   * @param cToken The market to verify the redeem against\n   * @param redeemer The account which would redeem the tokens\n   * @param redeemTokens The number of cTokens to exchange for the underlying asset in the market\n   * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n   */\n  function redeemAllowed(address cToken, address redeemer, uint256 redeemTokens) external returns (uint256) {\n    redeemAllowedInternal(cToken, redeemer, redeemTokens);\n\n    // Keep the flywheel moving\n    compLogic.updateCompSupplyIndex(cToken);\n    compLogic.distributeSupplierComp(cToken, redeemer);\n\n    return uint256(0);\n  }\n\n  function redeemAllowedInternal(\n    address cToken,\n    address redeemer,\n    uint256 redeemTokens\n  ) internal view returns (uint256) {\n    require(markets[cToken].isListed, MARKET_NOT_LISTED);\n\n    /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\n    if (!markets[cToken].accountMembership[redeemer]) {\n      return uint256(0);\n    }\n\n    /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\n    (, , uint256 shortfall) = accountLiquidity.getHypotheticalAccountLiquidity(redeemer, cToken, redeemTokens, 0);\n    require(shortfall == 0, INSUFFICIENT_LIQUIDITY);\n\n    return uint256(0);\n  }\n\n  /**\n   * @notice Validates redeem and reverts on rejection. May emit logs.\n   * @param cToken Asset being redeemed\n   * @param redeemer The address redeeming the tokens\n   * @param redeemAmount The amount of the underlying asset being redeemed\n   * @param redeemTokens The number of tokens being redeemed\n   */\n  function redeemVerify(address cToken, address redeemer, uint256 redeemAmount, uint256 redeemTokens) external {\n    // Shh - currently unused: cToken; redeemer;\n\n    // Require tokens is zero or amount is also zero\n    if (redeemTokens == 0 && redeemAmount > 0) {\n      revert('redeemTokens zero');\n    }\n  }\n\n  /**\n   * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\n   * @param cToken The market to verify the borrow against\n   * @param borrower The account which would borrow the asset\n   * @param borrowAmount The amount of underlying the account would borrow\n   * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n   */\n  function borrowAllowed(address cToken, address borrower, uint256 borrowAmount) external returns (uint256) {\n    // Pausing is a very serious situation - we revert to sound the alarms\n    //require(!borrowGuardianPaused[cToken], \"borrow is paused\");\n    require(!IComptroller(address(this))._getBorrowPaused(cToken), 'borrow paused');\n\n    require(markets[cToken].isListed, MARKET_NOT_LISTED);\n\n    if (!markets[cToken].accountMembership[borrower]) {\n      // only cTokens may call borrowAllowed if borrower not in market\n      require(msg.sender == cToken, 'sender must be cToken');\n\n      // attempt to add borrower to the market\n      addToMarketInternal(msg.sender, borrower);\n\n      // it should be impossible to break the important invariant\n      assert(markets[cToken].accountMembership[borrower]);\n    }\n\n    require(oracle.getUnderlyingPrice(cToken) > 0, 'PRICE_ERROR');\n\n    //uint borrowCap = borrowCaps[cToken];\n    uint256 borrowCap = IComptroller(address(this))._getMarketBorrowCap(cToken);\n    // Borrow cap of 0 corresponds to unlimited borrowing\n    if (borrowCap != 0) {\n      uint256 totalBorrows = ICToken(cToken).totalBorrows();\n      uint256 nextTotalBorrows = totalBorrows.add_(borrowAmount);\n      require(nextTotalBorrows < borrowCap, 'borrow cap reached');\n    }\n\n    (, , uint256 shortfall) = accountLiquidity.getHypotheticalAccountLiquidity(borrower, cToken, 0, borrowAmount);\n    require(shortfall <= 0, INSUFFICIENT_LIQUIDITY);\n\n    // Keep the flywheel moving\n    Exp memory borrowIndex = Exp({mantissa: ICToken(cToken).borrowIndex()});\n    compLogic.updateCompBorrowIndex(cToken, borrowIndex);\n    compLogic.distributeBorrowerComp(cToken, borrower, borrowIndex);\n\n    return uint256(0);\n  }\n\n  /**\n   * @notice Checks if the account should be allowed to repay a borrow in the given market\n   * @param cToken The market to verify the repay against\n   * @param payer The account which would repay the asset\n   * @param borrower The account which would borrowed the asset\n   * @param repayAmount The amount of the underlying asset the account would repay\n   * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n   */\n  function repayBorrowAllowed(\n    address cToken,\n    address payer,\n    address borrower,\n    uint256 repayAmount\n  ) external returns (uint256) {\n    // Shh - currently unused: repayAmount;\n\n    require(markets[cToken].isListed, MARKET_NOT_LISTED);\n\n    // Keep the flywheel moving\n    Exp memory borrowIndex = Exp({mantissa: ICToken(cToken).borrowIndex()});\n    compLogic.updateCompBorrowIndex(cToken, borrowIndex);\n    compLogic.distributeBorrowerComp(cToken, borrower, borrowIndex);\n\n    return uint256(0);\n  }\n\n  /**\n   * @notice Checks if the seizing of assets should be allowed to occur\n   * @param cTokenCollateral Asset which was used as collateral and will be seized\n   * @param cTokenBorrowed Asset which was borrowed by the borrower\n   * @param liquidator The address repaying the borrow and seizing the collateral\n   * @param borrower The address of the borrower\n   * @param seizeTokens The number of collateral tokens to seize\n   */\n  function seizeAllowed(\n    address cTokenCollateral,\n    address cTokenBorrowed,\n    address liquidator,\n    address borrower,\n    uint256 seizeTokens\n  ) external returns (uint256) {\n    // Pausing is a very serious situation - we revert to sound the alarms\n    //require(!seizeGuardianPaused, \"seize is paused\");\n    require(!IComptroller(address(this))._getSeizePaused(), 'seize paused');\n\n    // Shh - currently unused: seizeTokens;\n\n    require(markets[cTokenCollateral].isListed && markets[cTokenBorrowed].isListed, MARKET_NOT_LISTED);\n\n    require(ICToken(cTokenCollateral).comptroller() == ICToken(cTokenBorrowed).comptroller(), 'comptroller mismatch');\n\n    // Keep the flywheel moving\n    compLogic.updateCompSupplyIndex(cTokenCollateral);\n    compLogic.distributeSupplierComp(cTokenCollateral, borrower);\n    compLogic.distributeSupplierComp(cTokenCollateral, liquidator);\n\n    return uint256(0);\n  }\n\n  /**\n   * @notice Checks if the account should be allowed to transfer tokens in the given market\n   * @param cToken The market to verify the transfer against\n   * @param src The account which sources the tokens\n   * @param dst The account which receives the tokens\n   * @param transferTokens The number of cTokens to transfer\n   * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n   */\n  function transferAllowed(\n    address cToken,\n    address src,\n    address dst,\n    uint256 transferTokens\n  ) external returns (uint256) {\n    // Pausing is a very serious situation - we revert to sound the alarms\n    //require(!transferGuardianPaused, \"transfer is paused\");\n    require(!IComptroller(address(this))._getTransferPaused(), 'transfer paused');\n\n    // Currently the only consideration is whether or not\n    //  the src is allowed to redeem this many tokens\n    redeemAllowedInternal(cToken, src, transferTokens);\n\n    // Keep the flywheel moving\n    compLogic.updateCompSupplyIndex(cToken);\n    compLogic.distributeSupplierComp(cToken, src);\n    compLogic.distributeSupplierComp(cToken, dst);\n\n    return uint256(0);\n  }\n\n  /*** Liquidity/Liquidation Calculations ***/\n\n  /**\n     * @notice Determine the current account liquidity wrt collateral requirements\n     * @return (possible error code (semi-opaque),\n                account liquidity in excess of collateral requirements,\n     *          account shortfall below collateral requirements)\n     */\n  function getAccountLiquidity(address account) public view returns (uint256, uint256, uint256) {\n    (uint256 err, uint256 liquidity, uint256 shortfall) = accountLiquidity.getHypotheticalAccountLiquidity(\n      account,\n      address(0),\n      0,\n      0\n    );\n\n    return (uint256(err), liquidity, shortfall);\n  }\n\n  /**\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\n     * @param cTokenModify The market to hypothetically redeem/borrow in\n     * @param account The account to determine liquidity for\n     * @param redeemTokens The number of tokens to hypothetically redeem\n     * @param borrowAmount The amount of underlying to hypothetically borrow\n     * @return (possible error code (semi-opaque),\n                hypothetical account liquidity in excess of collateral requirements,\n     *          hypothetical account shortfall below collateral requirements)\n     */\n  function getHypotheticalAccountLiquidity(\n    address account,\n    address cTokenModify,\n    uint256 redeemTokens,\n    uint256 borrowAmount\n  ) public view returns (uint256, uint256, uint256) {\n    (uint256 err, uint256 liquidity, uint256 shortfall) = accountLiquidity.getHypotheticalAccountLiquidity(\n      account,\n      address(cTokenModify),\n      redeemTokens,\n      borrowAmount\n    );\n    return (uint256(err), liquidity, shortfall);\n  }\n\n  /*** Admin Functions ***/\n\n  function setTimelock(address _timelock) public onlyRole(DEFAULT_ADMIN_ROLE) {\n    timelock = _timelock;\n  }\n\n  /**\n   * @notice Sets a new price oracle for the comptroller\n   * @dev Admin function to set a new price oracle\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function _setPriceOracle(IPriceOracle newOracle) public onlyRole(DEFAULT_ADMIN_ROLE) returns (uint256) {\n    // Check caller is admin\n    // Track the old oracle for the comptroller\n    IPriceOracle oldOracle = oracle;\n    // Set comptroller's oracle to newOracle\n    oracle = newOracle;\n    // Emit NewPriceOracle(oldOracle, newOracle)\n    emit NewPriceOracle(address(oldOracle), address(newOracle));\n    return uint256(0);\n  }\n\n  /**\n   * @notice Sets the closeFactor used when liquidating borrows\n   * @dev Admin function to set closeFactor\n   * @param newCloseFactorMantissa New close factor, scaled by 1e18\n   * @return uint 0=success, otherwise a failure\n   */\n  function _setCloseFactor(uint256 newCloseFactorMantissa) external onlyRole(DEFAULT_ADMIN_ROLE) returns (uint256) {\n    require(newCloseFactorMantissa > 0, 'newCloseFactorMantissa=0');\n    // Check caller is admin\n    uint256 oldCloseFactorMantissa = closeFactorMantissa;\n    closeFactorMantissa = newCloseFactorMantissa;\n    emit NewCloseFactor(oldCloseFactorMantissa, closeFactorMantissa);\n\n    return uint256(0);\n  }\n\n  /**\n   * @notice Sets liquidationIncentive\n   * @dev Admin function to set liquidationIncentive\n   * @param newHeteroLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18 for hetero assets\n   * @param newHomoLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18 for homo assets\n   * @param newSutokenLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18 for sutoken assets\n   * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\n   */\n  function _setLiquidationIncentive(\n    uint256 newHeteroLiquidationIncentiveMantissa,\n    uint256 newHomoLiquidationIncentiveMantissa,\n    uint256 newSutokenLiquidationIncentiveMantissa\n  ) external onlyRole(DEFAULT_ADMIN_ROLE) returns (uint256) {\n    // Check caller is admin\n    // Save current value for use in log\n    uint256 oldHetero = heteroLiquidationIncentiveMantissa;\n    uint256 oldHomo = homoLiquidationIncentiveMantissa;\n    uint256 oldSutoken = sutokenLiquidationIncentiveMantissa;\n    // Set liquidation incentive to new incentive\n    heteroLiquidationIncentiveMantissa = newHeteroLiquidationIncentiveMantissa;\n    homoLiquidationIncentiveMantissa = newHomoLiquidationIncentiveMantissa;\n    sutokenLiquidationIncentiveMantissa = newSutokenLiquidationIncentiveMantissa;\n    // Emit event with old incentive, new incentive\n    emit NewLiquidationIncentive(\n      oldHetero,\n      newHeteroLiquidationIncentiveMantissa,\n      oldHomo,\n      newHomoLiquidationIncentiveMantissa,\n      oldSutoken,\n      newSutokenLiquidationIncentiveMantissa\n    );\n    return uint256(0);\n  }\n\n  /**\n   * @notice Add the market to the markets mapping and set it as listed\n   * @dev Admin function to set isListed and add support for the market\n   * @param cToken The address of the market (token) to list\n   * @return uint 0=success, otherwise a failure. (See enum uint256 for details)\n   */\n  function _supportMarket(address cToken, uint8 groupId) external onlyRole(DEFAULT_ADMIN_ROLE) returns (uint256) {\n    require(!markets[cToken].isListed, 'market already listed');\n\n    // ICToken(cToken).isCToken(); // Sanity check to make sure its really a address\n    (bool success, ) = cToken.call(abi.encodeWithSignature('isCToken()'));\n    require(success && isContract(cToken), 'contract error!');\n\n    // Note that isComped is not in active use anymore\n    // markets[cToken] = Market({isListed: true, isComped: false, assetGroupId: groupId});\n    Market storage market = markets[cToken];\n    market.isListed = true;\n    market.assetGroupId = groupId;\n\n    _addMarketInternal(cToken);\n    _initializeMarket(cToken);\n\n    emit MarketListed(cToken);\n\n    return uint256(0);\n  }\n\n  function _addMarketInternal(address cToken) internal {\n    for (uint256 i = 0; i < allMarkets.length; ++i) {\n      require(allMarkets[i] != cToken, 'market already added');\n    }\n    allMarkets.push(cToken);\n  }\n\n  function _initializeMarket(address cToken) internal {\n    uint32 blockNumber = block.number.safe32('block number exceeds 32 bits');\n    compLogic.initializeMarket(cToken, blockNumber);\n  }\n\n  function setCompSpeed(\n    address cToken,\n    uint256 supplySpeed,\n    uint256 borrowSpeed\n  ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    compLogic.setCompSpeed(cToken, supplySpeed, borrowSpeed);\n  }\n\n  function setComptroller(ICompLogic _compLogic) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    compLogic = _compLogic;\n  }\n\n  function setAccountLiquidity(IAccountLiquidity _accountLiquidity) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    accountLiquidity = _accountLiquidity;\n  }\n\n  /**\n   * @notice Return all of the markets\n   * @dev The automatic getter may be used to access an individual market.\n   * @return The list of market addresses\n   */\n  function getAllMarkets() public view returns (address[] memory) {\n    return allMarkets;\n  }\n\n  /**\n   * @dev Returns true if `account` is a contract.\n   *\n   * [IMPORTANT]\n   * ====\n   * It is unsafe to assume that an address for which this function returns\n   * false is an externally-owned account (EOA) and not a contract.\n   *\n   * Among others, `isContract` will return false for the following\n   * types of addresses:\n   *\n   *  - an externally-owned account\n   *  - a contract in construction\n   *  - an address where a contract will be created\n   *  - an address where a contract lived, but was destroyed\n   * ====\n   */\n  function isContract(address account) internal view returns (bool) {\n    return account.code.length > 0;\n  }\n\n  function liquidationIncentiveMantissa() public view returns (uint256, uint256, uint256) {\n    return (heteroLiquidationIncentiveMantissa, homoLiquidationIncentiveMantissa, sutokenLiquidationIncentiveMantissa);\n  }\n\n  function setAssetGroup(\n    uint8 groupId,\n    string memory groupName,\n    uint256 intraCRateMantissa, // ctoken collateral rate for intra group ctoken liability\n    uint256 intraMintRateMantissa, // ctoken collateral rate for intra group sutoken liability\n    uint256 intraSuRateMantissa, // sutoken collateral rate for intra group ctoken liability\n    uint256 interCRateMantissa, // ctoken collateral rate for inter group ctoken/sutoken liability\n    uint256 interSuRateMantissa // sutoken collateral rate for inter group ctoken/sutoken liability\n  ) external onlyRole(DEFAULT_ADMIN_ROLE) returns (uint256) {\n    eqAssetGroup[groupId] = IComptroller.AssetGroup(\n      groupId,\n      groupName,\n      intraCRateMantissa,\n      intraMintRateMantissa,\n      intraSuRateMantissa,\n      interCRateMantissa,\n      interSuRateMantissa\n    );\n    equalAssetsGroupNum++;\n    emit NewAssetGroup(\n      groupId,\n      groupName,\n      intraCRateMantissa,\n      intraMintRateMantissa,\n      intraSuRateMantissa,\n      interCRateMantissa,\n      interSuRateMantissa,\n      equalAssetsGroupNum\n    );\n    return uint256(0);\n  }\n\n  function removeAssetGroup(uint8 groupId) external onlyRole(DEFAULT_ADMIN_ROLE) returns (uint256) {\n    delete eqAssetGroup[groupId];\n    equalAssetsGroupNum--;\n    emit RemoveAssetGroup(groupId, equalAssetsGroupNum);\n    return uint256(0);\n  }\n\n  function getAssetGroup(uint8 groupId) external view returns (IComptroller.AssetGroup memory) {\n    return eqAssetGroup[groupId];\n  }\n\n  function getAssetGroupNum() external view returns (uint8) {\n    return equalAssetsGroupNum;\n  }\n\n  /**\n   * @notice Admin function to change the Pause Guardian\n   * @param newPauseGuardian The address of the new Pause Guardian\n   * @return uint 0=success, otherwise a failure. (See enum Error for details)\n   */\n  function _setPauseGuardian(address newPauseGuardian) external onlyRole(DEFAULT_ADMIN_ROLE) returns (uint256) {\n    require(newPauseGuardian != address(0), 'Address is Zero!');\n\n    // Save current value for inclusion in log\n    address oldPauseGuardian = pauseGuardian;\n    revokeRole(PAUSER_ROLE, oldPauseGuardian);\n\n    // Store pauseGuardian with value newPauseGuardian\n    pauseGuardian = newPauseGuardian;\n    grantRole(PAUSER_ROLE, newPauseGuardian);\n\n    // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\n    emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);\n\n    return uint256(0);\n  }\n\n  function _getPauseGuardian() external view returns (address) {\n    return pauseGuardian;\n  }\n\n  modifier onlyAdminOrPauser(bool state) {\n    if (state) {\n      require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), 'only admin can unpause');\n    } else {\n      require(\n        hasRole(DEFAULT_ADMIN_ROLE, msg.sender) || hasRole(PAUSER_ROLE, msg.sender),\n        'only admin or pauser can pause'\n      );\n    }\n    _;\n  }\n\n  function _setMintPaused(ICToken cToken, bool state) external onlyAdminOrPauser(state) returns (bool) {\n    mintGuardianPaused[address(cToken)] = state;\n    emit ActionPaused(address(cToken), 'Mint', state);\n    return state;\n  }\n\n  function _getMintPaused(address cToken) external view returns (bool) {\n    return mintGuardianPaused[cToken];\n  }\n\n  function _setBorrowPaused(ICToken cToken, bool state) external onlyAdminOrPauser(state) returns (bool) {\n    borrowGuardianPaused[address(cToken)] = state;\n    emit ActionPaused(address(cToken), 'Borrow', state);\n    return state;\n  }\n\n  function _getBorrowPaused(address cToken) external view returns (bool) {\n    return borrowGuardianPaused[cToken];\n  }\n\n  function _setTransferPaused(bool state) external onlyAdminOrPauser(state) returns (bool) {\n    transferGuardianPaused = state;\n    emit ActionPaused(address(0), 'Transfer', state);\n    return state;\n  }\n\n  function _getTransferPaused() external view returns (bool) {\n    return transferGuardianPaused;\n  }\n\n  function _setSeizePaused(bool state) external onlyAdminOrPauser(state) returns (bool) {\n    seizeGuardianPaused = state;\n    emit ActionPaused(address(0), 'Seize', state);\n    return state;\n  }\n\n  function _getSeizePaused() external view returns (bool) {\n    return seizeGuardianPaused;\n  }\n\n  /**\n   * @notice Return the address of the COMP token\n   * @return The address of COMP\n   */\n  function getCompAddress() external view returns (address) {\n    /*\n        return 0xc00e94Cb662C3520282E6f5717214004A7f26888;\n        */\n    return governanceToken;\n  }\n\n  /**\n   * @notice Return the address of the COMP token\n   * @param _governanceToken The address of COMP(governance token)\n   */\n  function setGovTokenAddress(address _governanceToken) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    //require(adminOrInitializing(), \"only admin can set governanceToken\");\n    require(_governanceToken != address(0), 'Address is Zero!');\n    governanceToken = _governanceToken;\n  }\n\n  modifier onlyAdminOrCapper() {\n    require(\n      hasRole(DEFAULT_ADMIN_ROLE, msg.sender) || hasRole(CAPPER_ROLE, msg.sender),\n      'only admin or capper can set cap'\n    );\n    _;\n  }\n\n  /**\n   * @notice Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\n   * @dev Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\n   * @param cTokens The addresses of the markets (tokens) to change the borrow caps for\n   * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\n   */\n  function _setMarketBorrowCaps(\n    ICToken[] calldata cTokens,\n    uint256[] calldata newBorrowCaps\n  ) external onlyAdminOrCapper {\n    uint256 numMarkets = cTokens.length;\n    uint256 numBorrowCaps = newBorrowCaps.length;\n\n    require(numMarkets != 0 && numMarkets == numBorrowCaps, 'invalid input');\n\n    for (uint256 i = 0; i < numMarkets; i++) {\n      borrowCaps[address(cTokens[i])] = newBorrowCaps[i];\n      emit NewBorrowCap(address(cTokens[i]), newBorrowCaps[i]);\n    }\n  }\n\n  function _setMaxSupply(\n    ICToken[] calldata cTokens,\n    uint256[] calldata newMaxSupplys\n  ) external onlyAdminOrCapper returns (uint256) {\n    uint256 numMarkets = cTokens.length;\n    uint256 numMaxSupplys = newMaxSupplys.length;\n\n    require(numMarkets != 0 && numMarkets == numMaxSupplys, 'invalid input');\n\n    for (uint256 i = 0; i < numMarkets; i++) {\n      maxSupply[address(cTokens[i])] = newMaxSupplys[i];\n      emit SetMaxSupply(address(cTokens[i]), newMaxSupplys[i]);\n    }\n\n    return uint256(0);\n  }\n\n  function _getMarketBorrowCap(address cToken) external view returns (uint256) {\n    return borrowCaps[cToken];\n  }\n\n  /**\n   * @notice Admin function to change the Borrow Cap Guardian\n   * @param newBorrowCapGuardian The address of the new Borrow Cap Guardian\n   */\n  function _setBorrowCapGuardian(address newBorrowCapGuardian) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    require(newBorrowCapGuardian != address(0), 'Address is Zero!');\n\n    // Save current value for inclusion in log\n    address oldBorrowCapGuardian = borrowCapGuardian;\n    revokeRole(CAPPER_ROLE, oldBorrowCapGuardian);\n\n    // Store borrowCapGuardian with value newBorrowCapGuardian\n    borrowCapGuardian = newBorrowCapGuardian;\n    grantRole(CAPPER_ROLE, newBorrowCapGuardian);\n\n    // Emit NewBorrowCapGuardian(OldBorrowCapGuardian, NewBorrowCapGuardian)\n    emit NewBorrowCapGuardian(oldBorrowCapGuardian, newBorrowCapGuardian);\n  }\n\n  function _getBorrowCapGuardian() external view returns (address) {\n    return borrowCapGuardian;\n  }\n}\n"
    },
    "contracts/Comptroller/ComptrollerStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport './Interfaces/IComptroller.sol';\n\ncontract ComptrollerStorage {\n  /// @notice Indicator that this is a Comptroller contract (for inspection)\n  bool public constant isComptroller = true;\n\n  /**\n   * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\n   */\n  uint256 public closeFactorMantissa;\n\n  /**\n   * @notice Multiplier representing the discount on collateral that a liquidator receives\n   */\n  uint256 public heteroLiquidationIncentiveMantissa;\n\n  string internal constant INSUFFICIENT_LIQUIDITY = 'insufficient liquidity';\n  string internal constant MARKET_NOT_LISTED = 'market not listed';\n  string internal constant UNAUTHORIZED = 'unauthorized';\n  string internal constant SNAPSHOT_ERROR = 'snapshot error';\n  /**\n   * @notice Per-account mapping of \"assets you are in\", capped by maxAssets\n   */\n  mapping(address => address[]) public accountAssets;\n  /// @notice Whether or not this market is listed\n  /// @notice Per-market mapping of \"accounts in this asset\"\n  /// @notice Whether or not this market receives COMP\n  struct Market {\n    bool isListed;\n    uint8 assetGroupId;\n    mapping(address => bool) accountMembership;\n    bool isComped;\n  }\n\n  /**\n   * @notice Official mapping of cTokens -> Market metadata\n   * @dev Used e.g. to determine if a market is supported\n   */\n  mapping(address => Market) public markets;\n\n  /// @notice A list of all markets\n  address[] public allMarkets;\n\n  mapping(address => uint256) public maxSupply;\n\n  /// @notice Emitted when an admin supports a market\n  event MarketListed(address cToken);\n\n  /// @notice Emitted when an account enters a market\n  event MarketEntered(address cToken, address account);\n\n  /// @notice Emitted when an account exits a market\n  event MarketExited(address cToken, address account);\n\n  /// @notice Emitted when close factor is changed by admin\n  event NewCloseFactor(uint256 oldCloseFactorMantissa, uint256 newCloseFactorMantissa);\n\n  /// @notice Emitted when liquidation incentive is changed by admin\n  event NewLiquidationIncentive(\n    uint256 oldHeteroIncentive,\n    uint256 newHeteroIncentive,\n    uint256 oldHomoIncentive,\n    uint256 newHomoIncentive,\n    uint256 oldSutokenIncentive,\n    uint256 newSutokenIncentive\n  );\n\n  /// @notice Emitted when price oracle is changed\n  event NewPriceOracle(address oldPriceOracle, address newPriceOracle);\n\n  event SetMaxSupply(address indexed cToken, uint256 amount);\n\n  /*\n    Liquidation Incentive for repaying homogeneous token\n  */\n  uint256 public homoLiquidationIncentiveMantissa;\n\n  /*\n    Liquidation Incentive for repaying sutoken\n  */\n  uint256 public sutokenLiquidationIncentiveMantissa;\n\n  address public governanceToken;\n\n  uint256 public suTokenRateMantissa;\n\n  /**\n   * @notice eqAssetGroup, cToken -> equal assets info.\n   */\n\n  uint8 public equalAssetsGroupNum;\n  /**\n   * @notice eqAssetGroup, groupId -> equal assets info.\n   */\n  mapping(uint8 => IComptroller.AssetGroup) public eqAssetGroup;\n\n  /**\n   * @notice The Pause Guardian can pause certain actions as a safety mechanism.\n   *  Actions which allow users to remove their own assets cannot be paused.\n   *  Liquidation / seizing / transfer can only be paused globally, not by market.\n   */\n  address public pauseGuardian;\n  bool public _mintGuardianPaused;\n  bool public _borrowGuardianPaused;\n  bool public transferGuardianPaused;\n  bool public seizeGuardianPaused;\n  mapping(address => bool) public mintGuardianPaused;\n  mapping(address => bool) public borrowGuardianPaused;\n\n  // @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\n  address public borrowCapGuardian;\n\n  // @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\n  mapping(address => uint256) public borrowCaps;\n}\n"
    },
    "contracts/Comptroller/Interfaces/IComptroller.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ninterface IComptroller {\n  /*** Assets You Are In ***/\n  function isComptroller() external view returns (bool);\n\n  function markets(address) external view returns (bool, uint8, bool);\n\n  function getAllMarkets() external view returns (address[] memory);\n\n  function oracle() external view returns (address);\n\n  function enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\n\n  function exitMarket(address cToken) external returns (uint256);\n\n  function closeFactorMantissa() external view returns (uint256);\n\n  function getAccountLiquidity(address) external view returns (uint256, uint256, uint256);\n\n  // function getAssetsIn(address) external view returns (ICToken[] memory);\n  function claimComp(address) external;\n\n  function compAccrued(address) external view returns (uint256);\n\n  function getAssetsIn(address account) external view returns (address[] memory);\n\n  function timelock() external view returns (address);\n\n  /*** Policy Hooks ***/\n\n  function mintAllowed(address cToken, address minter, uint256 mintAmount) external returns (uint256);\n\n  function redeemAllowed(address cToken, address redeemer, uint256 redeemTokens) external returns (uint256);\n\n  function redeemVerify(address cToken, address redeemer, uint256 redeemAmount, uint256 redeemTokens) external;\n\n  function borrowAllowed(address cToken, address borrower, uint256 borrowAmount) external returns (uint256);\n\n  function repayBorrowAllowed(\n    address cToken,\n    address payer,\n    address borrower,\n    uint256 repayAmount\n  ) external returns (uint256);\n\n  function seizeAllowed(\n    address cTokenCollateral,\n    address cTokenBorrowed,\n    address liquidator,\n    address borrower,\n    uint256 seizeTokens\n  ) external returns (uint256);\n\n  function transferAllowed(address cToken, address src, address dst, uint256 transferTokens) external returns (uint256);\n\n  /*** Liquidity/Liquidation Calculations ***/\n\n  function liquidationIncentiveMantissa() external view returns (uint256, uint256, uint256);\n\n  function isListed(address asset) external view returns (bool);\n\n  function marketGroupId(address asset) external view returns (uint8);\n\n  function getHypotheticalAccountLiquidity(\n    address account,\n    address cTokenModify,\n    uint256 redeemTokens,\n    uint256 borrowAmount\n  ) external view returns (uint256, uint256, uint256);\n\n  // function _getMarketBorrowCap(address cToken) external view returns (uint256);\n\n  /// @notice Emitted when an action is paused on a market\n  event ActionPaused(address cToken, string action, bool pauseState);\n\n  /// @notice Emitted when borrow cap for a cToken is changed\n  event NewBorrowCap(address indexed cToken, uint256 newBorrowCap);\n\n  /// @notice Emitted when borrow cap guardian is changed\n  event NewBorrowCapGuardian(address oldBorrowCapGuardian, address newBorrowCapGuardian);\n\n  /// @notice Emitted when pause guardian is changed\n  event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\n\n  event RemoveAssetGroup(uint8 indexed groupId, uint8 equalAssetsGroupNum);\n\n  /// @notice AssetGroup, contains information of groupName and rateMantissas\n  struct AssetGroup {\n    uint8 groupId;\n    string groupName;\n    uint256 intraCRateMantissa;\n    uint256 intraMintRateMantissa;\n    uint256 intraSuRateMantissa;\n    uint256 interCRateMantissa;\n    uint256 interSuRateMantissa;\n  }\n\n  function getAssetGroupNum() external view returns (uint8);\n\n  function getAssetGroup(uint8 groupId) external view returns (AssetGroup memory);\n\n  function _getMintPaused(address cToken) external returns (bool);\n\n  function _getTransferPaused() external view returns (bool);\n\n  function _getBorrowPaused(address cToken) external view returns (bool);\n\n  function _getSeizePaused() external view returns (bool);\n\n  function getCompAddress() external view returns (address);\n\n  function _getMarketBorrowCap(address cToken) external view returns (uint256);\n}\n"
    },
    "contracts/Comptroller/Interfaces/ICToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ninterface ICToken {\n  function comptroller() external view returns (address);\n\n  function reserveFactorMantissa() external view returns (uint256);\n\n  function borrowIndex() external view returns (uint256);\n\n  function totalBorrows() external view returns (uint256);\n\n  function totalSupply() external view returns (uint256);\n\n  function isCToken() external view returns (bool);\n\n  function balanceOf(address owner) external view returns (uint256);\n\n  function getAccountSnapshot(address account)\n    external\n    view\n    returns (\n      uint256,\n      uint256,\n      uint256,\n      uint256\n    );\n\n  function borrowBalanceStored(address account) external view returns (uint256);\n\n  function exchangeRateStored() external view returns (uint256);\n\n  function underlying() external view returns (address);\n\n  function exchangeRateCurrent() external returns (uint256);\n\n  function isCEther() external view returns (bool);\n\n  function supplyRatePerBlock() external view returns (uint256);\n\n  function borrowRatePerBlock() external view returns (uint256);\n\n  function totalReserves() external view returns (uint256);\n\n  function getCash() external view returns (uint256);\n\n  function decimals() external view returns (uint8);\n\n  function borrowBalanceCurrent(address account) external returns (uint256);\n\n  function balanceOfUnderlying(address owner) external returns (uint256);\n\n  function allowance(address owner, address spender) external view returns (uint256);\n\n  function getCurrentVotes(address account) external view returns (uint96);\n\n  function delegates(address) external view returns (address);\n\n  function getPriorVotes(address account, uint256 blockNumber) external view returns (uint96);\n\n  function getDiscountRate() external view returns (uint256);\n}\n"
    },
    "contracts/Comptroller/Interfaces/IGovernorAlpha.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nabstract contract IGovernorAlpha {\n  struct Proposal {\n    // Unique id for looking up a proposal\n    uint256 id;\n    // Creator of the proposal\n    address proposer;\n    // The timestamp that the proposal will be available for execution, set once the vote succeeds\n    uint256 eta;\n    // the ordered list of target addresses for calls to be made\n    address[] targets;\n    // The ordered list of values (i.e. msg.value) to be passed to the calls to be made\n    uint256[] values;\n    // The ordered list of function signatures to be called\n    string[] signatures;\n    // The ordered list of calldata to be passed to each call\n    bytes[] calldatas;\n    // The block at which voting begins: holders must delegate their votes prior to this block\n    uint256 startBlock;\n    // The block at which voting ends: votes must be cast prior to this block\n    uint256 endBlock;\n    // Current number of votes in favor of this proposal\n    uint256 forVotes;\n    // Current number of votes in opposition to this proposal\n    uint256 againstVotes;\n    // Flag marking whether the proposal has been canceled\n    bool canceled;\n    // Flag marking whether the proposal has been executed\n    bool executed;\n    // Receipts of ballots for the entire set of voters\n    mapping(address => Receipt) receipts;\n  }\n  // Ballot receipt record for a voter\n  // Whether or not a vote has been cast\n  // Whether or not the voter supports the proposal\n  // The number of votes the voter had, which were cast\n  struct Receipt {\n    bool hasVoted;\n    bool support;\n    uint96 votes;\n  }\n\n  function getReceipt(uint256 proposalId, address voter)\n    external\n    view\n    virtual\n    returns (\n      bool,\n      bool,\n      uint96\n    );\n\n  mapping(uint256 => Proposal) public proposals;\n\n  function getActions(uint256 proposalId)\n    public\n    view\n    virtual\n    returns (\n      address[] memory targets,\n      uint256[] memory values,\n      string[] memory signatures,\n      bytes[] memory calldatas\n    );\n}\n"
    },
    "contracts/Comptroller/Interfaces/IGovernorBravo.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ninterface IGovernorBravo {\n  struct Receipt {\n    bool hasVoted;\n    uint8 support;\n    uint96 votes;\n  }\n  struct Proposal {\n    uint256 id;\n    address proposer;\n    uint256 eta;\n    uint256 startBlock;\n    uint256 endBlock;\n    uint256 forVotes;\n    uint256 againstVotes;\n    uint256 abstainVotes;\n    bool canceled;\n    bool executed;\n  }\n\n  function getActions(uint256 proposalId)\n    external\n    view\n    returns (\n      address[] memory targets,\n      uint256[] memory values,\n      string[] memory signatures,\n      bytes[] memory calldatas\n    );\n\n  function proposals(uint256 proposalId) external view returns (Proposal memory);\n\n  function getReceipt(uint256 proposalId, address voter) external view returns (Receipt memory);\n}\n"
    },
    "contracts/Comptroller/Interfaces/IPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ninterface IPriceOracle {\n  /**\n   * @notice Get the underlying price of a cToken asset\n   * @param cToken The cToken to get the underlying price of\n   * @return The underlying asset price mantissa (scaled by 1e18).\n   *  Zero means the price is unavailable.\n   */\n  function getUnderlyingPrice(address cToken) external view returns (uint256);\n}\n"
    },
    "contracts/Comptroller/Interfaces/IUnitroller.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ninterface IUnitroller {\n  function admin() external view returns (address);\n\n  /**\n   * @notice Accepts new implementation of comptroller. msg.sender must be pendingImplementation\n   * @dev Admin function for new implementation to accept it's role as implementation\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function _acceptImplementation() external returns (uint256);\n}\n"
    },
    "contracts/CToken/CErc20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\nimport './CToken.sol';\nimport './Interfaces/ICErc20.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\nimport '../ITimelock.sol';\n\n/**\n * @title Compound's CErc20 Contract\n * @notice CTokens which wrap an EIP-20 underlying\n * @author Compound\n */\ncontract CErc20 is CToken, ICErc20, Initializable {\n  using CarefulMath for uint256;\n  using TokenErrorReporter for Error;\n  using Exponential for Exp;\n  /**\n   * @notice Initialize the new money market\n   * @param underlying_ The address of the underlying asset\n   * @param comptroller_ The address of the Comptroller\n   * @param interestRateModel_ The address of the interest rate model\n   * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\n   * @param name_ ERC-20 name of this token\n   * @param symbol_ ERC-20 symbol of this token\n   * @param decimals_ ERC-20 decimal precision of this token\n   * @param admin_ Address of the administrator of this token\n   */\n  function initialize(\n    address underlying_,\n    address comptroller_,\n    address interestRateModel_,\n    uint256 initialExchangeRateMantissa_,\n    string memory name_,\n    string memory symbol_,\n    uint8 decimals_,\n    address payable admin_,\n    uint256 discountRateMantissa_\n  ) public initializer {\n    // CToken initialize does the bulk of the work\n    super.initialize(\n      comptroller_,\n      interestRateModel_,\n      initialExchangeRateMantissa_,\n      name_,\n      symbol_,\n      decimals_,\n      true,\n      admin_,\n      discountRateMantissa_\n    );\n\n    isCEther = false;\n\n    // Set underlying and sanity check it\n    require(underlying_ != address(0), 'Address is Zero!');\n    underlying = underlying_;\n    // ICToken(underlying).totalSupply();\n  }\n\n  /*** User Interface ***/\n\n  /**\n   * @notice Sender supplies assets into the market and receives cTokens in exchange\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\n   * @param mintAmount The amount of the underlying asset to supply\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function mint(uint256 mintAmount) external override returns (uint256) {\n    (uint256 err, ) = mintInternal(mintAmount);\n    return err;\n  }\n\n  /**\n   * @notice Sender redeems cTokens in exchange for the underlying asset\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\n   * @param redeemTokens The number of cTokens to redeem into underlying\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function redeem(uint256 redeemTokens) external override returns (uint256) {\n    return redeemInternal(redeemTokens);\n  }\n\n  /**\n   * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\n   * @param redeemAmount The amount of underlying to redeem\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function redeemUnderlying(uint256 redeemAmount) external override returns (uint256) {\n    return redeemUnderlyingInternal(redeemAmount);\n  }\n\n  /**\n   * @notice Sender borrows assets from the protocol to their own address\n   * @param borrowAmount The amount of the underlying asset to borrow\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function borrow(uint256 borrowAmount) external override returns (uint256) {\n    return borrowInternal(borrowAmount);\n  }\n\n  /**\n   * @notice Sender repays their own borrow\n   * @param repayAmount The amount to repay\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function repayBorrow(uint256 repayAmount) external override returns (uint256) {\n    (uint256 err, ) = repayBorrowInternal(repayAmount);\n    return err;\n  }\n\n  /**\n   * @notice Sender repays a borrow belonging to borrower\n   * @param borrower the account with the debt being paid off\n   * @param repayAmount The amount to repay\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function repayBorrowBehalf(address borrower, uint256 repayAmount) external override returns (uint256) {\n    (uint256 err, ) = repayBorrowBehalfInternal(borrower, repayAmount);\n    return err;\n  }\n\n  /**\n   * @notice The sender liquidates the borrowers collateral.\n   *  The collateral seized is transferred to the liquidator.\n   * @param borrower The borrower of this cToken to be liquidated\n   * @param repayAmount The amount of the underlying borrowed asset to repay\n   * @param cTokenCollateral The market in which to seize collateral from the borrower\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function liquidateBorrow(\n    address borrower,\n    uint256 repayAmount,\n    address cTokenCollateral\n  ) external override returns (uint256) {\n    (uint256 err, ) = liquidateBorrowInternal(borrower, repayAmount, cTokenCollateral);\n    return err;\n  }\n\n  /**\n   * @notice A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to admin (timelock)\n   * @param token The address of the ERC-20 token to sweep\n   */\n  function sweepToken(address token) external override {\n    require(address(token) != underlying, 'CErc20::sweepToken: can not sweep underlying token');\n    uint256 underlyingBalanceBefore = ICToken(underlying).balanceOf(address(this));\n    uint256 balance = ICToken(token).balanceOf(address(this));\n    ICToken(token).transfer(admin, balance);\n    uint256 underlyingBalanceAfter = ICToken(underlying).balanceOf(address(this));\n    require(underlyingBalanceBefore == underlyingBalanceAfter, 'underlyingBalance error');\n  }\n\n  /**\n   * @notice The sender adds to reserves.\n   * @param addAmount The amount fo underlying token to add as reserves\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function _addReserves(uint256 addAmount) external override returns (uint256) {\n    return _addReservesInternal(addAmount);\n  }\n\n  /*** Safe Token ***/\n\n  /**\n   * @notice Gets balance of this contract in terms of the underlying\n   * @dev This excludes the value of the current message, if any\n   * @return The quantity of underlying tokens owned by this contract\n   */\n  function getCashPrior() internal view virtual override returns (uint256) {\n    // ICToken token = ICToken(underlying);\n    // return token.balanceOf(address(this));\n    return underlyingBalance;\n  }\n\n  /**\n   * @dev Similar to EIP20 transfer, except it handles a False result from `transferFrom` and reverts in that case.\n   *      This will revert due to insufficient balance or insufficient allowance.\n   *      This function returns the actual amount received,\n   *      which may be less than `amount` if there is a fee attached to the transfer.\n   *\n   *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\n   *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\n   */\n  function doTransferIn(address from, uint256 amount) internal virtual override returns (uint256) {\n    ICToken token = ICToken(underlying);\n    uint256 balanceBefore = ICToken(underlying).balanceOf(address(this));\n    token.transferFrom(from, address(this), amount);\n\n    bool success;\n    assembly {\n      switch returndatasize()\n      case 0 {\n        // This is a non-standard ERC-20\n        success := not(0) // set success to true\n      }\n      case 32 {\n        // This is a compliant ERC-20\n        returndatacopy(0, 0, 32)\n        success := mload(0) // Set `success = returndata` of external call\n      }\n      default {\n        // This is an excessively non-compliant ERC-20, revert.\n        revert(0, 0)\n      }\n    }\n    require(success, 'TOKEN_TRANSFER_IN_FAILED');\n\n    // Calculate the amount that was *actually* transferred\n    uint256 balanceAfter = ICToken(underlying).balanceOf(address(this));\n    require(balanceAfter >= balanceBefore, 'TOKEN_TRANSFER_IN_OVERFLOW');\n    uint256 finalAmount = balanceAfter - balanceBefore;\n    underlyingBalance += finalAmount;\n    return finalAmount; // underflow already checked above, just subtract\n  }\n\n  /**\n   * @dev Similar to EIP20 transfer, except it handles a False success from `transfer` and returns an explanatory\n   *      error code rather than reverting. If caller has not called checked protocol's balance, this may revert due to\n   *      insufficient cash held in this contract. If caller has checked protocol's balance prior to this call, and verified\n   *      it is >= amount, this should not revert in normal conditions.\n   *\n   *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\n   *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\n   */\n  function doTransferOut(address payable to, uint256 amount) internal virtual override {\n    ICToken token = ICToken(underlying);\n    token.transfer(to, amount);\n    underlyingBalance -= amount;\n\n    bool success;\n    assembly {\n      switch returndatasize()\n      case 0 {\n        // This is a non-standard ERC-20\n        success := not(0) // set success to true\n      }\n      case 32 {\n        // This is a compliant ERC-20\n        returndatacopy(0, 0, 32)\n        success := mload(0) // Set `success = returndata` of external call\n      }\n      default {\n        // This is an excessively non-compliant ERC-20, revert.\n        revert(0, 0)\n      }\n    }\n    require(success, 'TOKEN_TRANSFER_OUT_FAILED');\n  }\n\n  function transferToTimelock(bool isBorrow, address to, uint256 amount) internal virtual override {\n    address timelock = IComptroller(comptroller).timelock();\n    if (ITimelock(timelock).isSupport(underlying)) {\n      doTransferOut(payable(timelock), amount);\n      ITimelock.TimeLockActionType actionType = isBorrow\n        ? ITimelock.TimeLockActionType.BORROW\n        : ITimelock.TimeLockActionType.REDEEM;\n      ITimelock(timelock).createAgreement(actionType, underlying, amount, to);\n    } else {\n      doTransferOut(payable(to), amount);\n    }\n  }\n    function accrueInterest() public virtual override returns (uint256) {\n    /* Remember the initial block number */\n    uint256 currentBlockNumber = getBlockNumber();\n    uint256 accrualBlockNumberPrior = accrualBlockNumber;\n\n    /* Short-circuit accumulating 0 interest */\n    if (accrualBlockNumberPrior == currentBlockNumber) {\n      return uint256(Error.NO_ERROR);\n    }\n\n    /* Read the previous values out of storage */\n    uint256 cashPrior = getCashPrior();\n    uint256 borrowsPrior = totalBorrows;\n    uint256 reservesPrior = totalReserves;\n    uint256 borrowIndexPrior = borrowIndex;\n\n    /* Calculate the current borrow interest rate */\n    uint256 borrowRateMantissa = IInterestRateModel(interestRateModel).getBorrowRate(\n      cashPrior,\n      borrowsPrior,\n      reservesPrior\n    );\n    if (3 > BORROW_RATE_MAX_MANTISSA) {\n      // Error.TOKEN_ERROR.failOpaque(FailureInfo.BORROW_RATE_ABSURDLY_HIGH, borrowRateMantissa);\n      borrowRateMantissa = BORROW_RATE_MAX_MANTISSA;\n    }\n\n    /* Calculate the number of blocks elapsed since the last accrual */\n    (MathError mathErr, uint256 blockDelta) = currentBlockNumber.subUInt(accrualBlockNumberPrior);\n    if (mathErr != MathError.NO_ERROR) {\n      Error.MATH_ERROR.fail(FailureInfo.COULD_NOT_CACULATE_BLOCK_DELTA);\n    }\n\n    /*\n     * Calculate the interest accumulated into borrows and reserves and the new index:\n     *  simpleInterestFactor = borrowRate * blockDelta\n     *  interestAccumulated = simpleInterestFactor * totalBorrows\n     *  totalBorrowsNew = interestAccumulated + totalBorrows\n     *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\n     *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\n     */\n\n    Exp memory simpleInterestFactor;\n    uint256 interestAccumulated;\n    uint256 totalBorrowsNew;\n    uint256 totalReservesNew;\n    uint256 borrowIndexNew;\n\n    (mathErr, simpleInterestFactor) = Exp({mantissa: borrowRateMantissa}).mulScalar(blockDelta);\n    if (mathErr != MathError.NO_ERROR) {\n      Error.MATH_ERROR.failOpaque(\n        FailureInfo.ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\n        uint256(mathErr)\n      );\n    }\n\n    (mathErr, interestAccumulated) = simpleInterestFactor.mulScalarTruncate(borrowsPrior);\n    if (mathErr != MathError.NO_ERROR) {\n      Error.MATH_ERROR.failOpaque(\n        FailureInfo.ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\n        uint256(mathErr)\n      );\n    }\n\n    (mathErr, totalBorrowsNew) = interestAccumulated.addUInt(borrowsPrior);\n    if (mathErr != MathError.NO_ERROR) {\n      Error.MATH_ERROR.failOpaque(FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED, uint256(mathErr));\n    }\n\n    (mathErr, totalReservesNew) = Exp({mantissa: reserveFactorMantissa}).mulScalarTruncateAddUInt(\n      interestAccumulated,\n      reservesPrior\n    );\n    if (mathErr != MathError.NO_ERROR) {\n      Error.MATH_ERROR.failOpaque(FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED, uint256(mathErr));\n    }\n\n    (mathErr, borrowIndexNew) = simpleInterestFactor.mulScalarTruncateAddUInt(borrowIndexPrior, borrowIndexPrior);\n    if (mathErr != MathError.NO_ERROR) {\n      Error.MATH_ERROR.failOpaque(FailureInfo.ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED, uint256(mathErr));\n    }\n\n    /////////////////////////\n    // EFFECTS & INTERACTIONS\n    // (No safe failures beyond this point)\n\n    /* We write the previously calculated values into storage */\n    accrualBlockNumber = currentBlockNumber;\n    borrowIndex = borrowIndexNew;\n    totalBorrows = totalBorrowsNew;\n    totalReserves = totalReservesNew;\n\n    /* We emit an AccrueInterest event */\n    emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\n\n    return uint256(Error.NO_ERROR);\n  }\n\n}\n"
    },
    "contracts/CToken/CEther.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport './CToken.sol';\nimport './Interfaces/ICErc20.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\nimport '../ITimelock.sol';\n\n/**\n * @title Compound's CEther Contract\n * @notice CToken which wraps Ether\n * @author Compound\n */\ncontract CEther is CToken, Initializable {\n  using CarefulMath for uint256;\n\n  /**\n   * @notice Construct a new CEther money market\n   * @param comptroller_ The address of the Comptroller\n   * @param interestRateModel_ The address of the interest rate model\n   * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\n   * @param name_ ERC-20 name of this token\n   * @param symbol_ ERC-20 symbol of this token\n   * @param decimals_ ERC-20 decimal precision of this token\n   * @param admin_ Address of the administrator of this token\n   */\n  function initialize(\n    address comptroller_,\n    address interestRateModel_,\n    uint256 initialExchangeRateMantissa_,\n    string memory name_,\n    string memory symbol_,\n    uint8 decimals_,\n    address payable admin_,\n    uint256 discountRateMantissa_\n  ) public initializer {\n    super.initialize(\n      comptroller_,\n      interestRateModel_,\n      initialExchangeRateMantissa_,\n      name_,\n      symbol_,\n      decimals_,\n      true,\n      admin_,\n      discountRateMantissa_\n    );\n\n    isCEther = true;\n  }\n\n  /*** User Interface ***/\n\n  /**\n   * @notice Sender supplies assets into the market and receives cTokens in exchange\n   * @dev Reverts upon any failure\n   */\n  function mint() external payable {\n    (uint256 err, ) = mintInternal(msg.value);\n    requireNoError(err, 'mint failed');\n  }\n\n  /**\n   * @notice Sender redeems cTokens in exchange for the underlying asset\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\n   * @param redeemTokens The number of cTokens to redeem into underlying\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function redeem(uint256 redeemTokens) external returns (uint256) {\n    return redeemInternal(redeemTokens);\n  }\n\n  /**\n   * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\n   * @param redeemAmount The amount of underlying to redeem\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function redeemUnderlying(uint256 redeemAmount) external returns (uint256) {\n    return redeemUnderlyingInternal(redeemAmount);\n  }\n\n  /**\n   * @notice Sender borrows assets from the protocol to their own address\n   * @param borrowAmount The amount of the underlying asset to borrow\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function borrow(uint256 borrowAmount) external returns (uint256) {\n    return borrowInternal(borrowAmount);\n  }\n\n  /**\n   * @notice Sender repays their own borrow\n   * @dev Reverts upon any failure\n   */\n  function repayBorrow() external payable {\n    (uint256 err, ) = repayBorrowInternal(msg.value);\n    requireNoError(err, 'repayBorrow failed');\n  }\n\n  /**\n   * @notice Sender repays a borrow belonging to borrower\n   * @dev Reverts upon any failure\n   * @param borrower the account with the debt being paid off\n   */\n  function repayBorrowBehalf(address borrower) external payable {\n    uint256 received = msg.value;\n    uint256 borrows = CEther(payable(this)).borrowBalanceCurrent(borrower);\n    if (received > borrows) {\n      // payable(msg.sender).transfer(received - borrows);\n      (bool success, ) = msg.sender.call{value: received - borrows}('');\n      require(success, 'Address: unable to send value, recipient may have reverted');\n    }\n    (uint256 err, ) = repayBorrowBehalfInternal(borrower, borrows);\n    requireNoError(err, 'repayBorrowBehalf failed');\n  }\n\n  /**\n   * @notice The sender liquidates the borrowers collateral.\n   *  The collateral seized is transferred to the liquidator.\n   * @dev Reverts upon any failure\n   * @param borrower The borrower of this cToken to be liquidated\n   * @param cTokenCollateral The market in which to seize collateral from the borrower\n   */\n  function liquidateBorrow(address borrower, address cTokenCollateral) external payable {\n    (uint256 err, ) = liquidateBorrowInternal(borrower, msg.value, cTokenCollateral);\n    requireNoError(err, 'liquidateBorrow failed');\n  }\n\n  /**\n   * @notice The sender adds to reserves.\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function _addReserves() external payable returns (uint256) {\n    return _addReservesInternal(msg.value);\n  }\n\n  /**\n   * @notice Send Ether to CEther to mint\n   */\n  receive() external payable {\n    (uint256 err, ) = mintInternal(msg.value);\n    requireNoError(err, 'mint failed');\n  }\n\n  /*** Safe Token ***/\n\n  /**\n   * @notice Gets balance of this contract in terms of Ether, before this message\n   * @dev This excludes the value of the current message, if any\n   * @return The quantity of Ether owned by this contract\n   */\n  function getCashPrior() internal view override returns (uint256) {\n    (MathError err, uint256 startingBalance) = address(this).balance.subUInt(msg.value);\n    require(err == MathError.NO_ERROR);\n    return startingBalance;\n  }\n\n  /**\n   * @notice Perform the actual transfer in, which is a no-op\n   * @param from Address sending the Ether\n   * @param amount Amount of Ether being sent\n   * @return The actual amount of Ether transferred\n   */\n  function doTransferIn(address from, uint256 amount) internal override returns (uint256) {\n    // Sanity checks\n    require(msg.sender == from, 'sender mismatch');\n    require(msg.value >= amount, 'value mismatch');\n    return amount;\n  }\n\n  function doTransferOut(address payable to, uint256 amount) internal override {\n    /* Send the Ether, with minimal gas and revert on failure */\n    // to.transfer(amount);\n    (bool success, ) = to.call{value: amount}('');\n    require(success, 'Address: unable to send value, recipient may have reverted');\n  }\n\n  function transferToTimelock(bool isBorrow, address to, uint256 amount) internal virtual override {\n    address timelock = IComptroller(comptroller).timelock();\n    if (ITimelock(timelock).isSupport(underlying)) {\n      doTransferOut(payable(timelock), amount);\n      ITimelock.TimeLockActionType actionType = isBorrow\n        ? ITimelock.TimeLockActionType.BORROW\n        : ITimelock.TimeLockActionType.REDEEM;\n      ITimelock(timelock).createAgreement(actionType, address(1), amount, to);\n    } else {\n      doTransferOut(payable(to), amount);\n    }\n  }\n\n  function requireNoError(uint256 errCode, string memory message) internal pure {\n    if (errCode == uint256(Error.NO_ERROR)) {\n      return;\n    }\n\n    bytes memory fullMessage = new bytes(bytes(message).length + 5);\n    uint256 i;\n\n    for (i = 0; i < bytes(message).length; i++) {\n      fullMessage[i] = bytes(message)[i];\n    }\n\n    fullMessage[i + 0] = bytes1(uint8(32));\n    fullMessage[i + 1] = bytes1(uint8(40));\n    fullMessage[i + 2] = bytes1(uint8(48 + (errCode / 10)));\n    fullMessage[i + 3] = bytes1(uint8(48 + (errCode % 10)));\n    fullMessage[i + 4] = bytes1(uint8(41));\n\n    require(errCode == uint256(Error.NO_ERROR), string(fullMessage));\n  }\n}\n"
    },
    "contracts/CToken/CToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport '../Comptroller/Interfaces/IComptroller.sol';\nimport '../Comptroller/Interfaces/IPriceOracle.sol';\nimport './Interfaces/IInterestRateModel.sol';\nimport './TokenErrorReporter.sol';\nimport './CTokenStorage.sol';\nimport '../Exponential/Exponential.sol';\n\n/**\n * @title Compound's CToken Contract\n * @notice Abstract base for CTokens\n * @author Compound\n */\nabstract contract CToken is CTokenStorage {\n  using Exponential for uint256;\n  using Exponential for Exp;\n  using ExponentialNoError for uint256;\n  using ExponentialNoError for Exp;\n  using CarefulMath for uint256;\n  using TokenErrorReporter for Error;\n\n  modifier onlyAdmin() {\n    // Check caller is admin\n    require(msg.sender == admin, 'UNAUTHORIZED');\n    _;\n  }\n\n  /**\n   * @notice Initialize the money market\n   * @param comptroller_ The address of the Comptroller\n   * @param interestRateModel_ The address of the interest rate model\n   * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\n   * @param name_ EIP-20 name of this token\n   * @param symbol_ EIP-20 symbol of this token\n   * @param decimals_ EIP-20 decimal precision of this token\n   */\n  function initialize(\n    address comptroller_,\n    address interestRateModel_,\n    uint256 initialExchangeRateMantissa_,\n    string memory name_,\n    string memory symbol_,\n    uint8 decimals_,\n    bool isCToken_,\n    address payable _admin,\n    uint256 discountRateMantissa_\n  ) internal {\n    admin = _admin;\n    require(accrualBlockNumber == 0 && borrowIndex == 0, 'MMOB'); // market may only be initialized once\n\n    isCToken = isCToken_;\n\n    // Set initial exchange rate\n    initialExchangeRateMantissa = initialExchangeRateMantissa_;\n    require(initialExchangeRateMantissa > 0, 'IERM'); // initial exchange rate must be greater than zero\n\n    discountRateMantissa = discountRateMantissa_;\n    require(discountRateMantissa > 0 && discountRateMantissa <= 1e18, 'RMI'); // rate must in [0,100]\n\n    // Set the comptroller\n    // Set market's comptroller to newComptroller\n    comptroller = comptroller_;\n\n    // Emit NewComptroller(oldComptroller, newComptroller)\n    emit NewComptroller(address(0), comptroller_);\n\n    // Initialize block number and borrow index (block number mocks depend on comptroller being set)\n    accrualBlockNumber = getBlockNumber();\n    borrowIndex = 1e18;\n\n    // Set the interest rate model (depends on block number / borrow index)\n    interestRateModel = interestRateModel_;\n    emit NewMarketInterestRateModel(address(0), interestRateModel_);\n\n    name = name_;\n    symbol = symbol_;\n    decimals = decimals_;\n\n    // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\n    _notEntered = true;\n  }\n\n  /**\n   * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\n   * @dev Called by both `transfer` and `transferFrom` internally\n   * @param spender The address of the account performing the transfer\n   * @param src The address of the source account\n   * @param dst The address of the destination account\n   * @param tokens The number of tokens to transfer\n   * @return Whether or not the transfer succeeded\n   */\n  function transferTokens(address spender, address src, address dst, uint256 tokens) internal returns (uint256) {\n    /* Fail if transfer not allowed */\n    uint256 allowed = IComptroller(comptroller).transferAllowed(address(this), src, dst, tokens);\n    if (allowed != 0) {\n      Error.COMPTROLLER_REJECTION.failOpaque(FailureInfo.TRANSFER_COMPTROLLER_REJECTION, allowed);\n    }\n\n    /* Do not allow self-transfers */\n    if (src == dst) {\n      Error.BAD_INPUT.fail(FailureInfo.TRANSFER_NOT_ALLOWED);\n    }\n\n    /* Get the allowance, infinite for the account owner */\n    uint256 startingAllowance = 0;\n    if (spender == src) {\n      startingAllowance = uint256(0);\n    } else {\n      startingAllowance = transferAllowances[src][spender];\n    }\n\n    /* Do the calculations, checking for {under,over}flow */\n    MathError mathErr;\n    uint256 allowanceNew;\n    uint256 srcTokensNew;\n    uint256 dstTokensNew;\n\n    (mathErr, allowanceNew) = startingAllowance.subUInt(tokens);\n    if (mathErr != MathError.NO_ERROR) {\n      Error.MATH_ERROR.fail(FailureInfo.TRANSFER_NOT_ALLOWED);\n    }\n\n    (mathErr, srcTokensNew) = accountTokens[src].subUInt(tokens);\n    if (mathErr != MathError.NO_ERROR) {\n      Error.MATH_ERROR.fail(FailureInfo.TRANSFER_NOT_ENOUGH);\n    }\n\n    (mathErr, dstTokensNew) = accountTokens[dst].addUInt(tokens);\n    if (mathErr != MathError.NO_ERROR) {\n      Error.MATH_ERROR.fail(FailureInfo.TRANSFER_TOO_MUCH);\n    }\n\n    /////////////////////////\n    // EFFECTS & INTERACTIONS\n    // (No safe failures beyond this point)\n\n    accountTokens[src] = srcTokensNew;\n    accountTokens[dst] = dstTokensNew;\n\n    /* Eat some of the allowance (if necessary) */\n    if (startingAllowance != uint256(0)) {\n      transferAllowances[src][spender] = allowanceNew;\n    }\n\n    /* We emit a Transfer event */\n    emit Transfer(src, dst, tokens);\n\n    // unused function\n    // comptroller.transferVerify(address(this), src, dst, tokens);\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  /**\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n   * @param dst The address of the destination account\n   * @param amount The number of tokens to transfer\n   * @return Whether or not the transfer succeeded\n   */\n  function transfer(address dst, uint256 amount) external override nonReentrant returns (bool) {\n    return transferTokens(msg.sender, msg.sender, dst, amount) == uint256(Error.NO_ERROR);\n  }\n\n  /**\n   * @notice Transfer `amount` tokens from `src` to `dst`\n   * @param src The address of the source account\n   * @param dst The address of the destination account\n   * @param amount The number of tokens to transfer\n   * @return Whether or not the transfer succeeded\n   */\n  function transferFrom(address src, address dst, uint256 amount) external override nonReentrant returns (bool) {\n    return transferTokens(msg.sender, src, dst, amount) == uint256(Error.NO_ERROR);\n  }\n\n  /**\n   * @notice Approve `spender` to transfer up to `amount` from `src`\n   * @dev This will overwrite the approval amount for `spender`\n   *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n   * @param spender The address of the account which may transfer tokens\n   * @param amount The number of tokens that are approved (-1 means infinite)\n   * @return Whether or not the approval succeeded\n   */\n  function approve(address spender, uint256 amount) external override returns (bool) {\n    address src = msg.sender;\n    transferAllowances[src][spender] = amount;\n    emit Approval(src, spender, amount);\n    return true;\n  }\n\n  /**\n   * @notice Get the current allowance from `owner` for `spender`\n   * @param owner The address of the account which owns the tokens to be spent\n   * @param spender The address of the account which may transfer tokens\n   * @return The number of tokens allowed to be spent (-1 means infinite)\n   */\n  function allowance(address owner, address spender) external view override returns (uint256) {\n    return transferAllowances[owner][spender];\n  }\n\n  /**\n   * @notice Get the token balance of the `owner`\n   * @param owner The address of the account to query\n   * @return The number of tokens owned by `owner`\n   */\n  function balanceOf(address owner) external view override returns (uint256) {\n    return accountTokens[owner];\n  }\n\n  /**\n   * @notice Get the underlying balance of the `owner`\n   * @dev This also accrues interest in a transaction\n   * @param owner The address of the account to query\n   * @return The amount of underlying owned by `owner`\n   */\n  function balanceOfUnderlying(address owner) external override returns (uint256) {\n    Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\n    (MathError mErr, uint256 balance) = exchangeRate.mulScalarTruncate(accountTokens[owner]);\n    if (mErr != MathError.NO_ERROR) {\n      Error.MATH_ERROR.fail(FailureInfo.BALANCE_COULD_NOT_BE_CALCULATED);\n    }\n    return balance;\n  }\n\n  /**\n   * @notice Get a snapshot of the account's balances, and the cached exchange rate\n   * @dev This is used by comptroller to more efficiently perform liquidity checks.\n   * @param account Address of the account to snapshot\n   * @return (possible error, token balance, borrow balance, exchange rate mantissa)\n   */\n  function getAccountSnapshot(address account) external view override returns (uint256, uint256, uint256, uint256) {\n    uint256 cTokenBalance = accountTokens[account];\n    uint256 borrowBalance;\n    uint256 exchangeRateMantissa;\n\n    MathError mErr;\n\n    (mErr, borrowBalance) = borrowBalanceStoredInternal(account);\n    if (mErr != MathError.NO_ERROR) {\n      return (uint256(Error.MATH_ERROR), 0, 0, 0);\n    }\n\n    (mErr, exchangeRateMantissa) = exchangeRateStoredInternal();\n    if (mErr != MathError.NO_ERROR) {\n      return (uint256(Error.MATH_ERROR), 0, 0, 0);\n    }\n\n    return (uint256(Error.NO_ERROR), cTokenBalance, borrowBalance, exchangeRateMantissa);\n  }\n\n  /**\n   * @dev Function to simply retrieve block number\n   *  This exists mainly for inheriting test contracts to stub this result.\n   */\n  function getBlockNumber() internal view returns (uint256) {\n    return block.number;\n  }\n\n  /**\n   * @notice Returns the current per-block borrow interest rate for this cToken\n   * @return The borrow interest rate per block, scaled by 1e18\n   */\n  function borrowRatePerBlock() external view override returns (uint256) {\n    return IInterestRateModel(interestRateModel).getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\n  }\n\n  /**\n   * @notice Returns the current per-block supply interest rate for this cToken\n   * @return The supply interest rate per block, scaled by 1e18\n   */\n  function supplyRatePerBlock() external view override returns (uint256) {\n    return\n      IInterestRateModel(interestRateModel).getSupplyRate(\n        getCashPrior(),\n        totalBorrows,\n        totalReserves,\n        reserveFactorMantissa\n      );\n  }\n\n  /**\n   * @notice Returns the current total borrows plus accrued interest\n   * @return The total borrows with interest\n   */\n  function totalBorrowsCurrent() external override nonReentrant returns (uint256) {\n    accrueInterest();\n    return totalBorrows;\n  }\n\n  /**\n   * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\n   * @param account The address whose balance should be calculated after updating borrowIndex\n   * @return The calculated balance\n   */\n  function borrowBalanceCurrent(address account) external override nonReentrant returns (uint256) {\n    accrueInterest();\n    return borrowBalanceStored(account);\n  }\n\n  /**\n   * @notice Return the borrow balance of account based on stored data\n   * @param account The address whose balance should be calculated\n   * @return The calculated balance\n   */\n  function borrowBalanceStored(address account) public view override returns (uint256) {\n    (MathError err, uint256 result) = borrowBalanceStoredInternal(account);\n    if (err != MathError.NO_ERROR) {\n      Error.MATH_ERROR.fail(FailureInfo.BORROW_BALANCE_STORED_INTERNAL_FAILED);\n    }\n    return result;\n  }\n\n  /**\n   * @notice Return the borrow balance of account based on stored data\n   * @param account The address whose balance should be calculated\n   * @return (error code, the calculated balance or 0 if error code is non-zero)\n   */\n  function borrowBalanceStoredInternal(address account) internal view returns (MathError, uint256) {\n    /* Note: we do not assert that the market is up to date */\n    MathError mathErr;\n    uint256 principalTimesIndex;\n    uint256 result;\n\n    /* Get borrowBalance and borrowIndex */\n    BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\n\n    /* If borrowBalance = 0 then borrowIndex is likely also 0.\n     * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\n     */\n    if (borrowSnapshot.principal == 0) {\n      return (MathError.NO_ERROR, 0);\n    }\n\n    /* Calculate new borrow balance using the interest index:\n     *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\n     */\n    (mathErr, principalTimesIndex) = borrowSnapshot.principal.mulUInt(borrowIndex);\n    if (mathErr != MathError.NO_ERROR) {\n      return (mathErr, 0);\n    }\n\n    (mathErr, result) = principalTimesIndex.divUInt(borrowSnapshot.interestIndex);\n    if (mathErr != MathError.NO_ERROR) {\n      return (mathErr, 0);\n    }\n\n    return (MathError.NO_ERROR, result);\n  }\n\n  /**\n   * @notice Accrue interest then return the up-to-date exchange rate\n   * @return Calculated exchange rate scaled by 1e18\n   */\n  function exchangeRateCurrent() public override nonReentrant returns (uint256) {\n    accrueInterest();\n    return exchangeRateStored();\n  }\n\n  /**\n   * @notice Calculates the exchange rate from the underlying to the CToken\n   * @dev This function does not accrue interest before calculating the exchange rate\n   * @return Calculated exchange rate scaled by 1e18\n   */\n  function exchangeRateStored() public view override returns (uint256) {\n    (MathError err, uint256 result) = exchangeRateStoredInternal();\n    if (err != MathError.NO_ERROR) {\n      Error.MATH_ERROR.fail(FailureInfo.EXCHANGE_RATE_STORED_INTERNAL_FAILED);\n    }\n    return result;\n  }\n\n  /**\n   * @notice Calculates the exchange rate from the underlying to the CToken\n   * @dev This function does not accrue interest before calculating the exchange rate\n   * @return (error code, calculated exchange rate scaled by 1e18)\n   */\n  function exchangeRateStoredInternal() internal view returns (MathError, uint256) {\n    if (!isCToken) {\n      return (MathError.NO_ERROR, initialExchangeRateMantissa);\n    }\n\n    uint256 _totalSupply = totalSupply;\n    if (_totalSupply == 0) {\n      /*\n       * If there are no tokens minted:\n       *  exchangeRate = initialExchangeRate\n       */\n      return (MathError.NO_ERROR, initialExchangeRateMantissa);\n    } else {\n      /*\n       * Otherwise:\n       *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\n       */\n      uint256 totalCash = getCashPrior();\n      uint256 cashPlusBorrowsMinusReserves;\n      Exp memory exchangeRate;\n      MathError mathErr;\n\n      (mathErr, cashPlusBorrowsMinusReserves) = totalCash.addThenSubUInt(totalBorrows, totalReserves);\n      if (mathErr != MathError.NO_ERROR) {\n        return (mathErr, 0);\n      }\n\n      (mathErr, exchangeRate) = cashPlusBorrowsMinusReserves.getExp(_totalSupply);\n      if (mathErr != MathError.NO_ERROR) {\n        return (mathErr, 0);\n      }\n\n      return (MathError.NO_ERROR, exchangeRate.mantissa);\n    }\n  }\n\n  /**\n   * @notice Get cash balance of this cToken in the underlying asset\n   * @return The quantity of underlying asset owned by this contract\n   */\n  function getCash() external view override returns (uint256) {\n    return getCashPrior();\n  }\n\n  /**\n   * @notice Applies accrued interest to total borrows and reserves\n   * @dev This calculates interest accrued from the last checkpointed block\n   *   up to the current block and writes new checkpoint to storage.\n   */\n  function accrueInterest() public virtual override returns (uint256) {\n    /* Remember the initial block number */\n    uint256 currentBlockNumber = getBlockNumber();\n    uint256 accrualBlockNumberPrior = accrualBlockNumber;\n\n    /* Short-circuit accumulating 0 interest */\n    if (accrualBlockNumberPrior == currentBlockNumber) {\n      return uint256(Error.NO_ERROR);\n    }\n\n    /* Read the previous values out of storage */\n    uint256 cashPrior = getCashPrior();\n    uint256 borrowsPrior = totalBorrows;\n    uint256 reservesPrior = totalReserves;\n    uint256 borrowIndexPrior = borrowIndex;\n\n    /* Calculate the current borrow interest rate */\n    uint256 borrowRateMantissa = IInterestRateModel(interestRateModel).getBorrowRate(\n      cashPrior,\n      borrowsPrior,\n      reservesPrior\n    );\n    if (borrowRateMantissa > BORROW_RATE_MAX_MANTISSA) {\n      // Error.TOKEN_ERROR.failOpaque(FailureInfo.BORROW_RATE_ABSURDLY_HIGH, borrowRateMantissa);\n      borrowRateMantissa = BORROW_RATE_MAX_MANTISSA;\n    }\n\n    /* Calculate the number of blocks elapsed since the last accrual */\n    (MathError mathErr, uint256 blockDelta) = currentBlockNumber.subUInt(accrualBlockNumberPrior);\n    if (mathErr != MathError.NO_ERROR) {\n      Error.MATH_ERROR.fail(FailureInfo.COULD_NOT_CACULATE_BLOCK_DELTA);\n    }\n\n    /*\n     * Calculate the interest accumulated into borrows and reserves and the new index:\n     *  simpleInterestFactor = borrowRate * blockDelta\n     *  interestAccumulated = simpleInterestFactor * totalBorrows\n     *  totalBorrowsNew = interestAccumulated + totalBorrows\n     *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\n     *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\n     */\n\n    Exp memory simpleInterestFactor;\n    uint256 interestAccumulated;\n    uint256 totalBorrowsNew;\n    uint256 totalReservesNew;\n    uint256 borrowIndexNew;\n\n    (mathErr, simpleInterestFactor) = Exp({mantissa: borrowRateMantissa}).mulScalar(blockDelta);\n    if (mathErr != MathError.NO_ERROR) {\n      Error.MATH_ERROR.failOpaque(\n        FailureInfo.ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\n        uint256(mathErr)\n      );\n    }\n\n    (mathErr, interestAccumulated) = simpleInterestFactor.mulScalarTruncate(borrowsPrior);\n    if (mathErr != MathError.NO_ERROR) {\n      Error.MATH_ERROR.failOpaque(\n        FailureInfo.ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\n        uint256(mathErr)\n      );\n    }\n\n    (mathErr, totalBorrowsNew) = interestAccumulated.addUInt(borrowsPrior);\n    if (mathErr != MathError.NO_ERROR) {\n      Error.MATH_ERROR.failOpaque(FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED, uint256(mathErr));\n    }\n\n    (mathErr, totalReservesNew) = Exp({mantissa: reserveFactorMantissa}).mulScalarTruncateAddUInt(\n      interestAccumulated,\n      reservesPrior\n    );\n    if (mathErr != MathError.NO_ERROR) {\n      Error.MATH_ERROR.failOpaque(FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED, uint256(mathErr));\n    }\n\n    (mathErr, borrowIndexNew) = simpleInterestFactor.mulScalarTruncateAddUInt(borrowIndexPrior, borrowIndexPrior);\n    if (mathErr != MathError.NO_ERROR) {\n      Error.MATH_ERROR.failOpaque(FailureInfo.ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED, uint256(mathErr));\n    }\n\n    /////////////////////////\n    // EFFECTS & INTERACTIONS\n    // (No safe failures beyond this point)\n\n    /* We write the previously calculated values into storage */\n    accrualBlockNumber = currentBlockNumber;\n    borrowIndex = borrowIndexNew;\n    totalBorrows = totalBorrowsNew;\n    totalReserves = totalReservesNew;\n\n    /* We emit an AccrueInterest event */\n    emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  /**\n   * @notice Sender supplies assets into the market and receives cTokens in exchange\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\n   * @param mintAmount The amount of the underlying asset to supply\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\n   */\n  function mintInternal(uint256 mintAmount) internal nonReentrant returns (uint256, uint256) {\n    accrueInterest();\n    // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\n    return mintFresh(msg.sender, mintAmount);\n  }\n\n  struct MintLocalVars {\n    Error err;\n    MathError mathErr;\n    uint256 exchangeRateMantissa;\n    uint256 mintTokens;\n    uint256 totalSupplyNew;\n    uint256 accountTokensNew;\n    uint256 actualMintAmount;\n  }\n\n  /**\n   * @notice User supplies assets into the market and receives cTokens in exchange\n   * @dev Assumes interest has already been accrued up to the current block\n   * @param minter The address of the account which is supplying the assets\n   * @param mintAmount The amount of the underlying asset to supply\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\n   */\n  function mintFresh(address minter, uint256 mintAmount) internal returns (uint256, uint256) {\n    /* Fail if mint not allowed */\n    uint256 allowed = IComptroller(comptroller).mintAllowed(address(this), minter, mintAmount);\n    if (allowed != 0) {\n      Error.COMPTROLLER_REJECTION.failOpaque(FailureInfo.MINT_COMPTROLLER_REJECTION, allowed);\n    }\n\n    /* Verify market's block number equals current block number */\n    if (accrualBlockNumber != getBlockNumber()) {\n      Error.MARKET_NOT_FRESH.fail(FailureInfo.MINT_FRESHNESS_CHECK);\n    }\n\n    MintLocalVars memory vars;\n\n    (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\n    if (vars.mathErr != MathError.NO_ERROR) {\n      Error.MATH_ERROR.failOpaque(FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint256(vars.mathErr));\n    }\n\n    /////////////////////////\n    // EFFECTS & INTERACTIONS\n    // (No safe failures beyond this point)\n\n    /*\n     *  We call `doTransferIn` for the minter and the mintAmount.\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\n     *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\n     *  side-effects occurred. The function returns the amount actually transferred,\n     *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\n     *  of cash.\n     */\n    vars.actualMintAmount = doTransferIn(minter, mintAmount);\n\n    /*\n     * We get the current exchange rate and calculate the number of cTokens to be minted:\n     *  mintTokens = actualMintAmount / exchangeRate\n     */\n\n    (vars.mathErr, vars.mintTokens) = vars.actualMintAmount.divScalarByExpTruncate(\n      Exp({mantissa: vars.exchangeRateMantissa})\n    );\n    if (vars.mathErr != MathError.NO_ERROR) {\n      Error.MATH_ERROR.fail(FailureInfo.MINT_EXCHANGE_CALCULATION_FAILED);\n    }\n\n    /*\n     * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\n     *  totalSupplyNew = totalSupply + mintTokens\n     *  accountTokensNew = accountTokens[minter] + mintTokens\n     */\n    (vars.mathErr, vars.totalSupplyNew) = totalSupply.addUInt(vars.mintTokens);\n    if (vars.mathErr != MathError.NO_ERROR) {\n      Error.MATH_ERROR.fail(FailureInfo.MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED);\n    }\n\n    (vars.mathErr, vars.accountTokensNew) = accountTokens[minter].addUInt(vars.mintTokens);\n    if (vars.mathErr != MathError.NO_ERROR) {\n      Error.MATH_ERROR.fail(FailureInfo.MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED);\n    }\n\n    /* We write previously calculated values into storage */\n    totalSupply = vars.totalSupplyNew;\n    accountTokens[minter] = vars.accountTokensNew;\n\n    /* We emit a Mint event, and a Transfer event */\n    emit Mint(minter, vars.actualMintAmount, vars.mintTokens);\n    emit Transfer(address(this), minter, vars.mintTokens);\n\n    /* We call the defense hook */\n    // unused function\n    // comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);\n\n    return (uint256(Error.NO_ERROR), vars.actualMintAmount);\n  }\n\n  /**\n   * @notice Sender redeems cTokens in exchange for the underlying asset\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\n   * @param redeemTokens The number of cTokens to redeem into underlying\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function redeemInternal(uint256 redeemTokens) internal nonReentrant returns (uint256) {\n    accrueInterest();\n    // redeemFresh emits redeem-specific logs on errors, so we don't need to\n    return redeemFresh(payable(msg.sender), redeemTokens, 0);\n  }\n\n  /**\n   * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\n   * @param redeemAmount The amount of underlying to receive from redeeming cTokens\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function redeemUnderlyingInternal(uint256 redeemAmount) internal nonReentrant returns (uint256) {\n    accrueInterest();\n    // redeemFresh emits redeem-specific logs on errors, so we don't need to\n    return redeemFresh(payable(msg.sender), 0, redeemAmount);\n  }\n\n  struct RedeemLocalVars {\n    Error err;\n    MathError mathErr;\n    uint256 exchangeRateMantissa;\n    uint256 redeemTokens;\n    uint256 redeemAmount;\n    uint256 totalSupplyNew;\n    uint256 accountTokensNew;\n  }\n\n  /**\n   * @notice User redeems cTokens in exchange for the underlying asset\n   * @dev Assumes interest has already been accrued up to the current block\n   * @param redeemer The address of the account which is redeeming the tokens\n   * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\n   * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function redeemFresh(\n    address payable redeemer,\n    uint256 redeemTokensIn,\n    uint256 redeemAmountIn\n  ) internal returns (uint256) {\n    if (redeemTokensIn != 0 && redeemAmountIn != 0) {\n      Error.BAD_INPUT.fail(FailureInfo.ONE_OF_REDEEM_TOKENS_IN_OR_REDEEM_AMOUNT_IN_MUST_BE_ZERO);\n    }\n    RedeemLocalVars memory vars;\n\n    /* exchangeRate = invoke Exchange Rate Stored() */\n    (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\n    if (vars.mathErr != MathError.NO_ERROR) {\n      Error.MATH_ERROR.failOpaque(FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint256(vars.mathErr));\n    }\n\n    /* If redeemTokensIn > 0: */\n    if (redeemTokensIn > 0) {\n      /*\n       * We calculate the exchange rate and the amount of underlying to be redeemed:\n       *  redeemTokens = redeemTokensIn\n       *  redeemAmount = redeemTokensIn x exchangeRateCurrent\n       */\n      vars.redeemTokens = redeemTokensIn;\n\n      (vars.mathErr, vars.redeemAmount) = Exp({mantissa: vars.exchangeRateMantissa}).mulScalarTruncate(redeemTokensIn);\n      if (vars.mathErr != MathError.NO_ERROR) {\n        Error.MATH_ERROR.failOpaque(FailureInfo.REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED, uint256(vars.mathErr));\n      }\n    } else {\n      /*\n       * We get the current exchange rate and calculate the amount to be redeemed:\n       *  redeemTokens = redeemAmountIn / exchangeRate\n       *  redeemAmount = redeemAmountIn\n       */\n\n      (vars.mathErr, vars.redeemTokens) = redeemAmountIn.divScalarByExpTruncate(\n        Exp({mantissa: vars.exchangeRateMantissa})\n      );\n      if (vars.mathErr != MathError.NO_ERROR) {\n        Error.MATH_ERROR.failOpaque(FailureInfo.REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED, uint256(vars.mathErr));\n      }\n\n      vars.redeemAmount = redeemAmountIn;\n    }\n\n    /* Fail if redeem not allowed */\n    uint256 allowed = IComptroller(comptroller).redeemAllowed(address(this), redeemer, vars.redeemTokens);\n    if (allowed != 0) {\n      Error.COMPTROLLER_REJECTION.failOpaque(FailureInfo.REDEEM_COMPTROLLER_REJECTION, allowed);\n    }\n\n    /* Verify market's block number equals current block number */\n    if (accrualBlockNumber != getBlockNumber()) {\n      Error.MARKET_NOT_FRESH.fail(FailureInfo.REDEEM_FRESHNESS_CHECK);\n    }\n\n    /*\n     * We calculate the new total supply and redeemer balance, checking for underflow:\n     *  totalSupplyNew = totalSupply - redeemTokens\n     *  accountTokensNew = accountTokens[redeemer] - redeemTokens\n     */\n    (vars.mathErr, vars.totalSupplyNew) = totalSupply.subUInt(vars.redeemTokens);\n    if (vars.mathErr != MathError.NO_ERROR) {\n      Error.MATH_ERROR.failOpaque(FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED, uint256(vars.mathErr));\n    }\n\n    (vars.mathErr, vars.accountTokensNew) = accountTokens[redeemer].subUInt(vars.redeemTokens);\n    if (vars.mathErr != MathError.NO_ERROR) {\n      Error.MATH_ERROR.failOpaque(FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED, uint256(vars.mathErr));\n    }\n\n    /* Fail gracefully if protocol has insufficient cash */\n    if (isCToken && (getCashPrior() < vars.redeemAmount)) {\n      Error.TOKEN_INSUFFICIENT_CASH.fail(FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE);\n    }\n\n    /////////////////////////\n    // EFFECTS & INTERACTIONS\n    // (No safe failures beyond this point)\n\n    /* We write previously calculated values into storage */\n    totalSupply = vars.totalSupplyNew;\n    accountTokens[redeemer] = vars.accountTokensNew;\n\n    /*\n     * We invoke doTransferOut for the redeemer and the redeemAmount.\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\n     *  On success, the cToken has redeemAmount less of cash.\n     *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\n     */\n    // doTransferOut(redeemer, vars.redeemAmount);\n    transferToTimelock(false, redeemer, vars.redeemAmount);\n\n    /* We emit a Transfer event, and a Redeem event */\n    emit Transfer(redeemer, address(this), vars.redeemTokens);\n    emit Redeem(redeemer, vars.redeemAmount, vars.redeemTokens);\n\n    /* We call the defense hook */\n    IComptroller(comptroller).redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  function redeemAndTransferFresh(address payable redeemer, uint256 redeemTokensIn) internal returns (uint256) {\n    if (redeemTokensIn != 0) {\n      Error.BAD_INPUT.fail(FailureInfo.ONE_OF_REDEEM_TOKENS_IN_OR_REDEEM_AMOUNT_IN_MUST_BE_ZERO);\n    }\n    RedeemLocalVars memory vars;\n\n    /* exchangeRate = invoke Exchange Rate Stored() */\n    (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\n    if (vars.mathErr != MathError.NO_ERROR) {\n      Error.MATH_ERROR.failOpaque(FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint256(vars.mathErr));\n    }\n\n    /*\n     * We calculate the exchange rate and the amount of underlying to be redeemed:\n     *  redeemTokens = redeemTokensIn\n     *  redeemAmount = redeemTokensIn x exchangeRateCurrent\n     */\n    vars.redeemTokens = redeemTokensIn;\n\n    (vars.mathErr, vars.redeemAmount) = Exp({mantissa: vars.exchangeRateMantissa}).mulScalarTruncate(redeemTokensIn);\n    if (vars.mathErr != MathError.NO_ERROR) {\n      Error.MATH_ERROR.failOpaque(FailureInfo.REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED, uint256(vars.mathErr));\n    }\n\n    /* Fail if redeem not allowed */\n    uint256 allowed = IComptroller(comptroller).redeemAllowed(address(this), redeemer, vars.redeemTokens);\n    if (allowed != 0) {\n      Error.COMPTROLLER_REJECTION.failOpaque(FailureInfo.REDEEM_COMPTROLLER_REJECTION, allowed);\n    }\n\n    /* Verify market's block number equals current block number */\n    if (accrualBlockNumber != getBlockNumber()) {\n      Error.MARKET_NOT_FRESH.fail(FailureInfo.REDEEM_FRESHNESS_CHECK);\n    }\n\n    /*\n     * We calculate the new total supply and redeemer balance, checking for underflow:\n     *  totalSupplyNew = totalSupply - redeemTokens\n     *  accountTokensNew = accountTokens[redeemer] - redeemTokens\n     */\n    (vars.mathErr, vars.totalSupplyNew) = totalSupply.subUInt(vars.redeemTokens);\n    if (vars.mathErr != MathError.NO_ERROR) {\n      Error.MATH_ERROR.failOpaque(FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED, uint256(vars.mathErr));\n    }\n\n    (vars.mathErr, vars.accountTokensNew) = accountTokens[redeemer].subUInt(vars.redeemTokens);\n    if (vars.mathErr != MathError.NO_ERROR) {\n      Error.MATH_ERROR.failOpaque(FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED, uint256(vars.mathErr));\n    }\n\n    /* Fail gracefully if protocol has insufficient cash */\n    if (isCToken && (getCashPrior() < vars.redeemAmount)) {\n      Error.TOKEN_INSUFFICIENT_CASH.fail(FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE);\n    }\n\n    /////////////////////////\n    // EFFECTS & INTERACTIONS\n    // (No safe failures beyond this point)\n\n    /* We write previously calculated values into storage */\n    totalSupply = vars.totalSupplyNew;\n    accountTokens[redeemer] = vars.accountTokensNew;\n\n    /*\n     * We invoke doTransferOut for the redeemer and the redeemAmount.\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\n     *  On success, the cToken has redeemAmount less of cash.\n     *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\n     */\n    doTransferOut(redeemer, vars.redeemAmount);\n\n    /* We emit a Transfer event, and a Redeem event */\n    emit Transfer(redeemer, address(this), vars.redeemTokens);\n    emit Redeem(redeemer, vars.redeemAmount, vars.redeemTokens);\n\n    /* We call the defense hook */\n    IComptroller(comptroller).redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  /**\n   * @notice Sender borrows assets from the protocol to their own address\n   * @param borrowAmount The amount of the underlying asset to borrow\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function borrowInternal(uint256 borrowAmount) internal nonReentrant returns (uint256) {\n    accrueInterest();\n    // borrowFresh emits borrow-specific logs on errors, so we don't need to\n    return borrowFresh(payable(msg.sender), borrowAmount);\n  }\n\n  struct BorrowLocalVars {\n    MathError mathErr;\n    uint256 accountBorrows;\n    uint256 accountBorrowsNew;\n    uint256 totalBorrowsNew;\n  }\n\n  /**\n   * @notice Users borrow assets from the protocol to their own address\n   * @param borrowAmount The amount of the underlying asset to borrow\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function borrowFresh(address payable borrower, uint256 borrowAmount) internal returns (uint256) {\n    /* Fail if borrow not allowed */\n    uint256 allowed = IComptroller(comptroller).borrowAllowed(address(this), borrower, borrowAmount);\n    if (allowed != 0) {\n      Error.COMPTROLLER_REJECTION.failOpaque(FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\n    }\n\n    /* Verify market's block number equals current block number */\n    if (accrualBlockNumber != getBlockNumber()) {\n      Error.MARKET_NOT_FRESH.fail(FailureInfo.BORROW_FRESHNESS_CHECK);\n    }\n\n    /* Fail gracefully if protocol has insufficient underlying cash */\n    if (isCToken && (getCashPrior() < borrowAmount)) {\n      Error.TOKEN_INSUFFICIENT_CASH.fail(FailureInfo.BORROW_CASH_NOT_AVAILABLE);\n    }\n\n    BorrowLocalVars memory vars;\n\n    /*\n     * We calculate the new borrower and total borrow balances, failing on overflow:\n     *  accountBorrowsNew = accountBorrows + borrowAmount\n     *  totalBorrowsNew = totalBorrows + borrowAmount\n     */\n    (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\n    if (vars.mathErr != MathError.NO_ERROR) {\n      Error.MATH_ERROR.failOpaque(FailureInfo.BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint256(vars.mathErr));\n    }\n\n    (vars.mathErr, vars.accountBorrowsNew) = vars.accountBorrows.addUInt(borrowAmount);\n    if (vars.mathErr != MathError.NO_ERROR) {\n      Error.MATH_ERROR.failOpaque(\n        FailureInfo.BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\n        uint256(vars.mathErr)\n      );\n    }\n\n    (vars.mathErr, vars.totalBorrowsNew) = totalBorrows.addUInt(borrowAmount);\n    if (vars.mathErr != MathError.NO_ERROR) {\n      Error.MATH_ERROR.failOpaque(FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED, uint256(vars.mathErr));\n    }\n\n    /////////////////////////\n    // EFFECTS & INTERACTIONS\n    // (No safe failures beyond this point)\n\n    /* We write the previously calculated values into storage */\n    accountBorrows[borrower].principal = vars.accountBorrowsNew;\n    accountBorrows[borrower].interestIndex = borrowIndex;\n    totalBorrows = vars.totalBorrowsNew;\n\n    /*\n     * We invoke doTransferOut for the borrower and the borrowAmount.\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\n     *  On success, the cToken borrowAmount less of cash.\n     *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\n     */\n    // doTransferOut(borrower, borrowAmount);\n    transferToTimelock(true, borrower, borrowAmount);\n\n    /* We emit a Borrow event */\n    emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\n\n    /* We call the defense hook */\n    // unused function\n    // comptroller.borrowVerify(address(this), borrower, borrowAmount);\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  /**\n   * @notice Sender repays their own borrow\n   * @param repayAmount The amount to repay\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\n   */\n  function repayBorrowInternal(uint256 repayAmount) internal nonReentrant returns (uint256, uint256) {\n    accrueInterest();\n    // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\n    return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\n  }\n\n  /**\n   * @notice Sender repays a borrow belonging to borrower\n   * @param borrower the account with the debt being paid off\n   * @param repayAmount The amount to repay\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\n   */\n  function repayBorrowBehalfInternal(\n    address borrower,\n    uint256 repayAmount\n  ) internal nonReentrant returns (uint256, uint256) {\n    accrueInterest();\n    // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\n    return repayBorrowFresh(msg.sender, borrower, repayAmount);\n  }\n\n  struct RepayBorrowLocalVars {\n    Error err;\n    MathError mathErr;\n    uint256 repayAmount;\n    uint256 borrowerIndex;\n    uint256 accountBorrows;\n    uint256 accountBorrowsNew;\n    uint256 totalBorrowsNew;\n    uint256 actualRepayAmount;\n  }\n\n  /**\n   * @notice Borrows are repaid by another user (possibly the borrower).\n   * @param payer the account paying off the borrow\n   * @param borrower the account with the debt being paid off\n   * @param repayAmount the amount of underlying tokens being returned\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\n   */\n  function repayBorrowFresh(address payer, address borrower, uint256 repayAmount) internal returns (uint256, uint256) {\n    /* Fail if repayBorrow not allowed */\n    uint256 allowed = IComptroller(comptroller).repayBorrowAllowed(address(this), payer, borrower, repayAmount);\n    if (allowed != 0) {\n      Error.COMPTROLLER_REJECTION.failOpaque(FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION, allowed);\n    }\n\n    /* Verify market's block number equals current block number */\n    if (accrualBlockNumber != getBlockNumber()) {\n      Error.MARKET_NOT_FRESH.fail(FailureInfo.REPAY_BORROW_FRESHNESS_CHECK);\n    }\n\n    RepayBorrowLocalVars memory vars;\n\n    /* We remember the original borrowerIndex for verification purposes */\n    vars.borrowerIndex = accountBorrows[borrower].interestIndex;\n\n    /* We fetch the amount the borrower owes, with accumulated interest */\n    (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\n    if (vars.mathErr != MathError.NO_ERROR) {\n      Error.MATH_ERROR.failOpaque(\n        FailureInfo.REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\n        uint256(vars.mathErr)\n      );\n    }\n\n    /* If repayAmount == -1, repayAmount = accountBorrows */\n    if (repayAmount == ~uint256(0)) {\n      vars.repayAmount = vars.accountBorrows;\n    } else {\n      vars.repayAmount = repayAmount;\n    }\n\n    /////////////////////////\n    // EFFECTS & INTERACTIONS\n    // (No safe failures beyond this point)\n\n    /*\n     * We call doTransferIn for the payer and the repayAmount\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\n     *  On success, the cToken holds an additional repayAmount of cash.\n     *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\n     *   it returns the amount actually transferred, in case of a fee.\n     */\n    vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\n\n    /*\n     * We calculate the new borrower and total borrow balances, failing on underflow:\n     *  accountBorrowsNew = accountBorrows - actualRepayAmount\n     *  totalBorrowsNew = totalBorrows - actualRepayAmount\n     */\n    (vars.mathErr, vars.accountBorrowsNew) = vars.accountBorrows.subUInt(vars.actualRepayAmount);\n    if (vars.mathErr != MathError.NO_ERROR) {\n      Error.MATH_ERROR.fail(FailureInfo.REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED);\n    }\n\n    (vars.mathErr, vars.totalBorrowsNew) = totalBorrows.subUInt(vars.actualRepayAmount);\n    if (vars.mathErr != MathError.NO_ERROR) {\n      Error.MATH_ERROR.fail(FailureInfo.REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED);\n    }\n\n    /* We write the previously calculated values into storage */\n    accountBorrows[borrower].principal = vars.accountBorrowsNew;\n    accountBorrows[borrower].interestIndex = borrowIndex;\n    totalBorrows = vars.totalBorrowsNew;\n\n    /* We emit a RepayBorrow event */\n    emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\n\n    /* We call the defense hook */\n    // unused function\n    // comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\n\n    return (uint256(Error.NO_ERROR), vars.actualRepayAmount);\n  }\n\n  /**\n   * @notice The sender liquidates the borrowers collateral.\n   *  The collateral seized is transferred to the liquidator.\n   * @param borrower The borrower of this cToken to be liquidated\n   * @param cTokenCollateral The market in which to seize collateral from the borrower\n   * @param repayAmount The amount of the underlying borrowed asset to repay\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\n   */\n  function liquidateBorrowInternal(\n    address borrower,\n    uint256 repayAmount,\n    address cTokenCollateral\n  ) internal nonReentrant returns (uint256, uint256) {\n    accrueInterest();\n    ICToken(cTokenCollateral).accrueInterest();\n\n    // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\n    return liquidateBorrowFresh(msg.sender, borrower, repayAmount, cTokenCollateral);\n  }\n\n  /**\n   * @notice The liquidator liquidates the borrowers collateral.\n   *  The collateral seized is transferred to the liquidator.\n   * @param borrower The borrower of this cToken to be liquidated\n   * @param liquidator The address repaying the borrow and seizing collateral\n   * @param cTokenCollateral The market in which to seize collateral from the borrower\n   * @param repayAmount The amount of the underlying borrowed asset to repay\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\n   */\n  function liquidateBorrowFresh(\n    address liquidator,\n    address borrower,\n    uint256 repayAmount,\n    address cTokenCollateral\n  ) internal returns (uint256, uint256) {\n    /* Fail if liquidate not allowed */\n    uint256 allowed = liquidateBorrowAllowed(address(cTokenCollateral), liquidator, borrower, repayAmount);\n    if (allowed != 0) {\n      Error.COMPTROLLER_REJECTION.failOpaque(FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION, allowed);\n    }\n\n    /* Verify market's block number equals current block number */\n    if (accrualBlockNumber != getBlockNumber()) {\n      Error.MARKET_NOT_FRESH.fail(FailureInfo.LIQUIDATE_FRESHNESS_CHECK);\n    }\n\n    /* Verify cTokenCollateral market's block number equals current block number */\n    if (ICToken(cTokenCollateral).accrualBlockNumber() != getBlockNumber()) {\n      Error.MARKET_NOT_FRESH.fail(FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK);\n    }\n\n    /* Fail if borrower = liquidator */\n    if (borrower == liquidator) {\n      Error.INVALID_ACCOUNT_PAIR.fail(FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER);\n    }\n\n    /* Fail if repayAmount = 0 */\n    if (repayAmount == 0) {\n      Error.INVALID_CLOSE_AMOUNT_REQUESTED.fail(FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO);\n    }\n\n    if (repayAmount == ~uint256(0)) {\n      Error.INVALID_CLOSE_AMOUNT_REQUESTED.fail(FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX);\n    }\n\n    /* Fail if repayBorrow fails */\n    (, uint256 actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount);\n\n    /////////////////////////\n    // EFFECTS & INTERACTIONS\n    // (No safe failures beyond this point)\n\n    (, uint8 repayTokenGroupId, ) = IComptroller(comptroller).markets(address(this));\n    (, uint8 seizeTokenGroupId, ) = IComptroller(comptroller).markets(cTokenCollateral);\n\n    (\n      uint256 heteroLiquidationIncentive,\n      uint256 homoLiquidationIncentive,\n      uint256 sutokenLiquidationIncentive\n    ) = IComptroller(comptroller).liquidationIncentiveMantissa();\n\n    // default is repaying heterogeneous assets\n    uint256 incentiveMantissa = heteroLiquidationIncentive;\n    if (repayTokenGroupId == seizeTokenGroupId) {\n      if (CToken(address(this)).isCToken() == false) {\n        // repaying sutoken\n        incentiveMantissa = sutokenLiquidationIncentive;\n      } else {\n        // repaying homogeneous assets\n        incentiveMantissa = homoLiquidationIncentive;\n      }\n    }\n\n    /* We calculate the number of collateral tokens that will be seized */\n    (, uint256 seizeTokens) = liquidateCalculateSeizeTokens(cTokenCollateral, actualRepayAmount, incentiveMantissa);\n\n    /* Revert if borrower collateral token balance < seizeTokens */\n    if (ICToken(cTokenCollateral).balanceOf(borrower) < seizeTokens) {\n      Error.TOKEN_ERROR.fail(FailureInfo.LIQUIDATE_SEIZE_TOO_MUCH);\n    }\n\n    // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\n    if (cTokenCollateral == address(this)) {\n      seizeInternal(address(this), liquidator, borrower, seizeTokens);\n    } else {\n      ICToken(cTokenCollateral).seize(liquidator, borrower, seizeTokens);\n    }\n\n    /* We emit a LiquidateBorrow event */\n    emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(cTokenCollateral), seizeTokens);\n\n    /* We call the defense hook */\n    // unused function\n    // comptroller.liquidateBorrowVerify(address(this), address(cTokenCollateral), liquidator, borrower, actualRepayAmount, seizeTokens);\n\n    return (uint256(Error.NO_ERROR), actualRepayAmount);\n  }\n\n  /**\n   * @notice Transfers collateral tokens (this market) to the liquidator.\n   * @dev Will fail unless called by another cToken during the process of liquidation.\n   *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\n   * @param liquidator The account receiving seized collateral\n   * @param borrower The account having collateral seized\n   * @param seizeTokens The number of cTokens to seize\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function seize(\n    address liquidator,\n    address borrower,\n    uint256 seizeTokens\n  ) external override nonReentrant returns (uint256) {\n    return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\n  }\n\n  struct SeizeInternalLocalVars {\n    MathError mathErr;\n    uint256 borrowerTokensNew;\n    uint256 liquidatorTokensNew;\n    uint256 liquidatorSeizeTokens;\n    uint256 protocolSeizeTokens;\n    uint256 protocolSeizeAmount;\n    uint256 exchangeRateMantissa;\n    uint256 totalReservesNew;\n    uint256 totalSupplyNew;\n  }\n\n  /**\n   * @notice Transfers collateral tokens (this market) to the liquidator.\n   * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\n   *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\n   * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\n   * @param liquidator The account receiving seized collateral\n   * @param borrower The account having collateral seized\n   * @param seizeTokens The number of cTokens to seize\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function seizeInternal(\n    address seizerToken,\n    address liquidator,\n    address borrower,\n    uint256 seizeTokens\n  ) internal returns (uint256) {\n    /* Fail if seize not allowed */\n    uint256 allowed = IComptroller(comptroller).seizeAllowed(\n      address(this),\n      seizerToken,\n      liquidator,\n      borrower,\n      seizeTokens\n    );\n    if (allowed != 0) {\n      Error.COMPTROLLER_REJECTION.failOpaque(FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION, allowed);\n    }\n\n    /* Fail if borrower = liquidator */\n    if (borrower == liquidator) {\n      Error.INVALID_ACCOUNT_PAIR.fail(FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);\n    }\n\n    SeizeInternalLocalVars memory vars;\n\n    /*\n     * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\n     *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\n     *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\n     */\n    (vars.mathErr, vars.borrowerTokensNew) = accountTokens[borrower].subUInt(seizeTokens);\n    if (vars.mathErr != MathError.NO_ERROR) {\n      Error.MATH_ERROR.failOpaque(FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint256(vars.mathErr));\n    }\n\n    vars.protocolSeizeTokens = seizeTokens.mul_(Exp({mantissa: protocolSeizeShareMantissa}));\n    vars.liquidatorSeizeTokens = seizeTokens.sub_(vars.protocolSeizeTokens);\n\n    (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\n    if (vars.mathErr != MathError.NO_ERROR) {\n      Error.MATH_ERROR.failOpaque(FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint256(vars.mathErr));\n    }\n\n    vars.protocolSeizeAmount = Exp({mantissa: vars.exchangeRateMantissa}).mul_ScalarTruncate(vars.protocolSeizeTokens);\n\n    vars.totalReservesNew = totalReserves.add_(vars.protocolSeizeAmount);\n    vars.totalSupplyNew = totalSupply.sub_(vars.protocolSeizeTokens);\n\n    (vars.mathErr, vars.liquidatorTokensNew) = accountTokens[liquidator].addUInt(vars.liquidatorSeizeTokens);\n    if (vars.mathErr != MathError.NO_ERROR) {\n      Error.MATH_ERROR.failOpaque(FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint256(vars.mathErr));\n    }\n\n    /////////////////////////\n    // EFFECTS & INTERACTIONS\n    // (No safe failures beyond this point)\n\n    /* We write the previously calculated values into storage */\n    totalReserves = vars.totalReservesNew;\n    totalSupply = vars.totalSupplyNew;\n    accountTokens[borrower] = vars.borrowerTokensNew;\n    accountTokens[liquidator] = vars.liquidatorTokensNew;\n\n    /* Emit a Transfer event */\n    emit Transfer(borrower, liquidator, vars.liquidatorSeizeTokens);\n    emit Transfer(borrower, address(this), vars.protocolSeizeTokens);\n    emit ReservesAdded(address(this), vars.protocolSeizeAmount, vars.totalReservesNew);\n\n    /* We call the defense hook */\n    // unused function\n    // comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\n\n    redeemAndTransferFresh(payable(liquidator), vars.liquidatorSeizeTokens);\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  /*** Admin Functions ***/\n\n  /**\n   * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n   * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n   * @param newPendingAdmin New pending admin.\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function _setPendingAdmin(address payable newPendingAdmin) external override onlyAdmin returns (uint256) {\n    // Save current value, if any, for inclusion in log\n    address oldPendingAdmin = pendingAdmin;\n\n    // Store pendingAdmin with value newPendingAdmin\n    require(newPendingAdmin != address(0), 'AIZ'); // Address is Zero\n    pendingAdmin = newPendingAdmin;\n\n    // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\n    emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  /**\n   * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\n   * @dev Admin function for pending admin to accept role and update admin\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function _acceptAdmin() external override returns (uint256) {\n    // Check caller is pendingAdmin and pendingAdmin ≠ address(0)\n    if (msg.sender != pendingAdmin || msg.sender == address(0)) {\n      Error.UNAUTHORIZED.fail(FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\n    }\n\n    // Save current values for inclusion in log\n    address oldAdmin = admin;\n    address oldPendingAdmin = pendingAdmin;\n\n    // Store admin with value pendingAdmin\n    admin = pendingAdmin;\n\n    // Clear the pending value\n    pendingAdmin = payable(0);\n\n    emit NewAdmin(oldAdmin, admin);\n    emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  /**\n   * @notice Sets a new comptroller for the market\n   * @dev Admin function to set a new comptroller\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function _setComptroller(address newComptroller) public override onlyAdmin returns (uint256) {\n    address oldComptroller = comptroller;\n    // Ensure invoke comptroller.isComptroller() returns true\n    require(IComptroller(newComptroller).isComptroller(), 'MMRF'); // market method returned false\n\n    // Set market's comptroller to newComptroller\n    comptroller = newComptroller;\n\n    // Emit NewComptroller(oldComptroller, newComptroller)\n    emit NewComptroller(oldComptroller, newComptroller);\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  /**\n   * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\n   * @dev Admin function to accrue interest and set a new reserve factor\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function _setReserveFactor(uint256 newReserveFactorMantissa) external override nonReentrant returns (uint256) {\n    accrueInterest();\n    // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\n    return _setReserveFactorFresh(newReserveFactorMantissa);\n  }\n\n  /**\n   * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\n   * @dev Admin function to set a new reserve factor\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function _setReserveFactorFresh(uint256 newReserveFactorMantissa) internal onlyAdmin returns (uint256) {\n    // Verify market's block number equals current block number\n    if (accrualBlockNumber != getBlockNumber()) {\n      Error.MARKET_NOT_FRESH.fail(FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\n    }\n\n    // Check newReserveFactor ≤ maxReserveFactor\n    if (newReserveFactorMantissa > RESERVE_FACTOR_MAX_MANTISSA) {\n      Error.BAD_INPUT.fail(FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\n    }\n\n    uint256 oldReserveFactorMantissa = reserveFactorMantissa;\n    reserveFactorMantissa = newReserveFactorMantissa;\n\n    emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  /**\n   * @notice Accrues interest and reduces reserves by transferring from msg.sender\n   * @param addAmount Amount of addition to reserves\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function _addReservesInternal(uint256 addAmount) internal nonReentrant returns (uint256) {\n    accrueInterest();\n    // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\n    (uint256 error, ) = _addReservesFresh(addAmount);\n    return error;\n  }\n\n  /**\n   * @notice Add reserves by transferring from caller\n   * @dev Requires fresh interest accrual\n   * @param addAmount Amount of addition to reserves\n   * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\n   */\n  function _addReservesFresh(uint256 addAmount) internal returns (uint256, uint256) {\n    // totalReserves + actualAddAmount\n    uint256 totalReservesNew;\n    uint256 actualAddAmount;\n\n    // We fail gracefully unless market's block number equals current block number\n    if (accrualBlockNumber != getBlockNumber()) {\n      Error.MARKET_NOT_FRESH.fail(FailureInfo.ADD_RESERVES_FRESH_CHECK);\n    }\n\n    /////////////////////////\n    // EFFECTS & INTERACTIONS\n    // (No safe failures beyond this point)\n\n    /*\n     * We call doTransferIn for the caller and the addAmount\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\n     *  On success, the cToken holds an additional addAmount of cash.\n     *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\n     *  it returns the amount actually transferred, in case of a fee.\n     */\n\n    actualAddAmount = doTransferIn(msg.sender, addAmount);\n\n    totalReservesNew = totalReserves + actualAddAmount;\n\n    /* Revert on overflow */\n    if (totalReservesNew < totalReserves) {\n      Error.MATH_ERROR.fail(FailureInfo.ADD_RESERVES_UNEXPECTED_OVERFLOW);\n    }\n\n    // Store reserves[n+1] = reserves[n] + actualAddAmount\n    totalReserves = totalReservesNew;\n\n    /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\n    emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\n\n    /* Return (NO_ERROR, actualAddAmount) */\n    return (uint256(Error.NO_ERROR), actualAddAmount);\n  }\n\n  /**\n   * @notice Accrues interest and reduces reserves by transferring to admin\n   * @param reduceAmount Amount of reduction to reserves\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function _reduceReserves(uint256 reduceAmount) external override nonReentrant returns (uint256) {\n    accrueInterest();\n    // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\n    return _reduceReservesFresh(reduceAmount);\n  }\n\n  /**\n   * @notice Reduces reserves by transferring to admin\n   * @dev Requires fresh interest accrual\n   * @param reduceAmount Amount of reduction to reserves\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function _reduceReservesFresh(uint256 reduceAmount) internal onlyAdmin returns (uint256) {\n    // totalReserves - reduceAmount\n    uint256 totalReservesNew;\n\n    // We fail gracefully unless market's block number equals current block number\n    if (accrualBlockNumber != getBlockNumber()) {\n      Error.MARKET_NOT_FRESH.fail(FailureInfo.REDUCE_RESERVES_FRESH_CHECK);\n    }\n\n    // Fail gracefully if protocol has insufficient underlying cash\n    if (getCashPrior() < reduceAmount) {\n      Error.TOKEN_INSUFFICIENT_CASH.fail(FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);\n    }\n\n    // Check reduceAmount ≤ reserves[n] (totalReserves)\n    if (reduceAmount > totalReserves) {\n      Error.BAD_INPUT.fail(FailureInfo.REDUCE_RESERVES_VALIDATION);\n    }\n\n    /////////////////////////\n    // EFFECTS & INTERACTIONS\n    // (No safe failures beyond this point)\n\n    totalReservesNew = totalReserves - reduceAmount;\n    // We checked reduceAmount <= totalReserves above, so this should never revert.\n    if (totalReservesNew < totalReserves) {\n      Error.MATH_ERROR.fail(FailureInfo.ADD_RESERVES_UNEXPECTED_OVERFLOW);\n    }\n\n    // Store reserves[n+1] = reserves[n] - reduceAmount\n    totalReserves = totalReservesNew;\n\n    // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\n    doTransferOut(admin, reduceAmount);\n\n    emit ReservesReduced(admin, reduceAmount, totalReservesNew);\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  /**\n   * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\n   * @dev Admin function to accrue interest and update the interest rate model\n   * @param newInterestRateModel the new interest rate model to use\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function _setInterestRateModel(address newInterestRateModel) public override returns (uint256) {\n    accrueInterest();\n    // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\n    return _setInterestRateModelFresh(newInterestRateModel);\n  }\n\n  /**\n   * @notice updates the interest rate model (*requires fresh interest accrual)\n   * @dev Admin function to update the interest rate model\n   * @param newInterestRateModel the new interest rate model to use\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function _setInterestRateModelFresh(address newInterestRateModel) internal onlyAdmin returns (uint256) {\n    // Used to store old model for use in the event that is emitted on success\n    address oldInterestRateModel;\n    // We fail gracefully unless market's block number equals current block number\n    if (accrualBlockNumber != getBlockNumber()) {\n      Error.MARKET_NOT_FRESH.fail(FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\n    }\n\n    // Track the market's current interest rate model\n    oldInterestRateModel = interestRateModel;\n\n    // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\n    require(IInterestRateModel(interestRateModel).isInterestRateModel(), 'MMRF'); // market method returned false\n\n    // Set the interest rate model to newInterestRateModel\n    interestRateModel = newInterestRateModel;\n\n    // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\n    emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  function _syncUnderlyingBalance() external onlyAdmin {\n    underlyingBalance = ICToken(underlying).balanceOf(address(this));\n  }\n\n  /*** Safe Token ***/\n\n  /**\n   * @notice Gets balance of this contract in terms of the underlying\n   * @dev This excludes the value of the current message, if any\n   * @return The quantity of underlying owned by this contract\n   */\n  function getCashPrior() internal view virtual returns (uint256);\n\n  /**\n   * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\n   *  This may revert due to insufficient balance or insufficient allowance.\n   */\n  function doTransferIn(address from, uint256 amount) internal virtual returns (uint256);\n\n  /**\n   * @dev Performs a transfer out, ideally returning an explanatory error code upon failure rather than reverting.\n   *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\n   *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\n   */\n  function doTransferOut(address payable to, uint256 amount) internal virtual;\n\n  function transferToTimelock(bool isBorrow, address to, uint256 amount) internal virtual;\n\n  /*** Reentrancy Guard ***/\n\n  /**\n   * @dev Prevents a contract from calling itself, directly or indirectly.\n   */\n  modifier nonReentrant() {\n    require(_notEntered, 'RE'); // re-entered\n    _notEntered = false;\n    _;\n    _notEntered = true; // get a gas-refund post-Istanbul\n  }\n\n  /**\n   * @notice Returns true if the given cToken market has been deprecated\n   * @dev All borrows in a deprecated cToken market can be immediately liquidated\n   */\n  function isDeprecated() public view returns (bool) {\n    return\n      IComptroller(comptroller).marketGroupId(address(this)) == 0 &&\n      //borrowGuardianPaused[cToken] == true &&\n      IComptroller(comptroller)._getBorrowPaused(address(this)) &&\n      reserveFactorMantissa == 1e18;\n  }\n\n  /**\n   * @notice Checks if the liquidation should be allowed to occur\n   * @param cTokenCollateral Asset which was used as collateral and will be seized\n   * @param liquidator The address repaying the borrow and seizing the collateral\n   * @param borrower The address of the borrower\n   * @param repayAmount The amount of underlying being repaid\n   */\n  function liquidateBorrowAllowed(\n    address cTokenCollateral,\n    address liquidator,\n    address borrower,\n    uint256 repayAmount\n  ) public view returns (uint256) {\n    // Shh - currently unused: \n    liquidator;\n    if (!IComptroller(comptroller).isListed(address(this)) || !IComptroller(comptroller).isListed(cTokenCollateral)) {\n      Error.MARKET_NOT_LISTED.fail(FailureInfo.MARKET_NOT_LISTED);\n    }\n\n    (, uint256 borrowBalance) = borrowBalanceStoredInternal(borrower);\n\n    /* allow accounts to be liquidated if the market is deprecated */\n    if (isDeprecated()) {\n      if (borrowBalance < repayAmount) {\n        Error.TOKEN_ERROR.fail(FailureInfo.TOO_MUCH_REPAY);\n      }\n    } else {\n      /* The borrower must have shortfall in order to be liquidatable */\n      (, , uint256 shortfall) = IComptroller(comptroller).getHypotheticalAccountLiquidity(\n        borrower,\n        address(this),\n        0,\n        0\n      );\n\n      if (shortfall <= 0) {\n        Error.TOKEN_ERROR.fail(FailureInfo.INSUFFICIENT_SHORTFALL);\n      }\n\n      /* The liquidator may not repay more than what is allowed by the closeFactor */\n      uint256 maxClose = Exp({mantissa: IComptroller(comptroller).closeFactorMantissa()}).mul_ScalarTruncate(\n        borrowBalance\n      );\n      if (repayAmount > maxClose) {\n        Error.TOKEN_ERROR.fail(FailureInfo.TOO_MUCH_REPAY);\n      }\n    }\n    return uint256(0);\n  }\n\n  /**\n   * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\n   * @dev Used in liquidation (called in ICToken(cToken).liquidateBorrowFresh)\n   * @param cTokenCollateral The address of the collateral cToken\n   * @param actualRepayAmount The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\n   * @return (errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\n   */\n  function liquidateCalculateSeizeTokens(\n    address cTokenCollateral,\n    uint256 actualRepayAmount,\n    uint256 liquidationIncentiveMantissa\n  ) public view returns (uint256, uint256) {\n    /* Read oracle prices for borrowed and collateral markets */\n    address oracle = IComptroller(comptroller).oracle();\n    uint256 priceBorrowedMantissa = IPriceOracle(oracle).getUnderlyingPrice(address(address(this)));\n    uint256 priceCollateralMantissa = IPriceOracle(oracle).getUnderlyingPrice(address(cTokenCollateral));\n    if (priceBorrowedMantissa <= 0 || priceCollateralMantissa <= 0) {\n      Error.TOKEN_ERROR.fail(FailureInfo.PRICE_ERROR);\n    }\n    /*\n     * Get the exchange rate and calculate the number of collateral tokens to seize:\n     *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral\n     *  seizeTokens = seizeAmount / exchangeRate\n     *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\n     */\n    uint256 exchangeRateMantissa = ICToken(cTokenCollateral).exchangeRateStored(); // Note: reverts on error\n    uint256 seizeTokens;\n    Exp memory numerator;\n    Exp memory denominator;\n    Exp memory ratio;\n\n    numerator = Exp({mantissa: liquidationIncentiveMantissa}).mul_(Exp({mantissa: priceBorrowedMantissa}));\n    denominator = Exp({mantissa: priceCollateralMantissa}).mul_(Exp({mantissa: exchangeRateMantissa}));\n    ratio = numerator.div_(denominator);\n\n    seizeTokens = ratio.mul_ScalarTruncate(actualRepayAmount);\n\n    return (uint256(0), seizeTokens);\n  }\n\n  function getAccountBorrows(address account) public view returns (uint256 principal, uint256 interestIndex) {\n    BorrowSnapshot memory accountBorrow = accountBorrows[account];\n    principal = accountBorrow.principal;\n    interestIndex = accountBorrow.interestIndex;\n  }\n\n  function getDiscountRate() public view returns (uint256) {\n    return discountRateMantissa;\n  }\n\n  function _setDiscountRate(uint256 discountRateMantissa_) external returns (uint256) {\n    require(msg.sender == admin, 'UNAUTHORIZED');\n    uint256 oldDiscountRateMantissa_ = discountRateMantissa;\n    discountRateMantissa = discountRateMantissa_;\n    emit NewDiscountRate(oldDiscountRateMantissa_, discountRateMantissa_);\n    return discountRateMantissa;\n  }\n}\n"
    },
    "contracts/CToken/CTokenStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\nimport './Interfaces/ICToken.sol';\n\nabstract contract CTokenStorage is ICToken {\n  bool public isCToken;\n  bool public isCEther;\n  /// @dev Guard variable for re-entrancy checks\n  bool internal _notEntered;\n\n  /// @notice Underlying asset for this CToken\n  address public underlying;\n\n  /// @notice EIP-20 token name for this token\n  string public name;\n\n  /// @notice EIP-20 token symbol for this token\n  string public symbol;\n\n  /// @notice EIP-20 token decimals for this token\n  uint8 public decimals;\n\n  /// @dev Maximum borrow rate that can ever be applied (.0005% / block)\n  uint256 internal constant BORROW_RATE_MAX_MANTISSA = 0.0005e16;\n\n  /// @dev Maximum fraction of interest that can be set aside for reserves\n  uint256 internal constant RESERVE_FACTOR_MAX_MANTISSA = 1e18;\n\n  /// @notice Administrator for this contract\n  address payable public admin;\n\n  /// @notice Pending administrator for this contract\n  address payable public pendingAdmin;\n\n  /// @notice Contract which oversees inter-cToken operations\n  address public comptroller;\n\n  /// @notice Model which tells what the current interest rate should be\n  address public interestRateModel;\n\n  /// @dev Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\n  uint256 internal initialExchangeRateMantissa;\n\n  /// @notice Fraction of interest currently set aside for reserves\n  uint256 public reserveFactorMantissa;\n\n  /// @notice Block number that interest was last accrued at\n  uint256 public override accrualBlockNumber;\n\n  /// @notice Accumulator of the total earned interest rate since the opening of the market\n  uint256 public borrowIndex;\n\n  /// @notice Total amount of outstanding borrows of the underlying in this market\n  uint256 public totalBorrows;\n\n  /// @notice Total amount of reserves of the underlying held in this market\n  uint256 public totalReserves;\n\n  /// @notice Total number of tokens in circulation\n  uint256 public override totalSupply;\n\n  /// @dev Official record of token balances for each account\n  mapping(address => uint256) internal accountTokens;\n\n  /// @dev Approved token transfer amounts on behalf of others\n  mapping(address => mapping(address => uint256)) internal transferAllowances;\n\n  /// @notice Container for borrow balance information\n  /// @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\n  /// @member interestIndex Global borrowIndex as of the most recent balance-changing action\n  struct BorrowSnapshot {\n    uint256 principal;\n    uint256 interestIndex;\n  }\n\n  /// @dev Mapping of account addresses to outstanding borrow balances\n  mapping(address => BorrowSnapshot) internal accountBorrows;\n\n  /// @notice Share of seized collateral that is added to reserves\n  uint256 public constant protocolSeizeShareMantissa = 2.8e16; //2.8%\n\n  uint256 public discountRateMantissa = 1e18;\n\n  uint256 public underlyingBalance;\n}\n"
    },
    "contracts/CToken/Interfaces/ICErc20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ninterface ICErc20 {\n  /*** User Interface ***/\n\n  function mint(uint256 mintAmount) external returns (uint256);\n\n  function redeem(uint256 redeemTokens) external returns (uint256);\n\n  function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n\n  function borrow(uint256 borrowAmount) external returns (uint256);\n\n  function repayBorrow(uint256 repayAmount) external returns (uint256);\n\n  function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\n\n  function liquidateBorrow(\n    address borrower,\n    uint256 repayAmount,\n    address cTokenCollateral\n  ) external returns (uint256);\n\n  function sweepToken(address token) external;\n\n  /*** Admin Functions ***/\n\n  function _addReserves(uint256 addAmount) external returns (uint256);\n}\n"
    },
    "contracts/CToken/Interfaces/ICToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ninterface ICToken {\n  /*** Market Events ***/\n\n  /**\n   * @notice Event emitted when interest is accrued\n   */\n  event AccrueInterest(uint256 cashPrior, uint256 interestAccumulated, uint256 borrowIndex, uint256 totalBorrows);\n\n  /**\n   * @notice Event emitted when tokens are minted\n   */\n  event Mint(address minter, uint256 mintAmount, uint256 mintTokens);\n\n  /**\n   * @notice Event emitted when tokens are redeemed\n   */\n  event Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\n\n  /**\n   * @notice Event emitted when underlying is borrowed\n   */\n  event Borrow(address borrower, uint256 borrowAmount, uint256 accountBorrows, uint256 totalBorrows);\n\n  /**\n   * @notice Event emitted when a borrow is repaid\n   */\n  event RepayBorrow(address payer, address borrower, uint256 repayAmount, uint256 accountBorrows, uint256 totalBorrows);\n\n  /**\n   * @notice Event emitted when a borrow is liquidated\n   */\n  event LiquidateBorrow(\n    address liquidator,\n    address borrower,\n    uint256 repayAmount,\n    address cTokenCollateral,\n    uint256 seizeTokens\n  );\n\n  /*** Admin Events ***/\n\n  /**\n   * @notice Event emitted when pendingAdmin is changed\n   */\n  event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\n\n  /**\n   * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\n   */\n  event NewAdmin(address oldAdmin, address newAdmin);\n\n  /**\n   * @notice Event emitted when comptroller is changed\n   */\n  event NewComptroller(address oldComptroller, address newComptroller);\n\n  /**\n   * @notice Event emitted when interestRateModel is changed\n   */\n  event NewMarketInterestRateModel(address oldInterestRateModel, address newInterestRateModel);\n\n  /**\n   * @notice Event emitted when the reserve factor is changed\n   */\n  event NewReserveFactor(uint256 oldReserveFactorMantissa, uint256 newReserveFactorMantissa);\n\n  /**\n   * @notice Event emitted when the reserves are added\n   */\n  event ReservesAdded(address benefactor, uint256 addAmount, uint256 newTotalReserves);\n\n  /**\n   * @notice Event emitted when the reserves are reduced\n   */\n  event ReservesReduced(address admin, uint256 reduceAmount, uint256 newTotalReserves);\n\n  /**\n   * @notice EIP20 Transfer event\n   */\n  event Transfer(address indexed from, address indexed to, uint256 amount);\n\n  /**\n   * @notice EIP20 Approval event\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n\n  event NewDiscountRate(uint256 oldDiscountRateMantissa, uint256 newDiscountRateMantissa);\n\n  /*** User Interface ***/\n\n  function transfer(address dst, uint256 amount) external returns (bool);\n\n  function transferFrom(\n    address src,\n    address dst,\n    uint256 amount\n  ) external returns (bool);\n\n  function approve(address spender, uint256 amount) external returns (bool);\n\n  function allowance(address owner, address spender) external view returns (uint256);\n\n  function balanceOf(address owner) external view returns (uint256);\n\n  function totalSupply() external view returns (uint256);\n\n  function balanceOfUnderlying(address owner) external returns (uint256);\n\n  function getAccountSnapshot(address account)\n    external\n    view\n    returns (\n      uint256,\n      uint256,\n      uint256,\n      uint256\n    );\n\n  function borrowRatePerBlock() external view returns (uint256);\n\n  function supplyRatePerBlock() external view returns (uint256);\n\n  function totalBorrowsCurrent() external returns (uint256);\n\n  function borrowBalanceCurrent(address account) external returns (uint256);\n\n  function borrowBalanceStored(address account) external view returns (uint256);\n\n  function exchangeRateCurrent() external returns (uint256);\n\n  function exchangeRateStored() external view returns (uint256);\n\n  function getCash() external view returns (uint256);\n\n  function accrueInterest() external returns (uint256);\n\n  function accrualBlockNumber() external returns (uint256);\n\n  function seize(\n    address liquidator,\n    address borrower,\n    uint256 seizeTokens\n  ) external returns (uint256);\n\n  /*** Admin Functions ***/\n\n  function _setPendingAdmin(address payable newPendingAdmin) external returns (uint256);\n\n  function _acceptAdmin() external returns (uint256);\n\n  function _setComptroller(address newComptroller) external returns (uint256);\n\n  function _setReserveFactor(uint256 newReserveFactorMantissa) external returns (uint256);\n\n  function _reduceReserves(uint256 reduceAmount) external returns (uint256);\n\n  function _setInterestRateModel(address newInterestRateModel) external returns (uint256);\n\n  function getDiscountRate() external view returns (uint256);\n\n  function _setDiscountRate(uint256 discountRateMantissa) external returns (uint256);\n}\n"
    },
    "contracts/CToken/Interfaces/IEIP20NonStandard.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\n/**\n * @title EIP20NonStandardInterface\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\n */\ninterface IEIP20NonStandard {\n  /**\n   * @notice Get the total number of tokens in circulation\n   * @return The supply of tokens\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @notice Gets the balance of the specified address\n   * @param owner The address from which the balance will be retrieved\n   * @return balance The balance\n   */\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  ///\n  /// !!!!!!!!!!!!!!\n  /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\n  /// !!!!!!!!!!!!!!\n  ///\n\n  /**\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n   * @param dst The address of the destination account\n   * @param amount The number of tokens to transfer\n   */\n  function transfer(address dst, uint256 amount) external;\n\n  ///\n  /// !!!!!!!!!!!!!!\n  /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\n  /// !!!!!!!!!!!!!!\n  ///\n\n  /**\n   * @notice Transfer `amount` tokens from `src` to `dst`\n   * @param src The address of the source account\n   * @param dst The address of the destination account\n   * @param amount The number of tokens to transfer\n   */\n  function transferFrom(\n    address src,\n    address dst,\n    uint256 amount\n  ) external;\n\n  /**\n   * @notice Approve `spender` to transfer up to `amount` from `src`\n   * @dev This will overwrite the approval amount for `spender`\n   *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n   * @param spender The address of the account which may transfer tokens\n   * @param amount The number of tokens that are approved\n   * @return success Whether or not the approval succeeded\n   */\n  function approve(address spender, uint256 amount) external returns (bool success);\n\n  /**\n   * @notice Get the current allowance from `owner` for `spender`\n   * @param owner The address of the account which owns the tokens to be spent\n   * @param spender The address of the account which may transfer tokens\n   * @return remaining The number of tokens allowed to be spent\n   */\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n  /**\n   * @dev Creates `amount` new tokens for `to`.\n   * See {ERC20-_mint}.\n   * Requirements:\n   * - the caller must have the `MINTER_ROLE`.\n   */\n  function mint(address to, uint256 amount) external;\n\n  /**\n   * @dev Destroys `amount` tokens from the caller.\n   * See {ERC20-_burn}.\n   */\n  function burn(uint256 amount) external;\n\n  /**\n   * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n   * allowance.\n   * See {ERC20-_burn} and {ERC20-allowance}.\n   * Requirements:\n   * - the caller must have allowance for ``accounts``'s tokens of at least\n   * `amount`.\n   */\n  function burnFrom(address account, uint256 amount) external;\n\n  event Transfer(address indexed from, address indexed to, uint256 amount);\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\n}\n"
    },
    "contracts/CToken/Interfaces/IInterestRateModel.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\n/**\n * @title Compound's InterestRateModel Interface\n * @author Compound\n */\ninterface IInterestRateModel {\n  function isInterestRateModel() external view returns (bool);\n\n  /**\n   * @notice Calculates the current borrow interest rate per block\n   * @param cash The total amount of cash the market has\n   * @param borrows The total amount of borrows the market has outstanding\n   * @param reserves The total amount of reserves the market has\n   * @return The borrow rate per block (as a percentage, and scaled by 1e18)\n   */\n  function getBorrowRate(\n    uint256 cash,\n    uint256 borrows,\n    uint256 reserves\n  ) external view returns (uint256);\n\n  /**\n   * @notice Calculates the current supply interest rate per block\n   * @param cash The total amount of cash the market has\n   * @param borrows The total amount of borrows the market has outstanding\n   * @param reserves The total amount of reserves the market has\n   * @param reserveFactorMantissa The current reserve factor the market has\n   * @return The supply rate per block (as a percentage, and scaled by 1e18)\n   */\n  function getSupplyRate(\n    uint256 cash,\n    uint256 borrows,\n    uint256 reserves,\n    uint256 reserveFactorMantissa\n  ) external view returns (uint256);\n}\n"
    },
    "contracts/CToken/suErc20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\nimport './Interfaces/IEIP20NonStandard.sol';\nimport './CErc20.sol';\n\n/**\n * @title Compound's suErc20 Contract\n * @notice CTokens which wrap an EIP-20 underlying\n * @author Compound\n */\ncontract suErc20 is CErc20 {\n  /**\n   * @notice Gets balance of this contract in terms of the underlying\n   * @dev This excludes the value of the current message, if any\n   * @return The quantity of underlying tokens owned by this contract\n   */\n  function getCashPrior() internal view virtual override returns (uint256) {\n    // ICToken token = ICToken(underlying);\n    // return token.balanceOf(address(this));\n    return underlyingBalance;\n  }\n\n  /**\n   * @dev Similar to EIP20 transfer, except it handles a False result from `transferFrom` and reverts in that case.\n   *      This will revert due to insufficient balance or insufficient allowance.\n   *      This function returns the actual amount received,\n   *      which may be less than `amount` if there is a fee attached to the transfer.\n   *\n   *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\n   *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\n   */\n  function doTransferIn(address from, uint256 amount) internal override returns (uint256) {\n    IEIP20NonStandard token = IEIP20NonStandard(underlying);\n    token.burnFrom(from, amount);\n\n    bool success;\n    assembly {\n      switch returndatasize()\n      case 0 {\n        // This is a non-standard ERC-20\n        success := not(0) // set success to true\n      }\n      case 32 {\n        // This is a compliant ERC-20\n        returndatacopy(0, 0, 32)\n        success := mload(0) // Set `success = returndata` of external call\n      }\n      default {\n        // This is an excessively non-compliant ERC-20, revert.\n        revert(0, 0)\n      }\n    }\n    require(success, 'TOKEN_TRANSFER_IN_FAILED');\n\n    // Calculate the amount that was *actually* transferred\n    return amount;\n  }\n\n  /**\n   * @dev Similar to EIP20 transfer, except it handles a False success from `transfer` and returns an explanatory\n   *      error code rather than reverting. If caller has not called checked protocol's balance, this may revert due to\n   *      insufficient cash held in this contract. If caller has checked protocol's balance prior to this call, and verified\n   *      it is >= amount, this should not revert in normal conditions.\n   *\n   *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\n   *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\n   */\n  function doTransferOut(address payable to, uint256 amount) internal override {\n    IEIP20NonStandard token = IEIP20NonStandard(underlying);\n    token.mint(to, amount);\n\n    bool success;\n    assembly {\n      switch returndatasize()\n      case 0 {\n        // This is a non-standard ERC-20\n        success := not(0) // set success to true\n      }\n      case 32 {\n        // This is a compliant ERC-20\n        returndatacopy(0, 0, 32)\n        success := mload(0) // Set `success = returndata` of external call\n      }\n      default {\n        // This is an excessively non-compliant ERC-20, revert.\n        revert(0, 0)\n      }\n    }\n    require(success, 'TOKEN_TRANSFER_OUT_FAILED');\n  }\n\n  function changeCtoken() public onlyAdmin {\n    isCToken = !isCToken;\n  }\n}\n"
    },
    "contracts/CToken/Test.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport './TokenErrorReporter.sol';\n\ncontract ErrorTest {\n  using TokenErrorReporter for Error;\n\n  function test(uint256 err, uint256 info, uint256 num) external pure {\n    Error(err).failOpaque(FailureInfo(info), num);\n  }\n\n  function test(uint256 err, uint256 info) external pure {\n    Error(err).fail(FailureInfo(info));\n  }\n}\n"
    },
    "contracts/CToken/TokenErrorReporter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nenum Error {\n    NO_ERROR,\n    UNAUTHORIZED,\n    BAD_INPUT,\n    COMPTROLLER_REJECTION,\n    COMPTROLLER_CALCULATION_ERROR,\n    INTEREST_RATE_MODEL_ERROR,\n    INVALID_ACCOUNT_PAIR,\n    INVALID_CLOSE_AMOUNT_REQUESTED,\n    INVALID_COLLATERAL_FACTOR,\n    MATH_ERROR,\n    MARKET_NOT_FRESH,\n    MARKET_NOT_LISTED,\n    TOKEN_INSUFFICIENT_ALLOWANCE,\n    TOKEN_INSUFFICIENT_BALANCE,\n    TOKEN_INSUFFICIENT_CASH,\n    TOKEN_TRANSFER_IN_FAILED,\n    TOKEN_TRANSFER_OUT_FAILED,\n    TOKEN_ERROR\n}\n\n/*\n * Note: FailureInfo (but not Error) is kept in alphabetical order\n *       This is because FailureInfo grows significantly faster, and\n *       the order of Error has some meaning, while the order of FailureInfo\n *       is entirely arbitrary.\n */\nenum FailureInfo {\n    ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\n    ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\n    ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\n    ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\n    ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\n    ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\n    ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\n    BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\n    BORROW_ACCRUE_INTEREST_FAILED,\n    BORROW_CASH_NOT_AVAILABLE,\n    BORROW_FRESHNESS_CHECK,\n    BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\n    BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\n    BORROW_MARKET_NOT_LISTED,\n    BORROW_COMPTROLLER_REJECTION,\n    LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\n    LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\n    LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\n    LIQUIDATE_COMPTROLLER_REJECTION,\n    LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\n    LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\n    LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\n    LIQUIDATE_FRESHNESS_CHECK,\n    LIQUIDATE_LIQUIDATOR_IS_BORROWER,\n    LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\n    LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\n    LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\n    LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\n    LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\n    LIQUIDATE_SEIZE_TOO_MUCH,\n    MINT_ACCRUE_INTEREST_FAILED,\n    MINT_COMPTROLLER_REJECTION,\n    MINT_EXCHANGE_CALCULATION_FAILED,\n    MINT_EXCHANGE_RATE_READ_FAILED,\n    MINT_FRESHNESS_CHECK,\n    MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\n    MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\n    MINT_TRANSFER_IN_FAILED,\n    MINT_TRANSFER_IN_NOT_POSSIBLE,\n    REDEEM_ACCRUE_INTEREST_FAILED,\n    REDEEM_COMPTROLLER_REJECTION,\n    REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\n    REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\n    REDEEM_EXCHANGE_RATE_READ_FAILED,\n    REDEEM_FRESHNESS_CHECK,\n    REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\n    REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\n    REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\n    REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\n    REDUCE_RESERVES_ADMIN_CHECK,\n    REDUCE_RESERVES_CASH_NOT_AVAILABLE,\n    REDUCE_RESERVES_FRESH_CHECK,\n    REDUCE_RESERVES_VALIDATION,\n    REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\n    REPAY_BORROW_ACCRUE_INTEREST_FAILED,\n    REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\n    REPAY_BORROW_COMPTROLLER_REJECTION,\n    REPAY_BORROW_FRESHNESS_CHECK,\n    REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\n    REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\n    REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\n    SET_COLLATERAL_FACTOR_OWNER_CHECK,\n    SET_COLLATERAL_FACTOR_VALIDATION,\n    SET_COMPTROLLER_OWNER_CHECK,\n    SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\n    SET_INTEREST_RATE_MODEL_FRESH_CHECK,\n    SET_INTEREST_RATE_MODEL_OWNER_CHECK,\n    SET_MAX_ASSETS_OWNER_CHECK,\n    SET_ORACLE_MARKET_NOT_LISTED,\n    SET_PENDING_ADMIN_OWNER_CHECK,\n    SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\n    SET_RESERVE_FACTOR_ADMIN_CHECK,\n    SET_RESERVE_FACTOR_FRESH_CHECK,\n    SET_RESERVE_FACTOR_BOUNDS_CHECK,\n    TRANSFER_COMPTROLLER_REJECTION,\n    TRANSFER_NOT_ALLOWED,\n    TRANSFER_NOT_ENOUGH,\n    TRANSFER_TOO_MUCH,\n    ADD_RESERVES_ACCRUE_INTEREST_FAILED,\n    ADD_RESERVES_FRESH_CHECK,\n    ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE,\n    BALANCE_COULD_NOT_BE_CALCULATED,\n    ACCRUE_INTEREST_FAILED, // accrue interest failed\n    BORROW_BALANCE_STORED_INTERNAL_FAILED, // borrowBalanceStored: borrowBalanceStoredInternal failed\n    EXCHANGE_RATE_STORED_INTERNAL_FAILED,\n    BORROW_RATE_ABSURDLY_HIGH,\n    COULD_NOT_CACULATE_BLOCK_DELTA,\n    ONE_OF_REDEEM_TOKENS_IN_OR_REDEEM_AMOUNT_IN_MUST_BE_ZERO,\n    PRICE_ERROR,\n    ADD_RESERVES_UNEXPECTED_OVERFLOW,\n    MARKET_NOT_LISTED,\n    TOO_MUCH_REPAY,\n    INSUFFICIENT_SHORTFALL\n}\n\nlibrary TokenErrorReporter {\n    /**\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\n     **/\n    event Failure(uint256 error, uint256 info, uint256 detail);\n\n    error TokenError(uint256 errorCode, uint256 infoCode, uint256 detailCode);\n\n    /**\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\n     */\n    function fail(Error err, FailureInfo info) internal pure returns (uint256) {\n        // emit Failure(uint256(err), uint256(info), 0);\n        revert TokenError(uint256(err), uint256(info), 0);\n        // return uint256(err);\n    }\n\n    /**\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\n     */\n    function failOpaque(\n        Error err,\n        FailureInfo info,\n        uint256 opaqueError\n    ) internal pure returns (uint256) {\n        // emit Failure(uint256(err), uint256(info), opaqueError);\n        revert TokenError(uint256(err), uint256(info), opaqueError);\n        // return uint256(err);\n    }\n}\n"
    },
    "contracts/ERC20/ERC20MinterBurnerPauser.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport '@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol';\n\n/**\n * @dev {ERC20} token, including:\n *\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *  - a pauser role that allows to stop all token transfers\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to aother accounts\n */\ncontract ERC20MinterBurnerPauser is ERC20PresetMinterPauser {\n  constructor(\n    string memory _name,\n    string memory _symbol,\n    uint256 initialSupply\n  ) ERC20PresetMinterPauser(_name, _symbol) {\n    _mint(_msgSender(), initialSupply);\n  }\n}\n"
    },
    "contracts/Exponential/CarefulMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\n/**\n * @dev Possible error codes that we can return\n */\nenum MathError {\n  NO_ERROR,\n  DIVISION_BY_ZERO,\n  INTEGER_OVERFLOW,\n  INTEGER_UNDERFLOW\n}\n\n/**\n * @title Careful Math\n * @author Compound\n * @notice Derived from OpenZeppelin's SafeMath library\n *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n */\nlibrary CarefulMath {\n  /**\n   * @dev Multiplies two numbers, returns an error on overflow.\n   */\n  function mulUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\n    if (a == 0) {\n      return (MathError.NO_ERROR, 0);\n    }\n\n    uint256 c = a * b;\n\n    if (c / a != b) {\n      return (MathError.INTEGER_OVERFLOW, 0);\n    } else {\n      return (MathError.NO_ERROR, c);\n    }\n  }\n\n  /**\n   * @dev Integer division of two numbers, truncating the quotient.\n   */\n  function divUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\n    if (b == 0) {\n      return (MathError.DIVISION_BY_ZERO, 0);\n    }\n\n    return (MathError.NO_ERROR, a / b);\n  }\n\n  /**\n   * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\n   */\n  function subUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\n    if (b <= a) {\n      return (MathError.NO_ERROR, a - b);\n    } else {\n      return (MathError.INTEGER_UNDERFLOW, 0);\n    }\n  }\n\n  /**\n   * @dev Adds two numbers, returns an error on overflow.\n   */\n  function addUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\n    uint256 c = a + b;\n\n    if (c >= a) {\n      return (MathError.NO_ERROR, c);\n    } else {\n      return (MathError.INTEGER_OVERFLOW, 0);\n    }\n  }\n\n  /**\n   * @dev add a and b and then subtract c\n   */\n  function addThenSubUInt(\n    uint256 a,\n    uint256 b,\n    uint256 c\n  ) internal pure returns (MathError, uint256) {\n    (MathError err0, uint256 sum) = addUInt(a, b);\n\n    if (err0 != MathError.NO_ERROR) {\n      return (err0, 0);\n    }\n\n    return subUInt(sum, c);\n  }\n}\n"
    },
    "contracts/Exponential/Exponential.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport '../Exponential/ExponentialNoError.sol';\nimport './CarefulMath.sol';\n\n/**\n * @title Exponential module for storing fixed-precision decimals\n * @author Compound\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\n *         `Exp({mantissa: 5100000000000000000})`.\n */\nlibrary Exponential {\n  uint256 constant expScale = 1e18;\n  uint256 constant halfExpScale = expScale / 2;\n  using CarefulMath for uint256;\n  using ExponentialNoError for Exp;\n\n  /**\n   * @dev Creates an exponential from numerator and denominator values.\n   *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\n   *            or if `denom` is zero.\n   */\n  function getExp(uint256 num, uint256 denom) internal pure returns (MathError, Exp memory) {\n    (MathError err0, uint256 scaledNumerator) = num.mulUInt(expScale);\n    if (err0 != MathError.NO_ERROR) {\n      return (err0, Exp({mantissa: 0}));\n    }\n\n    (MathError err1, uint256 rational) = scaledNumerator.divUInt(denom);\n    if (err1 != MathError.NO_ERROR) {\n      return (err1, Exp({mantissa: 0}));\n    }\n\n    return (MathError.NO_ERROR, Exp({mantissa: rational}));\n  }\n\n  /**\n   * @dev Adds two exponentials, returning a new exponential.\n   */\n  function addExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\n    (MathError error, uint256 result) = a.mantissa.addUInt(b.mantissa);\n\n    return (error, Exp({mantissa: result}));\n  }\n\n  /**\n   * @dev Subtracts two exponentials, returning a new exponential.\n   */\n  function subExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\n    (MathError error, uint256 result) = a.mantissa.subUInt(b.mantissa);\n\n    return (error, Exp({mantissa: result}));\n  }\n\n  /**\n   * @dev Multiply an Exp by a scalar, returning a new Exp.\n   */\n  function mulScalar(Exp memory a, uint256 scalar) internal pure returns (MathError, Exp memory) {\n    (MathError err0, uint256 scaledMantissa) = a.mantissa.mulUInt(scalar);\n    if (err0 != MathError.NO_ERROR) {\n      return (err0, Exp({mantissa: 0}));\n    }\n\n    return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\n  }\n\n  /**\n   * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\n   */\n  function mulScalarTruncate(Exp memory a, uint256 scalar) internal pure returns (MathError, uint256) {\n    (MathError err, Exp memory product) = mulScalar(a, scalar);\n    if (err != MathError.NO_ERROR) {\n      return (err, 0);\n    }\n\n    return (MathError.NO_ERROR, product.truncate());\n  }\n\n  /**\n   * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\n   */\n  function mulScalarTruncateAddUInt(\n    Exp memory a,\n    uint256 scalar,\n    uint256 addend\n  ) internal pure returns (MathError, uint256) {\n    (MathError err, Exp memory product) = mulScalar(a, scalar);\n    if (err != MathError.NO_ERROR) {\n      return (err, 0);\n    }\n\n    return product.truncate().addUInt(addend);\n  }\n\n  /**\n   * @dev Divide an Exp by a scalar, returning a new Exp.\n   */\n  function divScalar(Exp memory a, uint256 scalar) internal pure returns (MathError, Exp memory) {\n    (MathError err0, uint256 descaledMantissa) = a.mantissa.divUInt(scalar);\n    if (err0 != MathError.NO_ERROR) {\n      return (err0, Exp({mantissa: 0}));\n    }\n\n    return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));\n  }\n\n  /**\n   * @dev Divide a scalar by an Exp, returning a new Exp.\n   */\n  function divScalarByExp(uint256 scalar, Exp memory divisor) internal pure returns (MathError, Exp memory) {\n    /*\n          We are doing this as:\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\n\n          How it works:\n          Exp = a / b;\n          Scalar = s;\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\n        */\n    (MathError err0, uint256 numerator) = expScale.mulUInt(scalar);\n    if (err0 != MathError.NO_ERROR) {\n      return (err0, Exp({mantissa: 0}));\n    }\n    return getExp(numerator, divisor.mantissa);\n  }\n\n  /**\n   * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\n   */\n  function divScalarByExpTruncate(uint256 scalar, Exp memory divisor) internal pure returns (MathError, uint256) {\n    (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\n    if (err != MathError.NO_ERROR) {\n      return (err, 0);\n    }\n\n    return (MathError.NO_ERROR, fraction.truncate());\n  }\n\n  /**\n   * @dev Multiplies two exponentials, returning a new exponential.\n   */\n  function mulExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\n    (MathError err0, uint256 doubleScaledProduct) = a.mantissa.mulUInt(b.mantissa);\n    if (err0 != MathError.NO_ERROR) {\n      return (err0, Exp({mantissa: 0}));\n    }\n\n    // We add half the scale before dividing so that we get rounding instead of truncation.\n    //  See \"Listing 6\" and text above it at https://accu.org/index.php/journals/1717\n    // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\n    (MathError err1, uint256 doubleScaledProductWithHalfScale) = halfExpScale.addUInt(doubleScaledProduct);\n    if (err1 != MathError.NO_ERROR) {\n      return (err1, Exp({mantissa: 0}));\n    }\n\n    (MathError err2, uint256 product) = doubleScaledProductWithHalfScale.divUInt(expScale);\n    // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\n    assert(err2 == MathError.NO_ERROR);\n\n    return (MathError.NO_ERROR, Exp({mantissa: product}));\n  }\n\n  /**\n   * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\n   */\n  function mulExp(uint256 a, uint256 b) internal pure returns (MathError, Exp memory) {\n    return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));\n  }\n\n  /**\n   * @dev Multiplies three exponentials, returning a new exponential.\n   */\n  function mulExp3(\n    Exp memory a,\n    Exp memory b,\n    Exp memory c\n  ) internal pure returns (MathError, Exp memory) {\n    (MathError err, Exp memory ab) = mulExp(a, b);\n    if (err != MathError.NO_ERROR) {\n      return (err, ab);\n    }\n    return mulExp(ab, c);\n  }\n\n  /**\n   * @dev Divides two exponentials, returning a new exponential.\n   *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\n   *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\n   */\n  function divExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\n    return getExp(a.mantissa, b.mantissa);\n  }\n}\n"
    },
    "contracts/Exponential/ExponentialNoError.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nstruct Exp {\n  uint256 mantissa;\n}\n\nstruct Double {\n  uint256 mantissa;\n}\n\n/**\n * @title Exponential module for storing fixed-precision decimals\n * @author Compound\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\n *         `Exp({mantissa: 5100000000000000000})`.\n */\nlibrary ExponentialNoError {\n  uint256 constant expScale = 1e18;\n  uint256 constant doubleScale = 1e36;\n  uint256 constant halfExpScale = expScale / 2;\n  uint256 constant mantissaOne = expScale;\n\n  /**\n   * @dev Truncates the given exp to a whole number value.\n   *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\n   */\n  function truncate(Exp memory exp) internal pure returns (uint256) {\n    // Note: We are not using careful math here as we're performing a division that cannot fail\n    return exp.mantissa / expScale;\n  }\n\n  /**\n   * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\n   */\n  function mul_ScalarTruncate(Exp memory a, uint256 scalar) internal pure returns (uint256) {\n    Exp memory product = mul_(a, scalar);\n    return truncate(product);\n  }\n\n  /**\n   * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\n   */\n  function mul_ScalarTruncateAddUInt(\n    Exp memory a,\n    uint256 scalar,\n    uint256 addend\n  ) internal pure returns (uint256) {\n    Exp memory product = mul_(a, scalar);\n    return add_(truncate(product), addend);\n  }\n\n  function safe224(uint256 n, string memory errorMessage) internal pure returns (uint224) {\n    require(n < 2**224, errorMessage);\n    return uint224(n);\n  }\n\n  function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\n    require(n < 2**32, errorMessage);\n    return uint32(n);\n  }\n\n  function add_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\n    return Exp({mantissa: add_(a.mantissa, b.mantissa)});\n  }\n\n  function add_(Double memory a, Double memory b) internal pure returns (Double memory) {\n    return Double({mantissa: add_(a.mantissa, b.mantissa)});\n  }\n\n  function add_(uint256 a, uint256 b) internal pure returns (uint256) {\n    return add_(a, b, 'addition overflow');\n  }\n\n  function add_(\n    uint256 a,\n    uint256 b,\n    string memory errorMessage\n  ) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a, errorMessage);\n    return c;\n  }\n\n  function sub_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\n    return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\n  }\n\n  function sub_(Double memory a, Double memory b) internal pure returns (Double memory) {\n    return Double({mantissa: sub_(a.mantissa, b.mantissa)});\n  }\n\n  function sub_(uint256 a, uint256 b) internal pure returns (uint256) {\n    return sub_(a, b, 'subtraction underflow');\n  }\n\n  function sub_(\n    uint256 a,\n    uint256 b,\n    string memory errorMessage\n  ) internal pure returns (uint256) {\n    require(b <= a, errorMessage);\n    return a - b;\n  }\n\n  function mul_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\n    return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\n  }\n\n  function mul_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\n    return Exp({mantissa: mul_(a.mantissa, b)});\n  }\n\n  function mul_(uint256 a, Exp memory b) internal pure returns (uint256) {\n    return mul_(a, b.mantissa) / expScale;\n  }\n\n  function mul_(Double memory a, Double memory b) internal pure returns (Double memory) {\n    return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\n  }\n\n  function mul_(Double memory a, uint256 b) internal pure returns (Double memory) {\n    return Double({mantissa: mul_(a.mantissa, b)});\n  }\n\n  function mul_(uint256 a, Double memory b) internal pure returns (uint256) {\n    return mul_(a, b.mantissa) / doubleScale;\n  }\n\n  function mul_(uint256 a, uint256 b) internal pure returns (uint256) {\n    return mul_(a, b, 'multiplication overflow');\n  }\n\n  function mul_(\n    uint256 a,\n    uint256 b,\n    string memory errorMessage\n  ) internal pure returns (uint256) {\n    if (a == 0 || b == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    require(c / a == b, errorMessage);\n    return c;\n  }\n\n  function div_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\n    return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\n  }\n\n  function div_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\n    return Exp({mantissa: div_(a.mantissa, b)});\n  }\n\n  function div_(uint256 a, Exp memory b) internal pure returns (uint256) {\n    return div_(mul_(a, expScale), b.mantissa);\n  }\n\n  function div_(Double memory a, Double memory b) internal pure returns (Double memory) {\n    return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\n  }\n\n  function div_(Double memory a, uint256 b) internal pure returns (Double memory) {\n    return Double({mantissa: div_(a.mantissa, b)});\n  }\n\n  function div_(uint256 a, Double memory b) internal pure returns (uint256) {\n    return div_(mul_(a, doubleScale), b.mantissa);\n  }\n\n  function div_(uint256 a, uint256 b) internal pure returns (uint256) {\n    return div_(a, b, 'divide by zero');\n  }\n\n  function div_(\n    uint256 a,\n    uint256 b,\n    string memory errorMessage\n  ) internal pure returns (uint256) {\n    require(b > 0, errorMessage);\n    return a / b;\n  }\n\n  function fraction(uint256 a, uint256 b) internal pure returns (Double memory) {\n    return Double({mantissa: div_(mul_(a, doubleScale), b)});\n  }\n}\n"
    },
    "contracts/InterestRateModel/BaseJumpRateModelV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\nimport './InterestRateModel.sol';\n\n/**\n * @title Logic for Compound's JumpRateModel Contract V2.\n * @author Compound (modified by Dharma Labs, refactored by Arr00)\n * @notice Version 2 modifies Version 1 by enabling updateable parameters.\n */\nabstract contract BaseJumpRateModelV2 is InterestRateModel {\n  using SafeMath for uint256;\n\n  event NewInterestParams(\n    uint256 baseRatePerBlock,\n    uint256 multiplierPerBlock,\n    uint256 jumpMultiplierPerBlock,\n    uint256 kink\n  );\n\n  /**\n   * @notice The address of the owner, i.e. the Timelock contract, which can update parameters directly\n   */\n  address public owner;\n\n  /**\n   * @notice The approximate number of blocks per year that is assumed by the interest rate model\n   */\n  uint256 public immutable blocksPerYear;\n\n  /**\n   * @notice The multiplier of utilization rate that gives the slope of the interest rate\n   */\n  uint256 public multiplierPerBlock;\n\n  /**\n   * @notice The base interest rate which is the y-intercept when utilization rate is 0\n   */\n  uint256 public baseRatePerBlock;\n\n  /**\n   * @notice The multiplierPerBlock after hitting a specified utilization point\n   */\n  uint256 public jumpMultiplierPerBlock;\n\n  /**\n   * @notice The utilization point at which the jump multiplier is applied\n   */\n  uint256 public kink;\n\n  /**\n   * @notice Construct an interest rate model\n   * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\n   * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\n   * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\n   * @param kink_ The utilization point at which the jump multiplier is applied\n   * @param owner_ The address of the owner, i.e. the Timelock contract (which has the ability to update parameters directly)\n   */\n  constructor(\n    uint256 blocksPerYearOnChain,\n    uint256 baseRatePerYear,\n    uint256 multiplierPerYear,\n    uint256 jumpMultiplierPerYear,\n    uint256 kink_,\n    address owner_\n  ) {\n    owner = owner_;\n    blocksPerYear = blocksPerYearOnChain;\n    _updateJumpRateModelInternal(\n      blocksPerYearOnChain,\n      baseRatePerYear,\n      multiplierPerYear,\n      jumpMultiplierPerYear,\n      kink_\n    );\n  }\n\n  /**\n   * @notice Update the parameters of the interest rate model (only callable by owner, i.e. Timelock)\n   * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\n   * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\n   * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\n   * @param kink_ The utilization point at which the jump multiplier is applied\n   */\n  function updateJumpRateModel(\n    uint256 baseRatePerYear,\n    uint256 multiplierPerYear,\n    uint256 jumpMultiplierPerYear,\n    uint256 kink_\n  ) external virtual {\n    require(msg.sender == owner, 'only the owner may call this function.');\n\n    _updateJumpRateModelInternal(blocksPerYear, baseRatePerYear, multiplierPerYear, jumpMultiplierPerYear, kink_);\n  }\n\n  /**\n   * @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\n   * @param cash The amount of cash in the market\n   * @param borrows The amount of borrows in the market\n   * @param reserves The amount of reserves in the market (currently unused)\n   * @return The utilization rate as a mantissa between [0, 1e18]\n   */\n  function utilizationRate(uint256 cash, uint256 borrows, uint256 reserves) public pure returns (uint256) {\n    // Utilization rate is 0 when there are no borrows\n    if (borrows == 0) {\n      return 0;\n    }\n    if (reserves > cash && (borrows + cash - reserves > 0)) {\n      return 1e18;\n    }\n\n    return borrows.mul(1e18).div(cash.add(borrows).sub(reserves));\n  }\n\n  /**\n   * @notice Calculates the current borrow rate per block, with the error code expected by the market\n   * @param cash The amount of cash in the market\n   * @param borrows The amount of borrows in the market\n   * @param reserves The amount of reserves in the market\n   * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)\n   */\n  function getBorrowRateInternal(uint256 cash, uint256 borrows, uint256 reserves) internal view returns (uint256) {\n    uint256 util = utilizationRate(cash, borrows, reserves);\n\n    if (util <= kink) {\n      return util.mul(multiplierPerBlock).div(1e18).add(baseRatePerBlock);\n    } else {\n      uint256 normalRate = kink.mul(multiplierPerBlock).div(1e18).add(baseRatePerBlock);\n      uint256 excessUtil = util.sub(kink);\n      return excessUtil.mul(jumpMultiplierPerBlock).div(1e18).add(normalRate);\n    }\n  }\n\n  /**\n   * @notice Calculates the current supply rate per block\n   * @param cash The amount of cash in the market\n   * @param borrows The amount of borrows in the market\n   * @param reserves The amount of reserves in the market\n   * @param reserveFactorMantissa The current reserve factor for the market\n   * @return The supply rate percentage per block as a mantissa (scaled by 1e18)\n   */\n  function getSupplyRate(\n    uint256 cash,\n    uint256 borrows,\n    uint256 reserves,\n    uint256 reserveFactorMantissa\n  ) public view virtual override returns (uint256) {\n    uint256 oneMinusReserveFactor = uint256(1e18).sub(reserveFactorMantissa);\n    uint256 borrowRate = getBorrowRateInternal(cash, borrows, reserves);\n    uint256 rateToPool = borrowRate.mul(oneMinusReserveFactor).div(1e18);\n    return utilizationRate(cash, borrows, reserves).mul(rateToPool).div(1e18);\n  }\n\n  /**\n   * @notice Internal function to update the parameters of the interest rate model\n   * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\n   * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\n   * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\n   * @param kink_ The utilization point at which the jump multiplier is applied\n   */\n  function _updateJumpRateModelInternal(\n    uint256 blocksPerYearOnChain,\n    uint256 baseRatePerYear,\n    uint256 multiplierPerYear,\n    uint256 jumpMultiplierPerYear,\n    uint256 kink_\n  ) internal {\n    baseRatePerBlock = baseRatePerYear.div(blocksPerYearOnChain);\n    multiplierPerBlock = (multiplierPerYear.mul(1e18)).div(blocksPerYearOnChain.mul(kink_));\n    jumpMultiplierPerBlock = jumpMultiplierPerYear.div(blocksPerYearOnChain);\n    kink = kink_;\n\n    emit NewInterestParams(baseRatePerBlock, multiplierPerBlock, jumpMultiplierPerBlock, kink);\n  }\n}\n"
    },
    "contracts/InterestRateModel/InterestRateModel.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\n/**\n * @title Compound's InterestRateModel Interface\n * @author Compound\n */\nabstract contract InterestRateModel {\n  /// @notice Indicator that this is an InterestRateModel contract (for inspection)\n  bool public constant isInterestRateModel = true;\n\n  /**\n   * @notice Calculates the current borrow interest rate per block\n   * @param cash The total amount of cash the market has\n   * @param borrows The total amount of borrows the market has outstanding\n   * @param reserves The total amount of reserves the market has\n   * @return The borrow rate per block (as a percentage, and scaled by 1e18)\n   */\n  function getBorrowRate(\n    uint256 cash,\n    uint256 borrows,\n    uint256 reserves\n  ) external virtual view returns (uint256);\n\n  /**\n   * @notice Calculates the current supply interest rate per block\n   * @param cash The total amount of cash the market has\n   * @param borrows The total amount of borrows the market has outstanding\n   * @param reserves The total amount of reserves the market has\n   * @param reserveFactorMantissa The current reserve factor the market has\n   * @return The supply rate per block (as a percentage, and scaled by 1e18)\n   */\n  function getSupplyRate(\n    uint256 cash,\n    uint256 borrows,\n    uint256 reserves,\n    uint256 reserveFactorMantissa\n  ) external virtual view returns (uint256);\n}\n"
    },
    "contracts/InterestRateModel/JumpRateModel.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport './InterestRateModel.sol';\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\n/**\n * @title Compound's JumpRateModel Contract\n * @author Compound\n */\ncontract JumpRateModel is InterestRateModel {\n  using SafeMath for uint256;\n\n  event NewInterestParams(\n    uint256 baseRatePerBlock,\n    uint256 multiplierPerBlock,\n    uint256 jumpMultiplierPerBlock,\n    uint256 kink\n  );\n\n  /**\n   * @notice The approximate number of blocks per year that is assumed by the interest rate model\n   */\n  uint256 public constant blocksPerYear = 2102400;\n\n  /**\n   * @notice The multiplier of utilization rate that gives the slope of the interest rate\n   */\n  uint256 public multiplierPerBlock;\n\n  /**\n   * @notice The base interest rate which is the y-intercept when utilization rate is 0\n   */\n  uint256 public baseRatePerBlock;\n\n  /**\n   * @notice The multiplierPerBlock after hitting a specified utilization point\n   */\n  uint256 public jumpMultiplierPerBlock;\n\n  /**\n   * @notice The utilization point at which the jump multiplier is applied\n   */\n  uint256 public kink;\n\n  /**\n   * @notice Construct an interest rate model\n   * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\n   * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\n   * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\n   * @param kink_ The utilization point at which the jump multiplier is applied\n   */\n  constructor(\n    uint256 baseRatePerYear,\n    uint256 multiplierPerYear,\n    uint256 jumpMultiplierPerYear,\n    uint256 kink_\n  ) {\n    baseRatePerBlock = baseRatePerYear.div(blocksPerYear);\n    multiplierPerBlock = multiplierPerYear.div(blocksPerYear);\n    jumpMultiplierPerBlock = jumpMultiplierPerYear.div(blocksPerYear);\n    kink = kink_;\n\n    emit NewInterestParams(baseRatePerBlock, multiplierPerBlock, jumpMultiplierPerBlock, kink);\n  }\n\n  /**\n   * @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\n   * @param cash The amount of cash in the market\n   * @param borrows The amount of borrows in the market\n   * @param reserves The amount of reserves in the market (currently unused)\n   * @return The utilization rate as a mantissa between [0, 1e18]\n   */\n  function utilizationRate(\n    uint256 cash,\n    uint256 borrows,\n    uint256 reserves\n  ) public pure returns (uint256) {\n    // Utilization rate is 0 when there are no borrows\n    if (borrows == 0) {\n      return 0;\n    }\n\n    return borrows.mul(1e18).div(cash.add(borrows).sub(reserves));\n  }\n\n  /**\n   * @notice Calculates the current borrow rate per block, with the error code expected by the market\n   * @param cash The amount of cash in the market\n   * @param borrows The amount of borrows in the market\n   * @param reserves The amount of reserves in the market\n   * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)\n   */\n  function getBorrowRate(\n    uint256 cash,\n    uint256 borrows,\n    uint256 reserves\n  ) public view override returns (uint256) {\n    uint256 util = utilizationRate(cash, borrows, reserves);\n\n    if (util <= kink) {\n      return util.mul(multiplierPerBlock).div(1e18).add(baseRatePerBlock);\n    } else {\n      uint256 normalRate = kink.mul(multiplierPerBlock).div(1e18).add(baseRatePerBlock);\n      uint256 excessUtil = util.sub(kink);\n      return excessUtil.mul(jumpMultiplierPerBlock).div(1e18).add(normalRate);\n    }\n  }\n\n  /**\n   * @notice Calculates the current supply rate per block\n   * @param cash The amount of cash in the market\n   * @param borrows The amount of borrows in the market\n   * @param reserves The amount of reserves in the market\n   * @param reserveFactorMantissa The current reserve factor for the market\n   * @return The supply rate percentage per block as a mantissa (scaled by 1e18)\n   */\n  function getSupplyRate(\n    uint256 cash,\n    uint256 borrows,\n    uint256 reserves,\n    uint256 reserveFactorMantissa\n  ) public view override returns (uint256) {\n    uint256 oneMinusReserveFactor = uint256(1e18).sub(reserveFactorMantissa);\n    uint256 borrowRate = getBorrowRate(cash, borrows, reserves);\n    uint256 rateToPool = borrowRate.mul(oneMinusReserveFactor).div(1e18);\n    return utilizationRate(cash, borrows, reserves).mul(rateToPool).div(1e18);\n  }\n}\n"
    },
    "contracts/InterestRateModel/JumpRateModelV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport './BaseJumpRateModelV2.sol';\n\n/**\n * @title Compound's JumpRateModel Contract V2 for V2 cTokens\n * @author Arr00\n * @notice Supports only for V2 cTokens\n */\ncontract JumpRateModelV2 is BaseJumpRateModelV2 {\n  /**\n   * @notice Calculates the current borrow rate per block\n   * @param cash The amount of cash in the market\n   * @param borrows The amount of borrows in the market\n   * @param reserves The amount of reserves in the market\n   * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)\n   */\n  function getBorrowRate(\n    uint256 cash,\n    uint256 borrows,\n    uint256 reserves\n  ) external view override returns (uint256) {\n    return getBorrowRateInternal(cash, borrows, reserves);\n  }\n\n  constructor(\n    uint256 blocksPerYearOnChain,\n    uint256 baseRatePerYear,\n    uint256 multiplierPerYear,\n    uint256 jumpMultiplierPerYear,\n    uint256 kink_,\n    address owner_\n  )\n    BaseJumpRateModelV2(blocksPerYearOnChain, baseRatePerYear, multiplierPerYear, jumpMultiplierPerYear, kink_, owner_)\n  {}\n}\n"
    },
    "contracts/InterestRateModel/suTokenInterestModel.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport './InterestRateModel.sol';\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\n/**\n * @title Compound's JumpRateModel Contract\n * @author Compound\n */\ncontract SuTokenRateModel is InterestRateModel {\n  using SafeMath for uint256;\n\n  address public owner;\n  /**\n   * @notice The multiplier of utilization rate that gives the slope of the interest rate\n   */\n  uint256 public borrowRate;\n\n  /**\n   * @notice The base interest rate which is the y-intercept when utilization rate is 0\n   */\n  uint256 public supplyRate;\n\n  modifier onlyOwner() {\n    require(msg.sender == owner, 'ONLY OWNER');\n    _;\n  }\n\n  constructor(uint256 initBorrowRate, uint256 initSupplyRate) {\n    borrowRate = initBorrowRate;\n    supplyRate = initSupplyRate;\n    owner = msg.sender;\n  }\n\n  function changeOwner(address owner_) public onlyOwner {\n    require(owner_ != address(0), 'Address is Zero!');\n    owner = owner_;\n  }\n\n  function setBorrowRate(uint256 rate) public onlyOwner {\n    borrowRate = rate;\n  }\n\n  function setSupplyRate(uint256 rate) public onlyOwner {\n    supplyRate = rate;\n  }\n\n  /**\n   * @notice Calculates the current borrow rate per block, with the error code expected by the market\n   * @param cash The amount of cash in the market\n   * @param borrows The amount of borrows in the market\n   * @param reserves The amount of reserves in the market\n   * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)\n   */\n  function getBorrowRate(\n    uint256 cash,\n    uint256 borrows,\n    uint256 reserves\n  ) public view override returns (uint256) {\n    cash;\n    borrows;\n    reserves;\n    return borrowRate;\n  }\n\n  /**\n   * @notice Calculates the current supply rate per block\n   * @param cash The amount of cash in the market\n   * @param borrows The amount of borrows in the market\n   * @param reserves The amount of reserves in the market\n   * @param reserveFactorMantissa The current reserve factor for the market\n   * @return The supply rate percentage per block as a mantissa (scaled by 1e18)\n   */\n  function getSupplyRate(\n    uint256 cash,\n    uint256 borrows,\n    uint256 reserves,\n    uint256 reserveFactorMantissa\n  ) public view override returns (uint256) {\n    cash;\n    borrows;\n    reserves;\n    reserveFactorMantissa;\n    return supplyRate;\n  }\n}\n"
    },
    "contracts/InterestRateModel/WhitePaperInterestRateModel.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport './InterestRateModel.sol';\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\n/**\n * @title Compound's WhitePaperInterestRateModel Contract\n * @author Compound\n * @notice The parameterized model described in section 2.4 of the original Compound Protocol whitepaper\n */\ncontract WhitePaperInterestRateModel is InterestRateModel {\n  using SafeMath for uint256;\n\n  event NewInterestParams(uint256 blocksPerYear, uint256 baseRatePerBlock, uint256 multiplierPerBlock);\n\n  /**\n   * @notice The approximate number of blocks per year that is assumed by the interest rate model\n   */\n  uint256 public blocksPerYear;\n\n  /**\n   * @notice The multiplier of utilization rate that gives the slope of the interest rate\n   */\n  uint256 public multiplierPerBlock;\n\n  /**\n   * @notice The base interest rate which is the y-intercept when utilization rate is 0\n   */\n  uint256 public baseRatePerBlock;\n\n  /**\n   * @notice Construct an interest rate model\n   * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\n   * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\n   */\n  constructor(\n    uint256 blocksPerYearOnChain,\n    uint256 baseRatePerYear,\n    uint256 multiplierPerYear\n  ) {\n    blocksPerYear = blocksPerYearOnChain;\n    baseRatePerBlock = baseRatePerYear.div(blocksPerYear);\n    multiplierPerBlock = multiplierPerYear.div(blocksPerYear);\n    emit NewInterestParams(blocksPerYear, baseRatePerBlock, multiplierPerBlock);\n  }\n\n  /**\n   * @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\n   * @param cash The amount of cash in the market\n   * @param borrows The amount of borrows in the market\n   * @param reserves The amount of reserves in the market (currently unused)\n   * @return The utilization rate as a mantissa between [0, 1e18]\n   */\n  function utilizationRate(\n    uint256 cash,\n    uint256 borrows,\n    uint256 reserves\n  ) public pure returns (uint256) {\n    // Utilization rate is 0 when there are no borrows\n    if (borrows == 0) {\n      return 0;\n    }\n\n    return borrows.mul(1e18).div(cash.add(borrows).sub(reserves));\n  }\n\n  /**\n   * @notice Calculates the current borrow rate per block, with the error code expected by the market\n   * @param cash The amount of cash in the market\n   * @param borrows The amount of borrows in the market\n   * @param reserves The amount of reserves in the market\n   * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)\n   */\n  function getBorrowRate(\n    uint256 cash,\n    uint256 borrows,\n    uint256 reserves\n  ) public view override returns (uint256) {\n    uint256 ur = utilizationRate(cash, borrows, reserves);\n    return ur.mul(multiplierPerBlock).div(1e18).add(baseRatePerBlock);\n  }\n\n  /**\n   * @notice Calculates the current supply rate per block\n   * @param cash The amount of cash in the market\n   * @param borrows The amount of borrows in the market\n   * @param reserves The amount of reserves in the market\n   * @param reserveFactorMantissa The current reserve factor for the market\n   * @return The supply rate percentage per block as a mantissa (scaled by 1e18)\n   */\n  function getSupplyRate(\n    uint256 cash,\n    uint256 borrows,\n    uint256 reserves,\n    uint256 reserveFactorMantissa\n  ) public view override returns (uint256) {\n    uint256 oneMinusReserveFactor = uint256(1e18).sub(reserveFactorMantissa);\n    uint256 borrowRate = getBorrowRate(cash, borrows, reserves);\n    uint256 rateToPool = borrowRate.mul(oneMinusReserveFactor).div(1e18);\n    return utilizationRate(cash, borrows, reserves).mul(rateToPool).div(1e18);\n  }\n}\n"
    },
    "contracts/InterestRateModel/ZeroInterestRateModel.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport './InterestRateModel.sol';\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\n/**\n * @title Compound's WhitePaperInterestRateModel Contract\n * @author Compound\n * @notice The parameterized model described in section 2.4 of the original Compound Protocol whitepaper\n */\ncontract ZeroInterestRateModel is InterestRateModel {\n  using SafeMath for uint256;\n\n  /**\n   * @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\n   * @param cash The amount of cash in the market\n   * @param borrows The amount of borrows in the market\n   * @param reserves The amount of reserves in the market (currently unused)\n   * @return The utilization rate as a mantissa between [0, 1e18]\n   */\n  function utilizationRate(\n    uint256 cash,\n    uint256 borrows,\n    uint256 reserves\n  ) public pure returns (uint256) {\n    // Utilization rate is 0 when there are no borrows\n    if (borrows == 0) {\n      return 0;\n    }\n\n    return borrows.mul(1e18).div(cash.add(borrows).sub(reserves));\n  }\n\n  /**\n   * @notice Calculates the current borrow rate per block, with the error code expected by the market\n   * @param cash The amount of cash in the market\n   * @param borrows The amount of borrows in the market\n   * @param reserves The amount of reserves in the market\n   * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)\n   */\n  function getBorrowRate(\n    uint256 cash,\n    uint256 borrows,\n    uint256 reserves\n  ) public view override returns (uint256) {\n    return 0;\n  }\n\n  /**\n   * @notice Calculates the current supply rate per block\n   * @param cash The amount of cash in the market\n   * @param borrows The amount of borrows in the market\n   * @param reserves The amount of reserves in the market\n   * @param reserveFactorMantissa The current reserve factor for the market\n   * @return The supply rate percentage per block as a mantissa (scaled by 1e18)\n   */\n  function getSupplyRate(\n    uint256 cash,\n    uint256 borrows,\n    uint256 reserves,\n    uint256 reserveFactorMantissa\n  ) public view override returns (uint256) {\n    uint256 oneMinusReserveFactor = uint256(1e18).sub(reserveFactorMantissa);\n    uint256 borrowRate = getBorrowRate(cash, borrows, reserves);\n    uint256 rateToPool = borrowRate.mul(oneMinusReserveFactor).div(1e18);\n    return utilizationRate(cash, borrows, reserves).mul(rateToPool).div(1e18);\n  }\n}\n"
    },
    "contracts/ITimelock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ninterface ITimelock {\n  /** @notice Event emitted when a new time-lock agreement is created\n   * @param agreementId ID of the created agreement\n   * @param actionType Type of action for the time-lock\n   * @param asset Address of the asset\n   * @param amount  amount\n   * @param beneficiary Address of the beneficiary\n   * @param releaseTime Timestamp when the assets can be claimed\n   */\n  event AgreementCreated(\n    uint256 agreementId,\n    TimeLockActionType actionType,\n    address indexed asset,\n    uint256 amount,\n    address indexed beneficiary,\n    uint256 releaseTime\n  );\n\n  /** @notice Event emitted when a time-lock agreement is claimed\n   * @param agreementId ID of the claimed agreement\n   * @param actionType Type of action for the time-lock\n   * @param asset Address of the asset\n   * @param amount amount\n   * @param beneficiary Address of the beneficiary\n   */\n  event AgreementClaimed(\n    uint256 agreementId,\n    TimeLockActionType actionType,\n    address indexed asset,\n    uint256 amount,\n    address indexed beneficiary\n  );\n\n  /** @notice Event emitted when a time-lock agreement is frozen or unfrozen\n   * @param agreementId ID of the affected agreement\n   * @param value Indicates whether the agreement is frozen (true) or unfrozen (false)\n   */\n  event AgreementFrozen(uint256 agreementId, bool value);\n\n  /** @notice Event emitted when the entire TimeLock contract is frozen or unfrozen\n   * @param value Indicates whether the contract is frozen (true) or unfrozen (false)\n   */\n  event TimeLockFrozen(bool value);\n\n  /**\n   * @dev Emitted during rescueERC20()\n   * @param token The address of the token\n   * @param to The address of the recipient\n   * @param amount The amount being rescued\n   **/\n  event RescueERC20(address indexed token, address indexed to, uint256 amount);\n\n  enum TimeLockActionType {\n    BORROW,\n    REDEEM\n  }\n  struct Agreement {\n    uint256 agreementId;\n    TimeLockActionType actionType;\n    address underlying;\n    bool isFrozen;\n    address beneficiary;\n    uint256 releaseTime;\n    uint256 amount;\n  }\n\n  struct Underlying {\n    address cToken;\n    uint256 totalBalance;\n    uint256 lockDuration;\n    bool isSupport;\n  }\n\n  function createAgreement(\n    TimeLockActionType actionType,\n    address underlying,\n    uint256 amount,\n    address beneficiary\n  ) external returns (uint256);\n\n  function isSupport(address underlying) external view returns (bool);\n}\n"
    },
    "contracts/Multicall2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.19;\n\n/// @title Multicall2 - Aggregate results from multiple read-only function calls\n/// @author Michael Elliot <mike@makerdao.com>\n/// @author Joshua Levine <joshua@makerdao.com>\n/// @author Nick Johnson <arachnid@notdot.net>\n\ncontract Multicall2 {\n    struct Call {\n        address target;\n        bytes callData;\n    }\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    function aggregate(\n        Call[] memory calls\n    ) public returns (uint256 blockNumber, bytes[] memory returnData) {\n        blockNumber = block.number;\n        returnData = new bytes[](calls.length);\n        for (uint256 i = 0; i < calls.length; i++) {\n            (bool success, bytes memory ret) = calls[i].target.call(\n                calls[i].callData\n            );\n            require(success, \"Multicall aggregate: call failed\");\n            returnData[i] = ret;\n        }\n    }\n\n    function blockAndAggregate(\n        Call[] memory calls\n    )\n        public\n        returns (\n            uint256 blockNumber,\n            bytes32 blockHash,\n            Result[] memory returnData\n        )\n    {\n        (blockNumber, blockHash, returnData) = tryBlockAndAggregate(\n            true,\n            calls\n        );\n    }\n\n    function getBlockHash(\n        uint256 blockNumber\n    ) public view returns (bytes32 blockHash) {\n        blockHash = blockhash(blockNumber);\n    }\n\n    function getBlockNumber() public view returns (uint256 blockNumber) {\n        blockNumber = block.number;\n    }\n\n    function getCurrentBlockCoinbase() public view returns (address coinbase) {\n        coinbase = block.coinbase;\n    }\n\n    function getCurrentBlockDifficulty()\n        public\n        view\n        returns (uint256 difficulty)\n    {\n        difficulty = block.difficulty;\n    }\n\n    function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {\n        gaslimit = block.gaslimit;\n    }\n\n    function getCurrentBlockTimestamp()\n        public\n        view\n        returns (uint256 timestamp)\n    {\n        timestamp = block.timestamp;\n    }\n\n    function getEthBalance(address addr) public view returns (uint256 balance) {\n        balance = addr.balance;\n    }\n\n    function getLastBlockHash() public view returns (bytes32 blockHash) {\n        blockHash = blockhash(block.number - 1);\n    }\n\n    function tryAggregate(\n        bool requireSuccess,\n        Call[] memory calls\n    ) public returns (Result[] memory returnData) {\n        returnData = new Result[](calls.length);\n        for (uint256 i = 0; i < calls.length; i++) {\n            (bool success, bytes memory ret) = calls[i].target.call(\n                calls[i].callData\n            );\n\n            if (requireSuccess) {\n                require(success, \"Multicall2 aggregate: call failed\");\n            }\n\n            returnData[i] = Result(success, ret);\n        }\n    }\n\n    function tryBlockAndAggregate(\n        bool requireSuccess,\n        Call[] memory calls\n    )\n        public\n        returns (\n            uint256 blockNumber,\n            bytes32 blockHash,\n            Result[] memory returnData\n        )\n    {\n        blockNumber = block.number;\n        blockHash = blockhash(block.number);\n        returnData = tryAggregate(requireSuccess, calls);\n    }\n}\n"
    },
    "contracts/Oracle/FeedPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\nimport './PriceOracle.sol';\nimport './Interfaces/IStdReference.sol';\nimport './Interfaces/IWitnetFeed.sol';\nimport './Interfaces/IChainlinkFeed.sol';\nimport './Interfaces/IVoltPair.sol';\nimport '@pythnetwork/pyth-sdk-solidity/IPyth.sol';\nimport '@openzeppelin/contracts/access/Ownable2Step.sol';\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\n\ncontract FeedPriceOracle is PriceOracle, Ownable2Step {\n  struct FeedData {\n    bytes32 feedId; // Pyth price feed ID\n    uint8 source; // 1 - chainlink feed, 2 - witnet router, 3 - Band\n    address addr; // feed address\n    uint8 feedDecimals; // feed decimals (only used in witnet)\n    string name;\n  }\n\n  mapping(address => FeedData) public feeds; // cToken -> feed data\n  mapping(address => uint256) public fixedPrices; // cToken -> price\n  uint8 constant DECIMALS = 18;\n\n  event SetFeed(address indexed cToken_, bytes32 feedId, uint8 source, address addr, uint8 feedDecimals, string name);\n\n  function setChainlinkFeed(address cToken_, address feed_) public onlyOwner {\n    _setFeed(cToken_, uint8(1), bytes32(0), feed_, 8, '');\n  }\n\n  function setWitnetFeed(address cToken_, address feed_, uint8 feedDecimals_) public onlyOwner {\n    _setFeed(cToken_, uint8(2), bytes32(0), feed_, feedDecimals_, '');\n  }\n\n  function setBandFeed(address cToken_, address feed_, uint8 feedDecimals_, string memory name) public onlyOwner {\n    _setFeed(cToken_, uint8(3), bytes32(0), feed_, feedDecimals_, name);\n  }\n\n  function setFixedPrice(address cToken_, uint256 price) public onlyOwner {\n    fixedPrices[cToken_] = price;\n  }\n\n  function setPythFeed(address cToken_, bytes32 feedId, address addr) public onlyOwner {\n    _setFeed(cToken_, uint8(4), feedId, addr, 18, '');\n  }\n\n  function setLpFeed(address cToken_, address lpToken) public onlyOwner {\n    _setFeed(cToken_, uint8(5), bytes32(0), lpToken, 18, '');\n  }\n\n  function _setFeed(\n    address cToken_,\n    uint8 source,\n    bytes32 feedId,\n    address addr,\n    uint8 feedDecimals,\n    string memory name\n  ) private {\n    require(addr != address(0), 'Address is Zero!');\n    if (feeds[cToken_].source != 0) {\n      delete fixedPrices[cToken_];\n    }\n    FeedData memory feedData = FeedData({\n      feedId: feedId,\n      source: source,\n      addr: addr,\n      feedDecimals: feedDecimals,\n      name: name\n    });\n    feeds[cToken_] = feedData;\n    emit SetFeed(cToken_, feedId, source, addr, feedDecimals, name);\n  }\n\n  function _getTokenPrice(address lpToken, address token) private view returns (uint256) {\n    uint256 _balance = IERC20(token).balanceOf(lpToken);\n\n    uint8 decimals = IERC20Metadata(token).decimals();\n\n    uint256 _totalSupply = IERC20(lpToken).totalSupply();\n    uint256 amount = (_balance * 1e18) / _totalSupply;\n\n    uint256 price = getUnderlyingPrice(token);\n\n    if (decimals < 18) amount = amount * (10 ** (18 - decimals));\n    return (amount * price) / 1e18;\n  }\n\n  function _getLpPrice(address lpToken) private view returns (uint256) {\n    address token0 = IVoltPair(lpToken).token0();\n    address token1 = IVoltPair(lpToken).token1();\n\n    return _getTokenPrice(lpToken, token0) + _getTokenPrice(lpToken, token1);\n  }\n\n  function removeFeed(address cToken_) public onlyOwner {\n    delete feeds[cToken_];\n  }\n\n  function getFeed(address cToken_) public view returns (FeedData memory) {\n    return feeds[cToken_];\n  }\n\n  function removeFixedPrice(address cToken_) public onlyOwner {\n    delete fixedPrices[cToken_];\n  }\n\n  function getFixedPrice(address cToken_) public view returns (uint256) {\n    return fixedPrices[cToken_];\n  }\n\n  function _getPythPrice(FeedData memory feed) internal view virtual returns (uint256) {\n    PythStructs.Price memory price = IPyth(feed.addr).getPriceUnsafe(feed.feedId);\n    uint256 decimals = DECIMALS - uint32(price.expo * -1);\n    require(decimals <= DECIMALS, 'DECIMAL UNDERFLOW');\n    return uint64(price.price) * (10 ** decimals);\n  }\n\n  function getUnderlyingPrice(address cToken_) public view override returns (uint256) {\n    FeedData memory feed = feeds[cToken_]; // gas savings\n    if (feed.addr != address(0)) {\n      if (feed.source == uint8(1)) {\n        uint256 decimals = uint256(DECIMALS - IChainlinkFeed(feed.addr).decimals());\n        require(decimals <= DECIMALS, 'DECIMAL UNDERFLOW');\n        (uint80 roundID, int256 answer, , uint256 updatedAt, uint80 answeredInRound) = IChainlinkFeed(feed.addr)\n          .latestRoundData();\n        require(answeredInRound >= roundID, 'Stale price');\n        require(answer > 0, 'negative price');\n        require(block.timestamp <= updatedAt + 86400, 'timeout');\n        return uint256(answer) * (10 ** decimals);\n      }\n      if (feed.source == uint8(2)) {\n        uint256 decimals = uint256(DECIMALS - feed.feedDecimals);\n        require(decimals <= DECIMALS, 'DECIMAL UNDERFLOW');\n        uint256 _temp = uint256(IWitnetFeed(feed.addr).lastPrice());\n        return _temp * (10 ** decimals);\n      }\n      if (feed.source == uint8(3)) {\n        uint256 decimals = uint256(DECIMALS - feed.feedDecimals);\n        require(decimals <= DECIMALS, 'DECIMAL UNDERFLOW');\n        IStdReference.ReferenceData memory refData = IStdReference(feed.addr).getReferenceData(feed.name, 'USD');\n        return refData.rate * (10 ** decimals);\n      }\n      if (feed.source == uint8(4)) {\n        return _getPythPrice(feed);\n      }\n      if (feed.source == uint8(5)) {\n        return _getLpPrice(feed.addr);\n      }\n    }\n    return fixedPrices[cToken_];\n  }\n\n  function getUnderlyingPrices(address[] memory cTokens) public view returns (uint256[] memory) {\n    uint256 length = cTokens.length;\n    uint256[] memory results = new uint256[](length);\n    for (uint256 i; i < length; ++i) {\n      results[i] = getUnderlyingPrice(cTokens[i]);\n    }\n    return results;\n  }\n}\n"
    },
    "contracts/Oracle/FeedPriceOracleSafe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\nimport './FeedPriceOracle.sol';\n\ncontract FeedPriceOracleSafe is FeedPriceOracle {\n  uint256 public validTimePeriod = 1800;\n\n  function _getPythPrice(FeedData memory feed) internal view override returns (uint256) {\n    PythStructs.Price memory price = IPyth(feed.addr).getPriceNoOlderThan(feed.feedId, validTimePeriod);\n    uint256 decimals = DECIMALS - uint32(price.expo * -1);\n    require(decimals <= DECIMALS, 'DECIMAL UNDERFLOW');\n    return uint64(price.price) * (10 ** decimals);\n  }\n\n  function setPythValidTimePeriod(uint256 _validTimePeriod) public onlyOwner {\n    require(_validTimePeriod >= 60, 'validTimePeriod >= 60');\n    validTimePeriod = _validTimePeriod;\n  }\n}\n"
    },
    "contracts/Oracle/Interfaces/IChainlinkFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ninterface IChainlinkFeed {\n  function decimals() external view returns (uint8);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/Oracle/Interfaces/IStdReference.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ninterface IStdReference {\n  /// A structure returned whenever someone requests for standard reference data.\n  struct ReferenceData {\n    uint256 rate; // base/quote exchange rate, multiplied by 1e18.\n    uint256 lastUpdatedBase; // UNIX epoch of the last time when base price gets updated.\n    uint256 lastUpdatedQuote; // UNIX epoch of the last time when quote price gets updated.\n  }\n\n  /// Returns the price data for the given base/quote pair. Revert if not available.\n  function getReferenceData(string calldata _base, string calldata _quote) external view returns (ReferenceData memory);\n\n  /// Similar to getReferenceData, but with multiple base/quote pairs at once.\n  function getReferenceDataBulk(string[] calldata _bases, string[] calldata _quotes)\n    external\n    view\n    returns (ReferenceData[] memory);\n}\n"
    },
    "contracts/Oracle/Interfaces/IVoltPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ninterface IVoltPair {\n  function metadata() external view returns (uint dec0, uint dec1, uint r0, uint r1, bool st, address t0, address t1);\n\n  function token0() external view returns (address);\n\n  function token1() external view returns (address);\n}\n"
    },
    "contracts/Oracle/Interfaces/IWitnetFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ninterface IWitnetFeed {\n  function lastPrice() external view returns (int256);\n}\n"
    },
    "contracts/Oracle/PriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nabstract contract PriceOracle {\n  /// @notice Indicator that this is a PriceOracle contract (for inspection)\n  bool public constant isPriceOracle = true;\n\n  /**\n   * @notice Get the underlying price of a cToken asset\n   * @param cToken The cToken to get the underlying price of\n   * @return The underlying asset price mantissa (scaled by 1e18).\n   *  Zero means the price is unavailable.\n   */\n  function getUnderlyingPrice(address cToken) external view virtual returns (uint256);\n}\n"
    },
    "contracts/Oracle/PythOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\nimport \"@pythnetwork/pyth-sdk-solidity/IPyth.sol\";\n\ncontract PythOracle {\n    bool public constant isPriceOracle = true;\n    struct FeedData {\n        bytes32 feedId; // Pyth price feed ID\n        uint8 tokenDecimals; // token decimals\n        address addr; // feed address\n        string name;\n    }\n\n    address public owner;\n    mapping(address => FeedData) public feeds; // cToken -> feed data\n    mapping(address => uint256) public fixedPrices; // cToken -> price\n    uint8 constant DECIMALS = 36;\n\n    event SetFeed(\n        address indexed cToken_,\n        bytes32 feedId,\n        address addr,\n        string name\n    );\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"ONLY OWNER\");\n        _;\n    }\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    function changeOwner(address owner_) public onlyOwner {\n        require(owner_ != address(0), \"Address is Zero!\");\n        owner = owner_;\n    }\n\n    function setFixedPrice(address cToken_, uint256 price) public onlyOwner {\n        fixedPrices[cToken_] = price;\n    }\n\n    function setFeedId(\n        address cToken_,\n        bytes32 feedId,\n        address addr,\n        uint8 tokenDecimals,\n        string memory name\n    ) public onlyOwner {\n        _setFeed(cToken_, feedId, addr, tokenDecimals, name);\n    }\n\n    function _setFeed(\n        address cToken_,\n        bytes32 feedId,\n        address addr,\n        uint8 tokenDecimals,\n        string memory name\n    ) private {\n        require(addr != address(0), \"Address is Zero!\");\n        require(feedId != bytes32(0), \"feedId is Zero!\");\n\n        FeedData memory feedData = FeedData({\n            feedId: feedId,\n            addr: addr,\n            tokenDecimals: tokenDecimals,\n            name: name\n        });\n        feeds[cToken_] = feedData;\n        emit SetFeed(cToken_, feedId, addr, name);\n    }\n\n    function removeFeed(address cToken_) public onlyOwner {\n        delete feeds[cToken_];\n    }\n\n    function getFeed(address cToken_) public view returns (FeedData memory) {\n        return feeds[cToken_];\n    }\n\n    function getFixedPrice(address cToken_) public view returns (uint256) {\n        return fixedPrices[cToken_];\n    }\n\n    function removeFixedPrice(address cToken_) public onlyOwner {\n        delete fixedPrices[cToken_];\n    }\n\n    function getUnderlyingPrice(address cToken_) public view returns (uint256) {\n        if (fixedPrices[cToken_] > 0) {\n            return fixedPrices[cToken_];\n        } else {\n            FeedData memory feed = feeds[cToken_]; // gas savings\n            if (feed.feedId == bytes32(0)) {\n                return 0;\n            } else {\n                PythStructs.Price memory price = IPyth(feed.addr)\n                    .getPriceUnsafe(feed.feedId);\n\n                uint256 decimals = DECIMALS -\n                    feed.tokenDecimals -\n                    uint32(price.expo * -1);\n                require(decimals <= DECIMALS, \"DECIMAL UNDERFLOW\");\n                return uint64(price.price) * (10 ** decimals);\n            }\n        }\n    }\n\n    function getUnderlyingPrices(\n        address[] memory cTokens\n    ) public view returns (uint256[] memory) {\n        uint256 length = cTokens.length;\n        uint256[] memory results = new uint256[](length);\n        for (uint256 i; i < length; ++i) {\n            results[i] = getUnderlyingPrice(cTokens[i]);\n        }\n        return results;\n    }\n}\n"
    },
    "contracts/Oracle/wstMTRGOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\nimport '@pythnetwork/pyth-sdk-solidity/IPyth.sol';\n\ninterface IWstMTRG {\n  function stMTRGPerToken() external view returns (uint256);\n}\n\ncontract wstMTRGOracle {\n  address public immutable wstMTRG;\n  address public immutable mtrgFeed;\n  bytes32 public immutable feedId;\n\n  constructor(address _wstMTRG, address _mtrgFeed, bytes32 _feedId) {\n    wstMTRG = _wstMTRG;\n    mtrgFeed = _mtrgFeed;\n    feedId = _feedId;\n  }\n\n  function _price(PythStructs.Price memory mtrgPrice) private view returns (PythStructs.Price memory price) {\n    uint256 stMTRGPerToken = IWstMTRG(wstMTRG).stMTRGPerToken();\n    return\n      PythStructs.Price({\n        price: int64(int256((uint64(mtrgPrice.price) * stMTRGPerToken) / 1e18)),\n        conf: mtrgPrice.conf,\n        expo: mtrgPrice.expo,\n        publishTime: mtrgPrice.publishTime\n      });\n  }\n\n  function getPriceUnsafe(bytes32 id) external view returns (PythStructs.Price memory price) {\n    PythStructs.Price memory mtrgPrice = IPyth(mtrgFeed).getPriceUnsafe(feedId);\n    return _price(mtrgPrice);\n  }\n\n  function getValidTimePeriod() external view returns (uint validTimePeriod) {\n    return IPyth(mtrgFeed).getValidTimePeriod();\n  }\n\n  function getPrice(bytes32 id) external view returns (PythStructs.Price memory price) {\n    PythStructs.Price memory mtrgPrice = IPyth(mtrgFeed).getPrice(feedId);\n    return _price(mtrgPrice);\n  }\n\n  function getEmaPrice(bytes32 id) external view returns (PythStructs.Price memory price) {\n    PythStructs.Price memory mtrgPrice = IPyth(mtrgFeed).getEmaPrice(feedId);\n    return _price(mtrgPrice);\n  }\n\n  function getPriceNoOlderThan(bytes32 id, uint age) external view returns (PythStructs.Price memory price) {\n    PythStructs.Price memory mtrgPrice = IPyth(mtrgFeed).getPriceNoOlderThan(feedId, age);\n    return _price(mtrgPrice);\n  }\n\n  function getEmaPriceUnsafe(bytes32 id) external view returns (PythStructs.Price memory price) {\n    PythStructs.Price memory mtrgPrice = IPyth(mtrgFeed).getEmaPriceUnsafe(feedId);\n    return _price(mtrgPrice);\n  }\n\n  function getEmaPriceNoOlderThan(bytes32 id, uint age) external view returns (PythStructs.Price memory price) {\n    PythStructs.Price memory mtrgPrice = IPyth(mtrgFeed).getEmaPriceNoOlderThan(feedId, age);\n    return _price(mtrgPrice);\n  }\n}\n"
    },
    "contracts/proxy/SumerProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract SumerProxy is TransparentUpgradeableProxy {\n    constructor(\n        address logic,\n        address admin_,\n        bytes memory data\n    ) payable TransparentUpgradeableProxy(logic, admin_, data) {}\n}\n"
    },
    "contracts/proxy/SumerProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\nimport \"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\";\n\ncontract SumerProxyAdmin is ProxyAdmin {}"
    },
    "contracts/stake/CommunalFarm.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport '@openzeppelin/contracts/access/Ownable2Step.sol';\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\nimport './TransferHelper.sol';\n\ncontract CommunalFarm is Ownable2Step, ReentrancyGuard {\n  using SafeMath for uint256;\n  using SafeERC20 for IERC20;\n\n  /* ========== STATE VARIABLES ========== */\n\n  // Instances\n  IERC20 public stakingToken;\n\n  // Constant for various precisions\n  uint256 private constant MULTIPLIER_PRECISION = 1e18;\n\n  // Time tracking\n  uint256 public periodFinish;\n  uint256 public lastUpdateTime;\n\n  // Lock time and multiplier settings\n  uint256 public lock_max_multiplier = uint256(3e18); // E18. 1x = e18\n  uint256 public lock_time_for_max_multiplier = 1 * 365 * 86400; // 1 year\n  uint256 public lock_time_min = 86400; // 1 * 86400  (1 day)\n\n  // Reward addresses, rates, and managers\n  mapping(address => address) public rewardManagers; // token addr -> manager addr\n  address[] public rewardTokens;\n  uint256[] public rewardRates;\n  string[] public rewardSymbols;\n  mapping(address => uint256) public rewardTokenAddrToIdx; // token addr -> token index\n\n  // Reward period\n  uint256 public rewardsDuration = 7 days; // 7 * 86400  (7 days)\n\n  // Reward tracking\n  uint256[] private rewardsPerTokenStored;\n  mapping(address => mapping(uint256 => uint256)) private userRewardsPerTokenPaid; // staker addr -> token id -> paid amount\n  mapping(address => mapping(uint256 => uint256)) private rewards; // staker addr -> token id -> reward amount\n  mapping(address => uint256) private lastRewardClaimTime; // staker addr -> timestamp\n\n  // Balance tracking\n  uint256 private _total_liquidity_locked;\n  uint256 private _total_combined_weight;\n  mapping(address => uint256) private _locked_liquidity;\n  mapping(address => uint256) private _combined_weights;\n\n  // Stake tracking\n  mapping(address => LockedStake[]) private lockedStakes;\n\n  // Greylisting of bad addresses\n  mapping(address => bool) public greylist;\n\n  // Administrative booleans\n  bool public stakesUnlocked; // Release locked stakes in case of emergency\n  bool public withdrawalsPaused; // For emergencies\n  bool public rewardsCollectionPaused; // For emergencies\n  bool public stakingPaused; // For emergencies\n\n  /* ========== STRUCTS ========== */\n\n  struct LockedStake {\n    bytes32 kek_id;\n    uint256 start_timestamp;\n    uint256 liquidity;\n    uint256 ending_timestamp;\n    uint256 lock_multiplier; // 6 decimals of precision. 1x = 1000000\n  }\n\n  /* ========== MODIFIERS ========== */\n\n  modifier onlyTknMgrs(address reward_token_address) {\n    require(msg.sender == owner() || isTokenManagerFor(msg.sender, reward_token_address), 'Not owner or tkn mgr');\n    _;\n  }\n\n  modifier updateRewardAndBalance(address account, bool sync_too) {\n    _updateRewardAndBalance(account, sync_too);\n    _;\n  }\n\n  /* ========== CONSTRUCTOR ========== */\n  constructor(\n    address _stakingToken,\n    string[] memory _rewardSymbols,\n    address[] memory _rewardTokens,\n    address[] memory _rewardManagers,\n    uint256[] memory _rewardRates\n  ) {\n    stakingToken = IERC20(_stakingToken);\n\n    rewardTokens = _rewardTokens;\n    rewardRates = _rewardRates;\n    rewardSymbols = _rewardSymbols;\n\n    for (uint256 i = 0; i < _rewardTokens.length; i++) {\n      // For fast token address -> token ID lookups later\n      rewardTokenAddrToIdx[_rewardTokens[i]] = i;\n\n      // Initialize the stored rewards\n      rewardsPerTokenStored.push(0);\n\n      // Initialize the reward managers\n      rewardManagers[_rewardTokens[i]] = _rewardManagers[i];\n    }\n\n    // Other booleans\n    stakesUnlocked = false;\n\n    // Initialization\n    lastUpdateTime = block.timestamp;\n    periodFinish = block.timestamp.add(rewardsDuration);\n  }\n\n  /* ========== VIEWS ========== */\n\n  // Total locked liquidity tokens\n  function totalLiquidityLocked() external view returns (uint256) {\n    return _total_liquidity_locked;\n  }\n\n  // Locked liquidity for a given account\n  function lockedLiquidityOf(address account) external view returns (uint256) {\n    return _locked_liquidity[account];\n  }\n\n  // Total 'balance' used for calculating the percent of the pool the account owns\n  // Takes into account the locked stake time multiplier\n  function totalCombinedWeight() external view returns (uint256) {\n    return _total_combined_weight;\n  }\n\n  // Combined weight for a specific account\n  function combinedWeightOf(address account) external view returns (uint256) {\n    return _combined_weights[account];\n  }\n\n  // Calculated the combined weight for an account\n  function calcCurCombinedWeight(\n    address account\n  ) public view returns (uint256 old_combined_weight, uint256 new_combined_weight) {\n    // Get the old combined weight\n    old_combined_weight = _combined_weights[account];\n\n    // Loop through the locked stakes, first by getting the liquidity * lock_multiplier portion\n    new_combined_weight = 0;\n    for (uint256 i = 0; i < lockedStakes[account].length; i++) {\n      LockedStake memory thisStake = lockedStakes[account][i];\n      uint256 lock_multiplier = thisStake.lock_multiplier;\n\n      // If the lock is expired\n      if (thisStake.ending_timestamp <= block.timestamp) {\n        // If the lock expired in the time since the last claim, the weight needs to be proportionately averaged this time\n        if (lastRewardClaimTime[account] < thisStake.ending_timestamp) {\n          uint256 time_before_expiry = (thisStake.ending_timestamp).sub(lastRewardClaimTime[account]);\n          uint256 time_after_expiry = (block.timestamp).sub(thisStake.ending_timestamp);\n\n          // Get the weighted-average lock_multiplier\n          uint256 numerator = ((lock_multiplier).mul(time_before_expiry)).add(\n            ((MULTIPLIER_PRECISION).mul(time_after_expiry))\n          );\n          lock_multiplier = numerator.div(time_before_expiry.add(time_after_expiry));\n        }\n        // Otherwise, it needs to just be 1x\n        else {\n          lock_multiplier = MULTIPLIER_PRECISION;\n        }\n      }\n\n      uint256 liquidity = thisStake.liquidity;\n      uint256 combined_boosted_amount = liquidity.mul(lock_multiplier).div(MULTIPLIER_PRECISION);\n      new_combined_weight = new_combined_weight.add(combined_boosted_amount);\n    }\n  }\n\n  // All the locked stakes for a given account\n  function lockedStakesOf(address account) external view returns (LockedStake[] memory) {\n    return lockedStakes[account];\n  }\n\n  // All the locked stakes for a given account\n  function getRewardSymbols() external view returns (string[] memory) {\n    return rewardSymbols;\n  }\n\n  // All the reward tokens\n  function getAllRewardTokens() external view returns (address[] memory) {\n    return rewardTokens;\n  }\n\n  // All the reward rates\n  function getAllRewardRates() external view returns (uint256[] memory) {\n    return rewardRates;\n  }\n\n  // Multiplier amount, given the length of the lock\n  function lockMultiplier(uint256 secs) public view returns (uint256) {\n    uint256 lock_multiplier = uint256(MULTIPLIER_PRECISION).add(\n      secs.mul(lock_max_multiplier.sub(MULTIPLIER_PRECISION)).div(lock_time_for_max_multiplier)\n    );\n    if (lock_multiplier > lock_max_multiplier) lock_multiplier = lock_max_multiplier;\n    return lock_multiplier;\n  }\n\n  // Last time the reward was applicable\n  function lastTimeRewardApplicable() internal view returns (uint256) {\n    return min(block.timestamp, periodFinish);\n  }\n\n  // Amount of reward tokens per LP token\n  function rewardsPerToken() public view returns (uint256[] memory newRewardsPerTokenStored) {\n    if (_total_liquidity_locked == 0 || _total_combined_weight == 0) {\n      return rewardsPerTokenStored;\n    } else {\n      newRewardsPerTokenStored = new uint256[](rewardTokens.length);\n      for (uint256 i = 0; i < rewardsPerTokenStored.length; i++) {\n        newRewardsPerTokenStored[i] = rewardsPerTokenStored[i].add(\n          lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRates[i]).mul(1e18).div(_total_combined_weight)\n        );\n      }\n      return newRewardsPerTokenStored;\n    }\n  }\n\n  // Amount of reward tokens an account has earned / accrued\n  // Note: In the edge-case of one of the account's stake expiring since the last claim, this will\n  // return a slightly inflated number\n  function earned(address account) public view returns (uint256[] memory new_earned) {\n    uint256[] memory reward_arr = rewardsPerToken();\n    new_earned = new uint256[](rewardTokens.length);\n\n    if (_combined_weights[account] == 0) {\n      for (uint256 i = 0; i < rewardTokens.length; i++) {\n        new_earned[i] = 0;\n      }\n    } else {\n      for (uint256 i = 0; i < rewardTokens.length; i++) {\n        new_earned[i] = (_combined_weights[account])\n          .mul(reward_arr[i].sub(userRewardsPerTokenPaid[account][i]))\n          .div(1e18)\n          .add(rewards[account][i]);\n      }\n    }\n  }\n\n  // Total reward tokens emitted in the given period\n  function getRewardForDuration() external view returns (uint256[] memory rewards_per_duration_arr) {\n    rewards_per_duration_arr = new uint256[](rewardRates.length);\n\n    for (uint256 i = 0; i < rewardRates.length; i++) {\n      rewards_per_duration_arr[i] = rewardRates[i].mul(rewardsDuration);\n    }\n  }\n\n  // See if the caller_addr is a manager for the reward token\n  function isTokenManagerFor(address caller_addr, address reward_token_addr) public view returns (bool) {\n    if (caller_addr == owner()) return true;\n    // Contract owner\n    else if (rewardManagers[reward_token_addr] == caller_addr) return true; // Reward manager\n    return false;\n  }\n\n  /* ========== MUTATIVE FUNCTIONS ========== */\n\n  function _updateRewardAndBalance(address account, bool sync_too) internal {\n    // Need to retro-adjust some things if the period hasn't been renewed, then start a new one\n    if (sync_too) {\n      sync();\n    }\n\n    if (account != address(0)) {\n      // To keep the math correct, the user's combined weight must be recomputed\n      (uint256 old_combined_weight, uint256 new_combined_weight) = calcCurCombinedWeight(account);\n\n      // Calculate the earnings first\n      _syncEarned(account);\n\n      // Update the user's and the global combined weights\n      if (new_combined_weight >= old_combined_weight) {\n        uint256 weight_diff = new_combined_weight.sub(old_combined_weight);\n        _total_combined_weight = _total_combined_weight.add(weight_diff);\n        _combined_weights[account] = old_combined_weight.add(weight_diff);\n      } else {\n        uint256 weight_diff = old_combined_weight.sub(new_combined_weight);\n        _total_combined_weight = _total_combined_weight.sub(weight_diff);\n        _combined_weights[account] = old_combined_weight.sub(weight_diff);\n      }\n    }\n  }\n\n  function _syncEarned(address account) internal {\n    if (account != address(0)) {\n      // Calculate the earnings\n      uint256[] memory earned_arr = earned(account);\n\n      // Update the rewards array\n      for (uint256 i = 0; i < earned_arr.length; i++) {\n        rewards[account][i] = earned_arr[i];\n      }\n\n      // Update the rewards paid array\n      for (uint256 i = 0; i < earned_arr.length; i++) {\n        userRewardsPerTokenPaid[account][i] = rewardsPerTokenStored[i];\n      }\n    }\n  }\n\n  // Two different stake functions are needed because of delegateCall and msg.sender issues\n  function stakeLocked(uint256 liquidity, uint256 secs) public nonReentrant {\n    _stakeLocked(msg.sender, msg.sender, liquidity, secs, block.timestamp);\n  }\n\n  // If this were not internal, and source_address had an infinite approve, this could be exploitable\n  // (pull funds from source_address and stake for an arbitrary staker_address)\n  function _stakeLocked(\n    address staker_address,\n    address source_address,\n    uint256 liquidity,\n    uint256 secs,\n    uint256 start_timestamp\n  ) internal updateRewardAndBalance(staker_address, true) {\n    require(!stakingPaused, 'Staking paused');\n    require(liquidity > 0, 'Must stake more than zero');\n    require(greylist[staker_address] == false, 'Address has been greylisted');\n    require(secs >= lock_time_min, 'Minimum stake time not met');\n    require(secs <= lock_time_for_max_multiplier, 'Trying to lock for too long');\n\n    uint256 lock_multiplier = lockMultiplier(secs);\n    bytes32 kek_id = keccak256(\n      abi.encodePacked(staker_address, start_timestamp, liquidity, _locked_liquidity[staker_address])\n    );\n    lockedStakes[staker_address].push(\n      LockedStake(kek_id, start_timestamp, liquidity, start_timestamp.add(secs), lock_multiplier)\n    );\n\n    // Pull the tokens from the source_address\n    TransferHelper.safeTransferFrom(address(stakingToken), source_address, address(this), liquidity);\n\n    // Update liquidities\n    _total_liquidity_locked = _total_liquidity_locked.add(liquidity);\n    _locked_liquidity[staker_address] = _locked_liquidity[staker_address].add(liquidity);\n\n    // Need to call to update the combined weights\n    _updateRewardAndBalance(staker_address, true);\n\n    // Needed for edge case if the staker only claims once, and after the lock expired\n    if (lastRewardClaimTime[staker_address] == 0) lastRewardClaimTime[staker_address] = block.timestamp;\n\n    emit StakeLocked(staker_address, liquidity, secs, kek_id, source_address);\n  }\n\n  // Two different withdrawLocked functions are needed because of delegateCall and msg.sender issues\n  function withdrawLocked(bytes32 kek_id) public nonReentrant {\n    require(withdrawalsPaused == false, 'Withdrawals paused');\n    _withdrawLocked(msg.sender, msg.sender, kek_id);\n  }\n\n  // No withdrawer == msg.sender check needed since this is only internally callable and the checks are done in the wrapper\n  // functions like withdraw()\n  function _withdrawLocked(address staker_address, address destination_address, bytes32 kek_id) internal {\n    // Collect rewards first and then update the balances\n    _getReward(staker_address, destination_address);\n\n    LockedStake memory thisStake;\n    thisStake.liquidity = 0;\n    uint256 theArrayIndex;\n    for (uint256 i = 0; i < lockedStakes[staker_address].length; i++) {\n      if (kek_id == lockedStakes[staker_address][i].kek_id) {\n        thisStake = lockedStakes[staker_address][i];\n        theArrayIndex = i;\n        break;\n      }\n    }\n    require(thisStake.kek_id == kek_id, 'Stake not found');\n    require(block.timestamp >= thisStake.ending_timestamp || stakesUnlocked == true, 'Stake is still locked!');\n\n    uint256 liquidity = thisStake.liquidity;\n\n    if (liquidity > 0) {\n      // Update liquidities\n      _total_liquidity_locked = _total_liquidity_locked.sub(liquidity);\n      _locked_liquidity[staker_address] = _locked_liquidity[staker_address].sub(liquidity);\n\n      // Remove the stake from the array\n      delete lockedStakes[staker_address][theArrayIndex];\n\n      // Need to call to update the combined weights\n      _updateRewardAndBalance(staker_address, false);\n\n      // Give the tokens to the destination_address\n      // Should throw if insufficient balance\n      stakingToken.safeTransfer(destination_address, liquidity);\n\n      emit WithdrawLocked(staker_address, liquidity, kek_id, destination_address);\n    }\n  }\n\n  // Two different getReward functions are needed because of delegateCall and msg.sender issues\n  function getReward() external nonReentrant returns (uint256[] memory) {\n    require(rewardsCollectionPaused == false, 'Rewards collection paused');\n    return _getReward(msg.sender, msg.sender);\n  }\n\n  // No withdrawer == msg.sender check needed since this is only internally callable\n  function _getReward(\n    address rewardee,\n    address destination_address\n  ) internal updateRewardAndBalance(rewardee, true) returns (uint256[] memory rewards_before) {\n    // Update the rewards array and distribute rewards\n    rewards_before = new uint256[](rewardTokens.length);\n\n    for (uint256 i = 0; i < rewardTokens.length; i++) {\n      rewards_before[i] = rewards[rewardee][i];\n      rewards[rewardee][i] = 0;\n      IERC20(rewardTokens[i]).safeTransfer(destination_address, rewards_before[i]);\n      emit RewardPaid(rewardee, rewards_before[i], rewardTokens[i], destination_address);\n    }\n\n    lastRewardClaimTime[rewardee] = block.timestamp;\n  }\n\n  // If the period expired, renew it\n  function retroCatchUp() internal {\n    // Failsafe check\n    require(block.timestamp > periodFinish, 'Period has not expired yet!');\n\n    // Ensure the provided reward amount is not more than the balance in the contract.\n    // This keeps the reward rate in the right range, preventing overflows due to\n    // very high values of rewardRate in the earned and rewardsPerToken functions;\n    // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\n    uint256 num_periods_elapsed = uint256(block.timestamp.sub(periodFinish)) / rewardsDuration; // Floor division to the nearest period\n\n    // Make sure there are enough tokens to renew the reward period\n    for (uint256 i = 0; i < rewardTokens.length; i++) {\n      require(\n        rewardRates[i].mul(rewardsDuration).mul(num_periods_elapsed + 1) <=\n          IERC20(rewardTokens[i]).balanceOf(address(this)),\n        string(abi.encodePacked('Not enough reward tokens available: ', rewardTokens[i]))\n      );\n    }\n\n    // uint256 old_lastUpdateTime = lastUpdateTime;\n    // uint256 new_lastUpdateTime = block.timestamp;\n\n    // lastUpdateTime = periodFinish;\n    periodFinish = periodFinish.add((num_periods_elapsed.add(1)).mul(rewardsDuration));\n\n    _updateStoredRewardsAndTime();\n\n    emit RewardsPeriodRenewed(address(stakingToken));\n  }\n\n  function _updateStoredRewardsAndTime() internal {\n    // Get the rewards\n    uint256[] memory rewards_per_token = rewardsPerToken();\n\n    // Update the rewardsPerTokenStored\n    for (uint256 i = 0; i < rewardsPerTokenStored.length; i++) {\n      rewardsPerTokenStored[i] = rewards_per_token[i];\n    }\n\n    // Update the last stored time\n    lastUpdateTime = lastTimeRewardApplicable();\n  }\n\n  function sync() public {\n    if (block.timestamp > periodFinish) {\n      retroCatchUp();\n    } else {\n      _updateStoredRewardsAndTime();\n    }\n  }\n\n  /* ========== RESTRICTED FUNCTIONS ========== */\n\n  // Added to support recovering LP Rewards and other mistaken tokens from other systems to be distributed to holders\n  function recoverERC20(address tokenAddress, uint256 tokenAmount) external {\n    // Cannot rug the staking / LP tokens\n    require(tokenAddress != address(stakingToken), 'Cannot rug staking / LP tokens');\n\n    for (uint256 i = 0; i < rewardTokens.length; i++) {\n      if (rewardTokens[i] == tokenAddress) {\n        revert('No valid tokens to recover');\n      }\n    }\n    if (msg.sender == owner()) {\n      IERC20(tokenAddress).safeTransfer(msg.sender, tokenAmount);\n      emit Recovered(msg.sender, tokenAddress, tokenAmount);\n      return;\n    } else {\n      revert('No valid tokens to recover');\n    }\n  }\n\n  function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {\n    require(_rewardsDuration >= 86400, 'Rewards duration too short');\n    require(periodFinish == 0 || block.timestamp > periodFinish, 'Reward period incomplete');\n    rewardsDuration = _rewardsDuration;\n    emit RewardsDurationUpdated(rewardsDuration);\n  }\n\n  function setMultipliers(uint256 _lock_max_multiplier) external onlyOwner {\n    require(_lock_max_multiplier >= uint256(1e18), 'Multiplier must be greater than or equal to 1e18');\n    lock_max_multiplier = _lock_max_multiplier;\n    emit LockedStakeMaxMultiplierUpdated(lock_max_multiplier);\n  }\n\n  function setLockedStakeTimeForMinAndMaxMultiplier(\n    uint256 _lock_time_for_max_multiplier,\n    uint256 _lock_time_min\n  ) external onlyOwner {\n    require(_lock_time_for_max_multiplier >= 1, 'Mul max time must be >= 1');\n    require(_lock_time_min >= 1, 'Mul min time must be >= 1');\n\n    lock_time_for_max_multiplier = _lock_time_for_max_multiplier;\n    lock_time_min = _lock_time_min;\n\n    emit LockedStakeTimeForMaxMultiplier(lock_time_for_max_multiplier);\n    emit LockedStakeMinTime(_lock_time_min);\n  }\n\n  function greylistAddress(address _address) external onlyOwner {\n    greylist[_address] = !(greylist[_address]);\n  }\n\n  function unlockStakes() external onlyOwner {\n    stakesUnlocked = !stakesUnlocked;\n  }\n\n  function toggleStaking() external onlyOwner {\n    stakingPaused = !stakingPaused;\n  }\n\n  function toggleWithdrawals() external onlyOwner {\n    withdrawalsPaused = !withdrawalsPaused;\n  }\n\n  function toggleRewardsCollection() external onlyOwner {\n    rewardsCollectionPaused = !rewardsCollectionPaused;\n  }\n\n  // The owner or the reward token managers can set reward rates\n  function setRewardRate(\n    address reward_token_address,\n    uint256 new_rate,\n    bool sync_too\n  ) external onlyTknMgrs(reward_token_address) {\n    rewardRates[rewardTokenAddrToIdx[reward_token_address]] = new_rate;\n\n    if (sync_too) {\n      sync();\n    }\n  }\n\n  // The owner or the reward token managers can change managers\n  function changeTokenManager(\n    address reward_token_address,\n    address new_manager_address\n  ) external onlyTknMgrs(reward_token_address) {\n    rewardManagers[reward_token_address] = new_manager_address;\n  }\n\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n\n  /* ========== EVENTS ========== */\n\n  event StakeLocked(address indexed user, uint256 amount, uint256 secs, bytes32 kek_id, address source_address);\n  event WithdrawLocked(address indexed user, uint256 amount, bytes32 kek_id, address destination_address);\n  event RewardPaid(address indexed user, uint256 reward, address token_address, address destination_address);\n  event RewardsDurationUpdated(uint256 newDuration);\n  event Recovered(address destination_address, address token, uint256 amount);\n  event RewardsPeriodRenewed(address token);\n  event LockedStakeMaxMultiplierUpdated(uint256 multiplier);\n  event LockedStakeTimeForMaxMultiplier(uint256 secs);\n  event LockedStakeMinTime(uint256 secs);\n}\n"
    },
    "contracts/stake/FraxGaugeController.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.19;\n\nstruct Point {\n  uint256 bias;\n  uint256 slope;\n}\n\nstruct CorrectedPoint {\n  uint256 bias;\n  uint256 slope;\n  uint256 lock_end;\n  uint256 fxs_amount;\n}\n\nstruct VotedSlope {\n  uint256 slope;\n  uint256 power;\n  uint256 end;\n}\n\nstruct LockedBalance {\n  int128 amount;\n  uint256 end;\n}\n\ninterface VotingEscrow {\n  function balanceOf(address addr) external view returns (uint256);\n\n  function locked__end(address addr) external view returns (uint256);\n\n  function locked(address addr) external view returns (LockedBalance memory);\n}\n\ncontract FraxGaugeController {\n  uint256 public constant WEEK = 7 days;\n  uint256 public constant WEIGHT_VOTE_DELAY = 10 * 86400;\n  uint256 public constant MULTIPLIER = 10 ** 18;\n\n  event CommitOwnership(address admin);\n  event ApplyOwnership(address admin);\n  event AddType(string name, int128 type_id);\n  event NewTypeWeight(int128 type_id, uint256 time, uint256 weight, uint256 total_weight);\n  event NewGaugeWeight(address gauge_address, uint256 time, uint256 weight, uint256 total_weight);\n  event VoteForGauge(uint256 time, address user, address gauge_addr, uint256 weight);\n  event NewGauge(address addr, int128 gauge_type, uint256 weight);\n\n  address public admin;\n  address public future_admin;\n  address public token;\n  address public voting_escrow;\n\n  int128 public n_gauge_types = 1;\n  int128 public n_gauges;\n  uint256 public time_total;\n  uint256 public global_emission_rate = 1e18;\n\n  address[1000000000] public gauges;\n  uint256[1000000000] public time_sum;\n  uint256[1000000000] public time_type_weight;\n\n  mapping(address => int128) public gauge_types_;\n  mapping(address => uint256) public vote_user_power;\n  mapping(address => uint256) public time_weight;\n  mapping(uint256 => uint256) public points_total;\n  mapping(int128 => string) public gauge_type_names;\n  mapping(address => mapping(uint256 => uint256)) public changes_weight;\n  mapping(address => mapping(address => uint256)) public last_user_vote;\n  mapping(int128 => mapping(uint256 => uint256)) public changes_sum;\n  mapping(int128 => mapping(uint256 => uint256)) public points_type_weight;\n  mapping(address => mapping(uint256 => Point)) public points_weight;\n  mapping(int128 => mapping(uint256 => Point)) public points_sum;\n  mapping(address => mapping(address => VotedSlope)) public vote_user_slopes;\n\n  constructor(address _token, address _voting_escrow) {\n    require(_token != address(0), '!_token');\n    require(_voting_escrow != address(0), '!_voting_escrow');\n\n    admin = msg.sender;\n    token = _token;\n    voting_escrow = _voting_escrow;\n    time_total = (block.timestamp / WEEK) * WEEK;\n  }\n\n  modifier onlyAdmin() {\n    require(admin == msg.sender, 'only admin');\n    _;\n  }\n\n  function commit_transfer_ownership(address addr) external onlyAdmin {\n    future_admin = addr;\n    emit CommitOwnership(addr);\n  }\n\n  function apply_transfer_ownership() external onlyAdmin {\n    address _admin = future_admin;\n    require(_admin != address(0), '!future_admin');\n    admin = _admin;\n    emit ApplyOwnership(admin);\n  }\n\n  function _get_corrected_info(address addr) internal view returns (CorrectedPoint memory) {\n    address escrow = voting_escrow;\n    uint256 veSumer_balance = VotingEscrow(escrow).balanceOf(addr);\n    LockedBalance memory locked_balance = VotingEscrow(escrow).locked(addr);\n    uint256 locked_end = locked_balance.end;\n    uint256 locked_sumer = uint128(locked_balance.amount);\n\n    uint256 corrected_slope;\n    if (locked_end > block.timestamp) {\n      corrected_slope = veSumer_balance / (locked_end - block.timestamp);\n    }\n\n    return\n      CorrectedPoint({bias: veSumer_balance, slope: corrected_slope, lock_end: locked_end, fxs_amount: locked_sumer});\n  }\n\n  function get_corrected_info(address addr) external view returns (CorrectedPoint memory) {\n    return _get_corrected_info(addr);\n  }\n\n  function gauge_types(address _addr) external view returns (int128) {\n    int128 gauge_type = gauge_types_[_addr];\n    require(gauge_type != 0, '!gauge_type');\n    return gauge_type - 1;\n  }\n\n  function _get_type_weight(int128 gauge_type) internal returns (uint256) {\n    uint256 t = time_type_weight[uint128(gauge_type)];\n    if (t > 0) {\n      uint256 w = points_type_weight[gauge_type][t];\n      for (uint256 i; i < 500; ++i) {\n        if (t > block.timestamp) break;\n        t += WEEK;\n        points_type_weight[gauge_type][t] = w;\n        if (t > block.timestamp) {\n          time_type_weight[uint128(gauge_type)] = t;\n        }\n      }\n      return w;\n    } else {\n      return 0;\n    }\n  }\n\n  function _get_sum(int128 gauge_type) internal returns (uint256) {\n    uint256 t = time_sum[uint128(gauge_type)];\n    if (t > 0) {\n      Point memory pt = points_sum[gauge_type][t];\n      for (uint256 i; i < 500; ++i) {\n        if (t > block.timestamp) break;\n        t += WEEK;\n        uint256 d_bias = pt.slope * WEEK;\n        if (pt.bias > d_bias) {\n          pt.bias -= d_bias;\n          uint256 d_slope = changes_sum[gauge_type][t];\n          pt.slope -= d_slope;\n        } else {\n          pt.bias = 0;\n          pt.slope = 0;\n        }\n        points_sum[gauge_type][t] = pt;\n        if (t > block.timestamp) {\n          time_sum[uint128(gauge_type)] = t;\n        }\n      }\n      return pt.bias;\n    } else {\n      return 0;\n    }\n  }\n\n  function _get_total() internal returns (uint256) {\n    uint256 t = time_total;\n    int128 _n_gauge_types = n_gauge_types;\n\n    if (t > block.timestamp) {\n      t -= WEEK;\n    }\n    uint256 pt = points_total[t];\n\n    for (int128 gauge_type; gauge_type < 100; ++gauge_type) {\n      if (gauge_type == _n_gauge_types) break;\n      _get_sum(gauge_type);\n      _get_type_weight(gauge_type);\n    }\n    for (uint256 i; i < 500; ++i) {\n      if (t > block.timestamp) break;\n      t += WEEK;\n      pt = 0;\n      for (int128 gauge_type; gauge_type < 100; ++gauge_type) {\n        if (gauge_type == _n_gauge_types) break;\n        uint256 type_sum = points_sum[gauge_type][t].bias;\n        uint256 type_weight = points_type_weight[gauge_type][t];\n        pt += type_sum * type_weight;\n      }\n      points_total[t] = pt;\n      if (t > block.timestamp) time_total = t;\n    }\n    return pt;\n  }\n\n  function _get_weight(address gauge_addr) internal returns (uint256) {\n    uint256 t = time_weight[gauge_addr];\n    if (t > 0) {\n      Point memory pt = points_weight[gauge_addr][t];\n      for (uint256 i; i < 500; ++i) {\n        if (t > block.timestamp) break;\n        t += WEEK;\n        uint256 d_bias = pt.slope * WEEK;\n        if (pt.bias > d_bias) {\n          pt.bias -= d_bias;\n          uint256 d_slope = changes_weight[gauge_addr][t];\n          pt.slope -= d_slope;\n        } else {\n          pt.bias = 0;\n          pt.slope = 0;\n        }\n        points_weight[gauge_addr][t] = pt;\n        if (t > block.timestamp) time_weight[gauge_addr] = t;\n      }\n      return pt.bias;\n    } else {\n      return 0;\n    }\n  }\n\n  function add_gauge(address addr, int128 gauge_type, uint256 weight) external onlyAdmin {\n    require(weight >= 0, '!weight');\n    require(gauge_type >= 0 && gauge_type < n_gauge_types, '!gauge_type');\n    require(gauge_types_[addr] == 0, '!gauge_types');\n\n    int128 n = n_gauges;\n    n_gauges = n + 1;\n    gauges[uint128(n)] = addr;\n\n    gauge_types_[addr] = gauge_type + 1;\n    uint256 next_time = ((block.timestamp + WEEK) / WEEK) * WEEK;\n\n    if (weight > 0) {\n      uint256 _type_weight = _get_type_weight(gauge_type);\n      uint256 _old_sum = _get_sum(gauge_type);\n      uint256 _old_total = _get_total();\n\n      points_sum[gauge_type][next_time].bias = weight + _old_sum;\n      time_sum[uint128(gauge_type)] = next_time;\n      points_total[next_time] = _old_total + _type_weight * weight;\n      time_total = next_time;\n      points_weight[addr][next_time].bias = weight;\n    }\n    if (time_sum[uint128(gauge_type)] == 0) {\n      time_sum[uint128(gauge_type)] = next_time;\n    }\n    time_weight[addr] = next_time;\n    emit NewGauge(addr, gauge_type, weight);\n  }\n\n  function checkpoint() external returns (uint256) {\n    return _get_total();\n  }\n\n  function checkpoint_gauge(address addr) external {\n    _get_weight(addr);\n    _get_total();\n  }\n\n  function _gauge_relative_weight(address addr, uint256 time) internal view returns (uint256) {\n    uint256 t = (time / WEEK) * WEEK;\n    uint256 _total_weight = points_total[t];\n\n    if (_total_weight > 0) {\n      int128 gauge_type = gauge_types_[addr] - 1;\n      uint256 _type_weight = points_type_weight[gauge_type][t];\n      uint256 _gauge_weight = points_weight[addr][t].bias;\n      return (MULTIPLIER * _type_weight * _gauge_weight) / _total_weight;\n    } else {\n      return 0;\n    }\n  }\n\n  function gauge_relative_weight(address addr, uint256 time) external view returns (uint256) {\n    return _gauge_relative_weight(addr, time);\n  }\n\n  function gauge_relative_weight_write(address addr, uint256 time) external returns (uint256) {\n    _get_weight(addr);\n    _get_total();\n    return _gauge_relative_weight(addr, time);\n  }\n\n  function _change_type_weight(int128 type_id, uint256 weight) internal {\n    uint256 old_weight = _get_type_weight(type_id);\n    uint256 old_sum = _get_sum(type_id);\n    uint256 _total_weight = _get_total();\n    uint256 next_time = ((block.timestamp + WEEK) / WEEK) * WEEK;\n\n    _total_weight = _total_weight + old_sum * weight - old_sum * old_weight;\n    points_total[next_time] = _total_weight;\n    points_type_weight[type_id][next_time] = weight;\n    time_total = next_time;\n    time_type_weight[uint128(type_id)] = next_time;\n\n    emit NewTypeWeight(type_id, next_time, weight, _total_weight);\n  }\n\n  function add_type(string memory _name, uint256 weight) external {\n    assert(msg.sender == admin);\n    assert(weight >= 0);\n    int128 type_id = n_gauge_types;\n    gauge_type_names[type_id] = _name;\n    n_gauge_types = type_id + 1;\n    if (weight != 0) {\n      _change_type_weight(type_id, weight);\n      emit AddType(_name, type_id);\n    }\n  }\n\n  function change_type_weight(int128 type_id, uint256 weight) external {\n    assert(msg.sender == admin);\n    _change_type_weight(type_id, weight);\n  }\n\n  function _change_gauge_weight(address addr, uint256 weight) internal {\n    int128 gauge_type = gauge_types_[addr] - 1;\n    uint256 old_gauge_weight = _get_weight(addr);\n    uint256 type_weight = _get_type_weight(gauge_type);\n    uint256 old_sum = _get_sum(gauge_type);\n    uint256 _total_weight = _get_total();\n    uint256 next_time = ((block.timestamp + WEEK) / WEEK) * WEEK;\n\n    points_weight[addr][next_time].bias = weight;\n    time_weight[addr] = next_time;\n\n    uint256 new_sum = old_sum + weight - old_gauge_weight;\n    points_sum[gauge_type][next_time].bias = new_sum;\n    time_sum[uint128(gauge_type)] = next_time;\n\n    _total_weight = _total_weight + new_sum * type_weight - old_sum * type_weight;\n    points_total[next_time] = _total_weight;\n    time_total = next_time;\n\n    emit NewGaugeWeight(addr, block.timestamp, weight, _total_weight);\n  }\n\n  function change_gauge_weight(address addr, uint256 weight) external {\n    assert(msg.sender == admin);\n    _change_gauge_weight(addr, weight);\n  }\n\n  function vote_for_gauge_weights(address _gauge_addr, uint256 _user_weight) external {\n    CorrectedPoint memory corrected_point = _get_corrected_info(msg.sender);\n    uint256 slope = corrected_point.slope;\n    uint256 lock_end = corrected_point.lock_end;\n\n    // int128 _n_gauges = n_gauges;\n    uint256 next_time = ((block.timestamp + WEEK) / WEEK) * WEEK;\n    require(lock_end > next_time, 'Your token lock expires too soon');\n    require((_user_weight >= 0) && (_user_weight <= 10000), 'You used all your voting power');\n    require(block.timestamp >= last_user_vote[msg.sender][_gauge_addr] + WEIGHT_VOTE_DELAY, 'Cannot vote so often');\n\n    int128 gauge_type = gauge_types_[_gauge_addr] - 1;\n    require(gauge_type >= 0, 'Gauge not added');\n    // Prepare slopes and biases in memory\n    VotedSlope memory old_slope = vote_user_slopes[msg.sender][_gauge_addr];\n    uint256 old_dt = 0;\n    if (old_slope.end > next_time) {\n      old_dt = old_slope.end - next_time;\n    }\n    uint256 old_bias = old_slope.slope * old_dt;\n    VotedSlope memory new_slope = VotedSlope({\n      slope: (slope * _user_weight) / 10000,\n      power: _user_weight,\n      end: lock_end\n    });\n    uint256 new_dt = lock_end - next_time; // raises dev when expired\n    uint256 new_bias = new_slope.slope * new_dt;\n\n    // Check and update powers (weights) used\n    uint256 power_used = vote_user_power[msg.sender];\n    power_used = power_used + new_slope.power - old_slope.power;\n    vote_user_power[msg.sender] = power_used;\n    require((power_used >= 0) && (power_used <= 10000), 'Used too much power');\n\n    // Remove old and schedule new slope changes\n    // Remove slope changes for old slopes\n    // Schedule recording of initial slope for next_time\n    uint256 old_weight_bias = _get_weight(_gauge_addr);\n    uint256 old_weight_slope = points_weight[_gauge_addr][next_time].slope;\n    uint256 old_sum_bias = _get_sum(gauge_type);\n    uint256 old_sum_slope = points_sum[gauge_type][next_time].slope;\n\n    points_weight[_gauge_addr][next_time].bias = max(old_weight_bias + new_bias, old_bias) - old_bias;\n    points_sum[gauge_type][next_time].bias = max(old_sum_bias + new_bias, old_bias) - old_bias;\n    if (old_slope.end > next_time) {\n      points_weight[_gauge_addr][next_time].slope =\n        max(old_weight_slope + new_slope.slope, old_slope.slope) -\n        old_slope.slope;\n      points_sum[gauge_type][next_time].slope = max(old_sum_slope + new_slope.slope, old_slope.slope) - old_slope.slope;\n    } else {\n      points_weight[_gauge_addr][next_time].slope += new_slope.slope;\n      points_sum[gauge_type][next_time].slope += new_slope.slope;\n    }\n    if (old_slope.end > block.timestamp) {\n      // Cancel old slope changes if they still didn't happen\n      changes_weight[_gauge_addr][old_slope.end] -= old_slope.slope;\n      changes_sum[gauge_type][old_slope.end] -= old_slope.slope;\n    }\n    // Add slope changes for new slopes\n    changes_weight[_gauge_addr][new_slope.end] += new_slope.slope;\n    changes_sum[gauge_type][new_slope.end] += new_slope.slope;\n\n    _get_total();\n\n    vote_user_slopes[msg.sender][_gauge_addr] = new_slope;\n\n    // Record last action time\n    last_user_vote[msg.sender][_gauge_addr] = block.timestamp;\n\n    emit VoteForGauge(block.timestamp, msg.sender, _gauge_addr, _user_weight);\n  }\n\n  function get_gauge_weight(address addr) external view returns (uint256) {\n    return points_weight[addr][time_weight[addr]].bias;\n  }\n\n  function get_type_weight(int128 type_id) external view returns (uint256) {\n    return points_type_weight[type_id][time_type_weight[uint128(type_id)]];\n  }\n\n  function get_total_weight() external view returns (uint256) {\n    return points_total[time_total];\n  }\n\n  function get_weights_sum_per_type(int128 type_id) external view returns (uint256) {\n    return points_sum[type_id][time_sum[uint128(type_id)]].bias;\n  }\n\n  function change_global_emission_rate(uint256 new_rate) external {\n    assert(msg.sender == admin);\n    global_emission_rate = new_rate;\n  }\n\n  function max(uint a, uint b) internal pure returns (uint) {\n    return a >= b ? a : b;\n  }\n}\n"
    },
    "contracts/stake/FraxGaugeFXSRewardsDistributor.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.19;\n\n// ====================================================================\n// |     ______                   _______                             |\n// |    / _____________ __  __   / ____(_____  ____ _____  ________   |\n// |   / /_  / ___/ __ `| |/_/  / /_  / / __ \\/ __ `/ __ \\/ ___/ _ \\  |\n// |  / __/ / /  / /_/ _>  <   / __/ / / / / / /_/ / / / / /__/  __/  |\n// | /_/   /_/   \\__,_/_/|_|  /_/   /_/_/ /_/\\__,_/_/ /_/\\___/\\___/   |\n// |                                                                  |\n// ====================================================================\n// ================== FraxGaugeFXSRewardsDistributor ==================\n// ====================================================================\n// Looks at the gauge controller contract and pushes out FXS rewards once\n// a week to the gauges (farms)\n\n// Frax Finance: https://github.com/FraxFinance\n\n// Primary Author(s)\n// Travis Moore: https://github.com/FortisFortuna\n\n// Reviewer(s) / Contributor(s)\n// Jason Huan: https://github.com/jasonhuan\n// Sam Kazemian: https://github.com/samkazemian\n\nimport '@openzeppelin/contracts/utils/math/Math.sol';\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport './IFraxGaugeController.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\nimport './TransferHelper.sol';\n\ncontract FraxGaugeFXSRewardsDistributor is Ownable, ReentrancyGuard {\n  using SafeMath for uint256;\n  using SafeERC20 for ERC20;\n\n  /* ========== STATE VARIABLES ========== */\n\n  // Instances and addresses\n  address public reward_token_address;\n  IFraxGaugeController public gauge_controller;\n\n  // Admin addresses\n  address public timelock_address;\n  address public curator_address;\n\n  // Constants\n  uint256 private constant MULTIPLIER_PRECISION = 1e18;\n  uint256 private constant ONE_WEEK = 7 days;\n\n  // Gauge controller related\n  mapping(address => bool) public gauge_whitelist;\n  mapping(address => bool) public is_middleman; // For cross-chain farms, use a middleman contract to push to a bridge\n  mapping(address => uint256) public last_time_gauge_paid;\n\n  // Booleans\n  bool public distributionsOn;\n\n  /* ========== MODIFIERS ========== */\n\n  modifier onlyByOwnGov() {\n    require(msg.sender == owner() || msg.sender == timelock_address, 'Not owner or timelock');\n    _;\n  }\n\n  modifier onlyByOwnerOrCuratorOrGovernance() {\n    require(\n      msg.sender == owner() || msg.sender == curator_address || msg.sender == timelock_address,\n      'Not owner, curator, or timelock'\n    );\n    _;\n  }\n\n  modifier isDistributing() {\n    require(distributionsOn == true, 'Distributions are off');\n    _;\n  }\n\n  /* ========== CONSTRUCTOR ========== */\n\n  constructor(\n    address _timelock_address,\n    address _curator_address,\n    address _reward_token_address,\n    address _gauge_controller_address\n  ) {\n    curator_address = _curator_address;\n    timelock_address = _timelock_address;\n\n    reward_token_address = _reward_token_address;\n    gauge_controller = IFraxGaugeController(_gauge_controller_address);\n\n    distributionsOn = true;\n  }\n\n  /* ========== VIEWS ========== */\n\n  // Current weekly reward amount\n  function currentReward(address gauge_address) public view returns (uint256 reward_amount) {\n    uint256 rel_weight = gauge_controller.gauge_relative_weight(gauge_address, block.timestamp);\n    uint256 rwd_rate = (gauge_controller.global_emission_rate()).mul(rel_weight).div(1e18);\n    reward_amount = rwd_rate.mul(ONE_WEEK);\n  }\n\n  /* ========== MUTATIVE FUNCTIONS ========== */\n\n  // Callable by anyone\n  function distributeReward(\n    address gauge_address\n  ) public isDistributing nonReentrant returns (uint256 weeks_elapsed, uint256 reward_tally) {\n    require(gauge_whitelist[gauge_address], 'Gauge not whitelisted');\n\n    // Calculate the elapsed time in weeks.\n    uint256 last_time_paid = last_time_gauge_paid[gauge_address];\n\n    // Edge case for first reward for this gauge\n    if (last_time_paid == 0) {\n      weeks_elapsed = 1;\n    } else {\n      // Truncation desired\n      weeks_elapsed = (block.timestamp).sub(last_time_gauge_paid[gauge_address]) / ONE_WEEK;\n\n      // Return early here for 0 weeks instead of throwing, as it could have bad effects in other contracts\n      if (weeks_elapsed == 0) {\n        return (0, 0);\n      }\n    }\n\n    // NOTE: This will always use the current global_emission_rate()\n    reward_tally = 0;\n    for (uint i = 0; i < (weeks_elapsed); i++) {\n      uint256 rel_weight_at_week;\n      if (i == 0) {\n        // Mutative, for the current week. Makes sure the weight is checkpointed. Also returns the weight.\n        rel_weight_at_week = gauge_controller.gauge_relative_weight_write(gauge_address, block.timestamp);\n      } else {\n        // View\n        rel_weight_at_week = gauge_controller.gauge_relative_weight(gauge_address, (block.timestamp).sub(ONE_WEEK * i));\n      }\n      uint256 rwd_rate_at_week = (gauge_controller.global_emission_rate()).mul(rel_weight_at_week).div(1e18);\n      reward_tally = reward_tally.add(rwd_rate_at_week.mul(ONE_WEEK));\n    }\n\n    // Update the last time paid\n    last_time_gauge_paid[gauge_address] = block.timestamp;\n\n    if (is_middleman[gauge_address]) {\n      // Cross chain: Pay out the rewards to the middleman contract\n      // Approve for the middleman first\n      ERC20(reward_token_address).approve(gauge_address, reward_tally);\n\n    } else {\n      // Mainnet: Pay out the rewards directly to the gauge\n      TransferHelper.safeTransfer(reward_token_address, gauge_address, reward_tally);\n    }\n\n    emit RewardDistributed(gauge_address, reward_tally);\n  }\n\n  /* ========== RESTRICTED FUNCTIONS - Curator / migrator callable ========== */\n\n  // For emergency situations\n  function toggleDistributions() external onlyByOwnerOrCuratorOrGovernance {\n    distributionsOn = !distributionsOn;\n\n    emit DistributionsToggled(distributionsOn);\n  }\n\n  /* ========== RESTRICTED FUNCTIONS - Owner or timelock only ========== */\n\n  // Added to support recovering LP Rewards and other mistaken tokens from other systems to be distributed to holders\n  function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyByOwnGov {\n    // Only the owner address can ever receive the recovery withdrawal\n    TransferHelper.safeTransfer(tokenAddress, owner(), tokenAmount);\n    emit RecoveredERC20(tokenAddress, tokenAmount);\n  }\n\n  function setGaugeState(address _gauge_address, bool _is_middleman, bool _is_active) external onlyByOwnGov {\n    is_middleman[_gauge_address] = _is_middleman;\n    gauge_whitelist[_gauge_address] = _is_active;\n\n    emit GaugeStateChanged(_gauge_address, _is_middleman, _is_active);\n  }\n\n  function setTimelock(address _new_timelock) external onlyByOwnGov {\n    timelock_address = _new_timelock;\n  }\n\n  function setCurator(address _new_curator_address) external onlyByOwnGov {\n    curator_address = _new_curator_address;\n  }\n\n  function setGaugeController(address _gauge_controller_address) external onlyByOwnGov {\n    gauge_controller = IFraxGaugeController(_gauge_controller_address);\n  }\n\n  /* ========== EVENTS ========== */\n\n  event RewardDistributed(address indexed gauge_address, uint256 reward_amount);\n  event RecoveredERC20(address token, uint256 amount);\n  event GaugeStateChanged(address gauge_address, bool is_middleman, bool is_active);\n  event DistributionsToggled(bool distibutions_state);\n}\n"
    },
    "contracts/stake/IFraxGaugeController.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.0;\n\n// https://github.com/swervefi/swerve/edit/master/packages/swerve-contracts/interfaces/IGaugeController.sol\n\ninterface IFraxGaugeController {\n    struct Point {\n        uint256 bias;\n        uint256 slope;\n    }\n\n    struct VotedSlope {\n        uint256 slope;\n        uint256 power;\n        uint256 end;\n    }\n\n    // Public variables\n    function admin() external view returns (address);\n    function future_admin() external view returns (address);\n    function token() external view returns (address);\n    function voting_escrow() external view returns (address);\n    function n_gauge_types() external view returns (int128);\n    function n_gauges() external view returns (int128);\n    function gauge_type_names(int128) external view returns (string memory);\n    function gauges(uint256) external view returns (address);\n    function vote_user_slopes(address, address)\n        external\n        view\n        returns (VotedSlope memory);\n    function vote_user_power(address) external view returns (uint256);\n    function last_user_vote(address, address) external view returns (uint256);\n    function points_weight(address, uint256)\n        external\n        view\n        returns (Point memory);\n    function time_weight(address) external view returns (uint256);\n    function points_sum(int128, uint256) external view returns (Point memory);\n    function time_sum(uint256) external view returns (uint256);\n    function points_total(uint256) external view returns (uint256);\n    function time_total() external view returns (uint256);\n    function points_type_weight(int128, uint256)\n        external\n        view\n        returns (uint256);\n    function time_type_weight(uint256) external view returns (uint256);\n\n    // Getter functions\n    function gauge_types(address) external view returns (int128);\n    function gauge_relative_weight(address) external view returns (uint256);\n    function gauge_relative_weight(address, uint256) external view returns (uint256);\n    function get_gauge_weight(address) external view returns (uint256);\n    function get_type_weight(int128) external view returns (uint256);\n    function get_total_weight() external view returns (uint256);\n    function get_weights_sum_per_type(int128) external view returns (uint256);\n\n    // External functions\n    function commit_transfer_ownership(address) external;\n    function apply_transfer_ownership() external;\n    function add_gauge(\n        address,\n        int128,\n        uint256\n    ) external;\n    function checkpoint() external;\n    function checkpoint_gauge(address) external;\n    function global_emission_rate() external view returns (uint256);\n    function gauge_relative_weight_write(address)\n        external\n        returns (uint256);\n    function gauge_relative_weight_write(address, uint256)\n        external\n        returns (uint256);\n    function add_type(string memory, uint256) external;\n    function change_type_weight(int128, uint256) external;\n    function change_gauge_weight(address, uint256) external;\n    function change_global_emission_rate(uint256) external;\n    function vote_for_gauge_weights(address, uint256) external;\n}\n"
    },
    "contracts/stake/IFraxGaugeFXSRewardsDistributor.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.0;\n\ninterface IFraxGaugeFXSRewardsDistributor {\n  function acceptOwnership() external;\n  function curator_address() external view returns(address);\n  function currentReward(address gauge_address) external view returns(uint256 reward_amount);\n  function distributeReward(address gauge_address) external returns(uint256 weeks_elapsed, uint256 reward_tally);\n  function distributionsOn() external view returns(bool);\n  function gauge_whitelist(address) external view returns(bool);\n  function is_middleman(address) external view returns(bool);\n  function last_time_gauge_paid(address) external view returns(uint256);\n  function nominateNewOwner(address _owner) external;\n  function nominatedOwner() external view returns(address);\n  function owner() external view returns(address);\n  function recoverERC20(address tokenAddress, uint256 tokenAmount) external;\n  function setCurator(address _new_curator_address) external;\n  function setGaugeController(address _gauge_controller_address) external;\n  function setGaugeState(address _gauge_address, bool _is_middleman, bool _is_active) external;\n  function setTimelock(address _new_timelock) external;\n  function timelock_address() external view returns(address);\n  function toggleDistributions() external;\n}"
    },
    "contracts/stake/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.19;\n\ninterface IUniswapV2Pair {\n  event Approval(address indexed owner, address indexed spender, uint value);\n  event Transfer(address indexed from, address indexed to, uint value);\n\n  function name() external pure returns (string memory);\n\n  function symbol() external pure returns (string memory);\n\n  function decimals() external pure returns (uint8);\n\n  function totalSupply() external view returns (uint);\n\n  function balanceOf(address owner) external view returns (uint);\n\n  function allowance(address owner, address spender) external view returns (uint);\n\n  function approve(address spender, uint value) external returns (bool);\n\n  function transfer(address to, uint value) external returns (bool);\n\n  function transferFrom(address from, address to, uint value) external returns (bool);\n\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n  function nonces(address owner) external view returns (uint);\n\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n  event Mint(address indexed sender, uint amount0, uint amount1);\n  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n  event Swap(\n    address indexed sender,\n    uint amount0In,\n    uint amount1In,\n    uint amount0Out,\n    uint amount1Out,\n    address indexed to\n  );\n  event Sync(uint112 reserve0, uint112 reserve1);\n\n  function MINIMUM_LIQUIDITY() external pure returns (uint);\n\n  function factory() external view returns (address);\n\n  function token0() external view returns (address);\n\n  function token1() external view returns (address);\n\n  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n\n  function price0CumulativeLast() external view returns (uint);\n\n  function price1CumulativeLast() external view returns (uint);\n\n  function kLast() external view returns (uint);\n\n  function mint(address to) external returns (uint liquidity);\n\n  function burn(address to) external returns (uint amount0, uint amount1);\n\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n\n  function skim(address to) external;\n\n  function sync() external;\n\n  function initialize(address, address) external;\n}\n"
    },
    "contracts/stake/StakingRewardsMultiGauge.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.19;\n\n// ====================================================================\n// |     ______                   _______                             |\n// |    / _____________ __  __   / ____(_____  ____ _____  ________   |\n// |   / /_  / ___/ __ `| |/_/  / /_  / / __ \\/ __ `/ __ \\/ ___/ _ \\  |\n// |  / __/ / /  / /_/ _>  <   / __/ / / / / / /_/ / / / / /__/  __/  |\n// | /_/   /_/   \\__,_/_/|_|  /_/   /_/_/ /_/\\__,_/_/ /_/\\___/\\___/   |\n// |                                                                  |\n// ====================================================================\n// ===================== StakingRewardsMultiGauge =====================\n// ====================================================================\n// veSUMER-enabled\n// Multiple tokens with different reward rates can be emitted\n// Multiple teams can set the reward rates for their token(s)\n// Those teams can also use a gauge, or an external function with\n// Apes together strong\n\n// Frax Finance: https://github.com/FraxFinance\n\n// Primary Author(s)\n// Travis Moore: https://github.com/FortisFortuna\n\n// Reviewer(s) / Contributor(s)\n// Jason Huan: https://github.com/jasonhuan\n// Sam Kazemian: https://github.com/samkazemian\n// Saddle Team: https://github.com/saddle-finance\n// Fei Team: https://github.com/fei-protocol\n// Alchemix Team: https://github.com/alchemix-finance\n// Liquity Team: https://github.com/liquity\n// Gelato Team (kassandraoftroy): https://github.com/gelatodigital\n\n// Originally inspired by Synthetix.io, but heavily modified by the Frax team\n// https://raw.githubusercontent.com/Synthetixio/synthetix/develop/contracts/StakingRewards.sol\n\nimport '@openzeppelin/contracts/utils/math/Math.sol';\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport './TransferHelper.sol';\n\n// -------------------- VARIES --------------------\n\n// G-UNI\n// import \"../Misc_AMOs/gelato/IGUniPool.sol\";\n\n// mStable\n// import '../Misc_AMOs/mstable/IFeederPool.sol';\n\n// StakeDAO sdETH-FraxPut\n// import '../Misc_AMOs/stakedao/IOpynPerpVault.sol';\n\n// StakeDAO Vault\n// import '../Misc_AMOs/stakedao/IStakeDaoVault.sol';\n\n// Uniswap V2\nimport './IUniswapV2Pair.sol';\n\n// ------------------------------------------------\n\nimport './IFraxGaugeController.sol';\nimport './IFraxGaugeFXSRewardsDistributor.sol';\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\n\n// Inheritance\nimport '@openzeppelin/contracts/access/Ownable2Step.sol';\n\ncontract StakingRewardsMultiGauge is Ownable2Step, ReentrancyGuard {\n  using SafeMath for uint256;\n  using SafeERC20 for ERC20;\n\n  /* ========== STATE VARIABLES ========== */\n\n  // Instances\n  IERC20 private constant veSUMER = IERC20(0xF67C5F20B95b7604EBB65A53E50ebd38300da8EE);\n\n  // -------------------- VARIES --------------------\n\n  // G-UNI\n  // IGUniPool public stakingToken;\n\n  // mStable\n  // IFeederPool public stakingToken;\n\n  // sdETH-FraxPut Vault\n  // IOpynPerpVault public stakingToken;\n\n  // StakeDAO Vault\n  // IStakeDaoVault public stakingToken;\n\n  // Uniswap V2\n  IUniswapV2Pair public stakingToken;\n\n  // ------------------------------------------------\n\n  IFraxGaugeFXSRewardsDistributor public rewards_distributor;\n\n  address public constant usd_address = 0x0d893C092f7aE9D97c13307f2D66CFB59430b4Cb;\n\n  // Constant for various precisions\n  uint256 public constant MULTIPLIER_PRECISION = 1e18;\n\n  // Time tracking\n  uint256 public periodFinish;\n  uint256 public lastUpdateTime;\n\n  // Lock time and multiplier settings\n  uint256 public lock_max_multiplier = uint256(3e18); // E18. 1x = e18\n  uint256 public lock_time_for_max_multiplier = 3 * 365 * 86400; // 3 years\n  uint256 public lock_time_min = 86400; // 1 * 86400  (1 day)\n\n  // veSUMER related\n  uint256 public veSumer_per_usd_for_max_boost = uint256(4e18); // E18. 4e18 means 4 veSUMER must be held by the staker per 1 usd\n  uint256 public veSumer_max_multiplier = uint256(2e18); // E18. 1x = 1e18\n  mapping(address => uint256) private _veSumerMultiplierStored;\n\n  // Reward addresses, gauge addresses, reward rates, and reward managers\n  mapping(address => address) public rewardManagers; // token addr -> manager addr\n  address[] public rewardTokens;\n  address[] public gaugeControllers;\n  uint256[] public rewardRatesManual;\n  string[] public rewardSymbols;\n  mapping(address => uint256) public rewardTokenAddrToIdx; // token addr -> token index\n\n  // Reward period\n  uint256 public rewardsDuration = 7 days; // 7 * 86400  (7 days)\n\n  // Reward tracking\n  uint256[] private rewardsPerTokenStored;\n  mapping(address => mapping(uint256 => uint256)) private userRewardsPerTokenPaid; // staker addr -> token id -> paid amount\n  mapping(address => mapping(uint256 => uint256)) private rewards; // staker addr -> token id -> reward amount\n  mapping(address => uint256) private lastRewardClaimTime; // staker addr -> timestamp\n  uint256[] private last_gauge_relative_weights;\n  uint256[] private last_gauge_time_totals;\n\n  // Balance tracking\n  uint256 private _total_liquidity_locked;\n  uint256 private _total_combined_weight;\n  mapping(address => uint256) private _locked_liquidity;\n  mapping(address => uint256) private _combined_weights;\n\n  // List of valid migrators (set by governance)\n  mapping(address => bool) public valid_migrators;\n\n  // Stakers set which migrator(s) they want to use\n  mapping(address => mapping(address => bool)) public staker_allowed_migrators;\n\n  // Uniswap V2 (or G-UNI) ONLY\n  bool usd_is_token0;\n\n  // Stake tracking\n  mapping(address => LockedStake[]) private lockedStakes;\n\n  // Greylisting of bad addresses\n  mapping(address => bool) public greylist;\n\n  // Administrative booleans\n  bool public stakesUnlocked; // Release locked stakes in case of emergency\n  bool public migrationsOn; // Used for migrations. Prevents new stakes, but allows LP and reward withdrawals\n  bool public withdrawalsPaused; // For emergencies\n  bool public rewardsCollectionPaused; // For emergencies\n  bool public stakingPaused; // For emergencies\n\n  /* ========== STRUCTS ========== */\n\n  struct LockedStake {\n    bytes32 kek_id;\n    uint256 start_timestamp;\n    uint256 liquidity;\n    uint256 ending_timestamp;\n    uint256 lock_multiplier; // 6 decimals of precision. 1x = 1000000\n  }\n\n  /* ========== MODIFIERS ========== */\n\n  modifier onlyTknMgrs(address reward_token_address) {\n    require(msg.sender == owner() || isTokenManagerFor(msg.sender, reward_token_address), 'Not owner or tkn mgr');\n    _;\n  }\n\n  modifier isMigrating() {\n    require(migrationsOn == true, 'Not in migration');\n    _;\n  }\n\n  modifier updateRewardAndBalance(address account, bool sync_too) {\n    _updateRewardAndBalance(account, sync_too);\n    _;\n  }\n\n  /* ========== CONSTRUCTOR ========== */\n\n  constructor(\n    address _stakingToken,\n    address _rewards_distributor_address,\n    string[] memory _rewardSymbols,\n    address[] memory _rewardTokens,\n    address[] memory _rewardManagers,\n    uint256[] memory _rewardRatesManual,\n    address[] memory _gaugeControllers\n  ) {\n    // -------------------- VARIES --------------------\n    // G-UNI\n    // stakingToken = IGUniPool(_stakingToken);\n    // address token0 = address(stakingToken.token0());\n    // frax_is_token0 = token0 == frax_address;\n\n    // mStable\n    // stakingToken = IFeederPool(_stakingToken);\n\n    // StakeDAO sdETH-FraxPut Vault\n    // stakingToken = IOpynPerpVault(_stakingToken);\n\n    // StakeDAO Vault\n    // stakingToken = IStakeDaoVault(_stakingToken);\n\n    // Uniswap V2\n    stakingToken = IUniswapV2Pair(_stakingToken);\n    address token0 = stakingToken.token0();\n    if (token0 == usd_address) usd_is_token0 = true;\n    else usd_is_token0 = false;\n    // ------------------------------------------------\n    require(\n      _rewardSymbols.length == _rewardTokens.length &&\n        _rewardSymbols.length == _rewardManagers.length &&\n        _rewardSymbols.length == _rewardRatesManual.length,\n      'length!'\n    );\n    rewards_distributor = IFraxGaugeFXSRewardsDistributor(_rewards_distributor_address);\n\n    rewardTokens = _rewardTokens;\n    gaugeControllers = _gaugeControllers;\n    rewardRatesManual = _rewardRatesManual;\n    rewardSymbols = _rewardSymbols;\n\n    for (uint256 i = 0; i < _rewardTokens.length; i++) {\n      // For fast token address -> token ID lookups later\n      rewardTokenAddrToIdx[_rewardTokens[i]] = i;\n\n      // Initialize the stored rewards\n      rewardsPerTokenStored.push(0);\n\n      // Initialize the reward managers\n      rewardManagers[_rewardTokens[i]] = _rewardManagers[i];\n\n      // Push in empty relative weights to initialize the array\n      last_gauge_relative_weights.push(0);\n\n      // Push in empty time totals to initialize the array\n      last_gauge_time_totals.push(0);\n    }\n\n    // Other booleans\n    stakesUnlocked = false;\n\n    // Initialization\n    lastUpdateTime = block.timestamp;\n    periodFinish = block.timestamp.add(rewardsDuration);\n  }\n\n  /* ========== VIEWS ========== */\n\n  // Total locked liquidity tokens\n  function totalLiquidityLocked() external view returns (uint256) {\n    return _total_liquidity_locked;\n  }\n\n  // Locked liquidity for a given account\n  function lockedLiquidityOf(address account) external view returns (uint256) {\n    return _locked_liquidity[account];\n  }\n\n  // Total 'balance' used for calculating the percent of the pool the account owns\n  // Takes into account the locked stake time multiplier\n  function totalCombinedWeight() external view returns (uint256) {\n    return _total_combined_weight;\n  }\n\n  // Combined weight for a specific account\n  function combinedWeightOf(address account) external view returns (uint256) {\n    return _combined_weights[account];\n  }\n\n  function usdPerLPToken() public view returns (uint256) {\n    uint256 usd_per_lp_token;\n\n    // G-UNI\n    // ============================================\n    // {\n    //     (uint256 reserve0, uint256 reserve1) = stakingToken.getUnderlyingBalances();\n    //     uint256 total_frax_reserves = frax_is_token0 ? reserve0 : reserve1;\n\n    //     frax_per_lp_token = total_frax_reserves.mul(1e18).div(stakingToken.totalSupply());\n    // }\n\n    // mStable\n    // ============================================\n    // {\n    //     uint256 total_frax_reserves;\n    //     (, IFeederPool.BassetData memory vaultData) = (stakingToken.getBasset(frax_address));\n    //     total_frax_reserves = uint256(vaultData.vaultBalance);\n    //     frax_per_lp_token = total_frax_reserves.mul(1e18).div(stakingToken.totalSupply());\n    // }\n\n    // StakeDAO sdETH-FraxPut Vault\n    // ============================================\n    // {\n    //    uint256 frax3crv_held = stakingToken.totalUnderlyingControlled();\n\n    // Optimistically assume 50/50 FRAX/3CRV ratio in the metapool to save gas\n    //    frax_per_lp_token = (frax3crv_held.mul(1e18).div(stakingToken.totalSupply())) / 2;\n    // }\n\n    // StakeDAO Vault\n    // ============================================\n    // {\n    //    uint256 frax3crv_held = stakingToken.balance();\n    //\n    //    // Optimistically assume 50/50 FRAX/3CRV ratio in the metapool to save gas\n    //    frax_per_lp_token = (frax3crv_held.mul(1e18).div(stakingToken.totalSupply())) / 2;\n    // }\n\n    // Uniswap V2\n    // ============================================\n    {\n      uint256 total_usd_reserves;\n      (uint256 reserve0, uint256 reserve1, ) = (stakingToken.getReserves());\n      if (usd_is_token0) total_usd_reserves = reserve0;\n      else total_usd_reserves = reserve1;\n\n      usd_per_lp_token = total_usd_reserves.mul(1e18).div(stakingToken.totalSupply());\n    }\n\n    return usd_per_lp_token;\n  }\n\n  function userStakedUsd(address account) public view returns (uint256) {\n    return (usdPerLPToken()).mul(_locked_liquidity[account]).div(1e18);\n  }\n\n  function minVeSumerForMaxBoost(address account) public view returns (uint256) {\n    return (userStakedUsd(account)).mul(veSumer_per_usd_for_max_boost).div(MULTIPLIER_PRECISION);\n  }\n\n  function veSumerMultiplier(address account) public view returns (uint256) {\n    // The claimer gets a boost depending on amount of veSumer they have relative to the amount of FRAX 'inside'\n    // of their locked LP tokens\n    uint256 veSumer_needed_for_max_boost = minVeSumerForMaxBoost(account);\n    if (veSumer_needed_for_max_boost > 0) {\n      uint256 user_veSumer_fraction = (veSUMER.balanceOf(account)).mul(MULTIPLIER_PRECISION).div(\n        veSumer_needed_for_max_boost\n      );\n\n      uint256 veSumer_multiplier = ((user_veSumer_fraction).mul(veSumer_max_multiplier)).div(MULTIPLIER_PRECISION);\n\n      // Cap the boost to the veSumer_max_multiplier\n      if (veSumer_multiplier > veSumer_max_multiplier) veSumer_multiplier = veSumer_max_multiplier;\n\n      return veSumer_multiplier;\n    } else return 0; // This will happen with the first stake, when user_staked_frax is 0\n  }\n\n  // Calculated the combined weight for an account\n  function calcCurCombinedWeight(\n    address account\n  ) public view returns (uint256 old_combined_weight, uint256 new_veSumer_multiplier, uint256 new_combined_weight) {\n    // Get the old combined weight\n    old_combined_weight = _combined_weights[account];\n\n    // Get the veSumer multipliers\n    // For the calculations, use the midpoint (analogous to midpoint Riemann sum)\n    new_veSumer_multiplier = veSumerMultiplier(account);\n\n    uint256 midpoint_veSumer_multiplier;\n    if (_locked_liquidity[account] == 0 && _combined_weights[account] == 0) {\n      // This is only called for the first stake to make sure the veSumer multiplier is not cut in half\n      midpoint_veSumer_multiplier = new_veSumer_multiplier;\n    } else {\n      midpoint_veSumer_multiplier = ((new_veSumer_multiplier).add(_veSumerMultiplierStored[account])).div(2);\n    }\n\n    // Loop through the locked stakes, first by getting the liquidity * lock_multiplier portion\n    new_combined_weight = 0;\n    for (uint256 i = 0; i < lockedStakes[account].length; i++) {\n      LockedStake memory thisStake = lockedStakes[account][i];\n      uint256 lock_multiplier = thisStake.lock_multiplier;\n\n      // If the lock is expired\n      if (thisStake.ending_timestamp <= block.timestamp) {\n        // If the lock expired in the time since the last claim, the weight needs to be proportionately averaged this time\n        if (lastRewardClaimTime[account] < thisStake.ending_timestamp) {\n          uint256 time_before_expiry = (thisStake.ending_timestamp).sub(lastRewardClaimTime[account]);\n          uint256 time_after_expiry = (block.timestamp).sub(thisStake.ending_timestamp);\n\n          // Get the weighted-average lock_multiplier\n          uint256 numerator = ((lock_multiplier).mul(time_before_expiry)).add(\n            ((MULTIPLIER_PRECISION).mul(time_after_expiry))\n          );\n          lock_multiplier = numerator.div(time_before_expiry.add(time_after_expiry));\n        }\n        // Otherwise, it needs to just be 1x\n        else {\n          lock_multiplier = MULTIPLIER_PRECISION;\n        }\n      }\n\n      uint256 liquidity = thisStake.liquidity;\n      uint256 combined_boosted_amount = liquidity.mul(lock_multiplier.add(midpoint_veSumer_multiplier)).div(\n        MULTIPLIER_PRECISION\n      );\n      new_combined_weight = new_combined_weight.add(combined_boosted_amount);\n    }\n  }\n\n  // All the locked stakes for a given account\n  function lockedStakesOf(address account) external view returns (LockedStake[] memory) {\n    return lockedStakes[account];\n  }\n\n  // All the locked stakes for a given account\n  function getRewardSymbols() external view returns (string[] memory) {\n    return rewardSymbols;\n  }\n\n  // All the reward tokens\n  function getAllRewardTokens() external view returns (address[] memory) {\n    return rewardTokens;\n  }\n\n  // Multiplier amount, given the length of the lock\n  function lockMultiplier(uint256 secs) public view returns (uint256) {\n    uint256 lock_multiplier = uint256(MULTIPLIER_PRECISION).add(\n      secs.mul(lock_max_multiplier.sub(MULTIPLIER_PRECISION)).div(lock_time_for_max_multiplier)\n    );\n    if (lock_multiplier > lock_max_multiplier) lock_multiplier = lock_max_multiplier;\n    return lock_multiplier;\n  }\n\n  // Last time the reward was applicable\n  function lastTimeRewardApplicable() internal view returns (uint256) {\n    return Math.min(block.timestamp, periodFinish);\n  }\n\n  function rewardRates(uint256 token_idx) public view returns (uint256 rwd_rate) {\n    address gauge_controller_address = gaugeControllers[token_idx];\n    if (gauge_controller_address != address(0)) {\n      rwd_rate = (IFraxGaugeController(gauge_controller_address).global_emission_rate())\n        .mul(last_gauge_relative_weights[token_idx])\n        .div(1e18);\n    } else {\n      rwd_rate = rewardRatesManual[token_idx];\n    }\n  }\n\n  // Amount of reward tokens per LP token\n  function rewardsPerToken() public view returns (uint256[] memory newRewardsPerTokenStored) {\n    if (_total_liquidity_locked == 0 || _total_combined_weight == 0) {\n      return rewardsPerTokenStored;\n    } else {\n      newRewardsPerTokenStored = new uint256[](rewardTokens.length);\n      for (uint256 i = 0; i < rewardsPerTokenStored.length; i++) {\n        newRewardsPerTokenStored[i] = rewardsPerTokenStored[i].add(\n          lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRates(i)).mul(1e18).div(_total_combined_weight)\n        );\n      }\n      return newRewardsPerTokenStored;\n    }\n  }\n\n  // Amount of reward tokens an account has earned / accrued\n  // Note: In the edge-case of one of the account's stake expiring since the last claim, this will\n  // return a slightly inflated number\n  function earned(address account) public view returns (uint256[] memory new_earned) {\n    uint256[] memory reward_arr = rewardsPerToken();\n    new_earned = new uint256[](rewardTokens.length);\n\n    if (_combined_weights[account] == 0) {\n      for (uint256 i = 0; i < rewardTokens.length; i++) {\n        new_earned[i] = 0;\n      }\n    } else {\n      for (uint256 i = 0; i < rewardTokens.length; i++) {\n        new_earned[i] = (_combined_weights[account])\n          .mul(reward_arr[i].sub(userRewardsPerTokenPaid[account][i]))\n          .div(1e18)\n          .add(rewards[account][i]);\n      }\n    }\n  }\n\n  // Total reward tokens emitted in the given period\n  function getRewardForDuration() external view returns (uint256[] memory rewards_per_duration_arr) {\n    rewards_per_duration_arr = new uint256[](rewardRatesManual.length);\n\n    for (uint256 i = 0; i < rewardRatesManual.length; i++) {\n      rewards_per_duration_arr[i] = rewardRates(i).mul(rewardsDuration);\n    }\n  }\n\n  // See if the caller_addr is a manager for the reward token\n  function isTokenManagerFor(address caller_addr, address reward_token_addr) public view returns (bool) {\n    if (caller_addr == owner()) return true;\n    // Contract owner\n    else if (rewardManagers[reward_token_addr] == caller_addr) return true; // Reward manager\n    return false;\n  }\n\n  /* ========== MUTATIVE FUNCTIONS ========== */\n\n  // Staker can allow a migrator\n  function stakerAllowMigrator(address migrator_address) external {\n    require(valid_migrators[migrator_address], 'Invalid migrator address');\n    staker_allowed_migrators[msg.sender][migrator_address] = true;\n  }\n\n  // Staker can disallow a previously-allowed migrator\n  function stakerDisallowMigrator(address migrator_address) external {\n    // Delete from the mapping\n    delete staker_allowed_migrators[msg.sender][migrator_address];\n  }\n\n  function _updateRewardAndBalance(address account, bool sync_too) internal {\n    // Need to retro-adjust some things if the period hasn't been renewed, then start a new one\n    if (sync_too) {\n      sync();\n    }\n\n    if (account != address(0)) {\n      // To keep the math correct, the user's combined weight must be recomputed to account for their\n      // ever-changing veSumer balance.\n      (\n        uint256 old_combined_weight,\n        uint256 new_veSumer_multiplier,\n        uint256 new_combined_weight\n      ) = calcCurCombinedWeight(account);\n\n      // Calculate the earnings first\n      _syncEarned(account);\n\n      // Update the user's stored veSumer multipliers\n      _veSumerMultiplierStored[account] = new_veSumer_multiplier;\n\n      // Update the user's and the global combined weights\n      if (new_combined_weight >= old_combined_weight) {\n        uint256 weight_diff = new_combined_weight.sub(old_combined_weight);\n        _total_combined_weight = _total_combined_weight.add(weight_diff);\n        _combined_weights[account] = old_combined_weight.add(weight_diff);\n      } else {\n        uint256 weight_diff = old_combined_weight.sub(new_combined_weight);\n        _total_combined_weight = _total_combined_weight.sub(weight_diff);\n        _combined_weights[account] = old_combined_weight.sub(weight_diff);\n      }\n    }\n  }\n\n  function _syncEarned(address account) internal {\n    if (account != address(0)) {\n      // Calculate the earnings\n      uint256[] memory earned_arr = earned(account);\n\n      // Update the rewards array\n      for (uint256 i = 0; i < earned_arr.length; i++) {\n        rewards[account][i] = earned_arr[i];\n      }\n\n      // Update the rewards paid array\n      for (uint256 i = 0; i < earned_arr.length; i++) {\n        userRewardsPerTokenPaid[account][i] = rewardsPerTokenStored[i];\n      }\n    }\n  }\n\n  // Two different stake functions are needed because of delegateCall and msg.sender issues\n  function stakeLocked(uint256 liquidity, uint256 secs) public nonReentrant {\n    _stakeLocked(msg.sender, msg.sender, liquidity, secs, block.timestamp);\n  }\n\n  // If this were not internal, and source_address had an infinite approve, this could be exploitable\n  // (pull funds from source_address and stake for an arbitrary staker_address)\n  function _stakeLocked(\n    address staker_address,\n    address source_address,\n    uint256 liquidity,\n    uint256 secs,\n    uint256 start_timestamp\n  ) internal updateRewardAndBalance(staker_address, true) {\n    require(!stakingPaused, 'Staking paused');\n    require(liquidity > 0, 'Must stake more than zero');\n    require(greylist[staker_address] == false, 'Address has been greylisted');\n    require(secs >= lock_time_min, 'Minimum stake time not met');\n    require(secs <= lock_time_for_max_multiplier, 'Trying to lock for too long');\n\n    uint256 lock_multiplier = lockMultiplier(secs);\n    bytes32 kek_id = keccak256(\n      abi.encodePacked(staker_address, start_timestamp, liquidity, _locked_liquidity[staker_address])\n    );\n    lockedStakes[staker_address].push(\n      LockedStake(kek_id, start_timestamp, liquidity, start_timestamp.add(secs), lock_multiplier)\n    );\n\n    // Pull the tokens from the source_address\n    TransferHelper.safeTransferFrom(address(stakingToken), source_address, address(this), liquidity);\n\n    // Update liquidities\n    _total_liquidity_locked = _total_liquidity_locked.add(liquidity);\n    _locked_liquidity[staker_address] = _locked_liquidity[staker_address].add(liquidity);\n\n    // Need to call to update the combined weights\n    _updateRewardAndBalance(staker_address, true);\n\n    // Needed for edge case if the staker only claims once, and after the lock expired\n    if (lastRewardClaimTime[staker_address] == 0) lastRewardClaimTime[staker_address] = block.timestamp;\n\n    emit StakeLocked(staker_address, liquidity, secs, kek_id, source_address);\n  }\n\n  // Two different withdrawLocked functions are needed because of delegateCall and msg.sender issues\n  function withdrawLocked(bytes32 kek_id) public nonReentrant {\n    require(withdrawalsPaused == false, 'Withdrawals paused');\n    _withdrawLocked(msg.sender, msg.sender, kek_id);\n  }\n\n  // No withdrawer == msg.sender check needed since this is only internally callable and the checks are done in the wrapper\n  // functions like withdraw(), migrator_withdraw_unlocked() and migrator_withdraw_locked()\n  function _withdrawLocked(address staker_address, address destination_address, bytes32 kek_id) internal {\n    // Collect rewards first and then update the balances\n    _getReward(staker_address, destination_address);\n\n    LockedStake memory thisStake;\n    thisStake.liquidity = 0;\n    uint theArrayIndex;\n    for (uint256 i = 0; i < lockedStakes[staker_address].length; i++) {\n      if (kek_id == lockedStakes[staker_address][i].kek_id) {\n        thisStake = lockedStakes[staker_address][i];\n        theArrayIndex = i;\n        break;\n      }\n    }\n    require(thisStake.kek_id == kek_id, 'Stake not found');\n    require(\n      block.timestamp >= thisStake.ending_timestamp || stakesUnlocked == true || valid_migrators[msg.sender] == true,\n      'Stake is still locked!'\n    );\n\n    uint256 liquidity = thisStake.liquidity;\n\n    if (liquidity > 0) {\n      // Update liquidities\n      _total_liquidity_locked = _total_liquidity_locked.sub(liquidity);\n      _locked_liquidity[staker_address] = _locked_liquidity[staker_address].sub(liquidity);\n\n      // Remove the stake from the array\n      delete lockedStakes[staker_address][theArrayIndex];\n\n      // Need to call to update the combined weights\n      _updateRewardAndBalance(staker_address, false);\n\n      // Give the tokens to the destination_address\n      // Should throw if insufficient balance\n      stakingToken.transfer(destination_address, liquidity);\n\n      emit WithdrawLocked(staker_address, liquidity, kek_id, destination_address);\n    }\n  }\n\n  // Two different getReward functions are needed because of delegateCall and msg.sender issues\n  function getReward() external nonReentrant returns (uint256[] memory) {\n    require(rewardsCollectionPaused == false, 'Rewards collection paused');\n    return _getReward(msg.sender, msg.sender);\n  }\n\n  // No withdrawer == msg.sender check needed since this is only internally callable\n  function _getReward(\n    address rewardee,\n    address destination_address\n  ) internal updateRewardAndBalance(rewardee, true) returns (uint256[] memory rewards_before) {\n    // Update the rewards array and distribute rewards\n    rewards_before = new uint256[](rewardTokens.length);\n\n    for (uint256 i = 0; i < rewardTokens.length; i++) {\n      rewards_before[i] = rewards[rewardee][i];\n      rewards[rewardee][i] = 0;\n      ERC20(rewardTokens[i]).transfer(destination_address, rewards_before[i]);\n      emit RewardPaid(rewardee, rewards_before[i], rewardTokens[i], destination_address);\n    }\n\n    lastRewardClaimTime[rewardee] = block.timestamp;\n  }\n\n  error NoEnoughReward(\n    address token,\n    uint256 rewardRates,\n    uint256 rewardsDuration,\n    uint256 num_periods_elapsed,\n    uint256 balance\n  );\n\n  // If the period expired, renew it\n  function retroCatchUp() internal {\n    // Pull in rewards from the rewards distributor\n    rewards_distributor.distributeReward(address(this));\n\n    // Ensure the provided reward amount is not more than the balance in the contract.\n    // This keeps the reward rate in the right range, preventing overflows due to\n    // very high values of rewardRate in the earned and rewardsPerToken functions;\n    // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\n    uint256 num_periods_elapsed = uint256(block.timestamp.sub(periodFinish)) / rewardsDuration; // Floor division to the nearest period\n\n    // Make sure there are enough tokens to renew the reward period\n    for (uint256 i = 0; i < rewardTokens.length; i++) {\n      // require(\n      //   rewardRates(i).mul(rewardsDuration).mul(num_periods_elapsed + 1) <=\n      //     ERC20(rewardTokens[i]).balanceOf(address(this)),\n      //   string(abi.encodePacked('Not enough reward tokens available: ', rewardTokens[i]))\n      // );\n      if (\n        rewardRates(i).mul(rewardsDuration).mul(num_periods_elapsed + 1) >\n        ERC20(rewardTokens[i]).balanceOf(address(this))\n      ) {\n        revert NoEnoughReward(\n          rewardTokens[i],\n          rewardRates(i),\n          rewardsDuration,\n          num_periods_elapsed,\n          ERC20(rewardTokens[i]).balanceOf(address(this))\n        );\n      }\n    }\n\n    // uint256 old_lastUpdateTime = lastUpdateTime;\n    // uint256 new_lastUpdateTime = block.timestamp;\n\n    // lastUpdateTime = periodFinish;\n    periodFinish = periodFinish.add((num_periods_elapsed.add(1)).mul(rewardsDuration));\n\n    _updateStoredRewardsAndTime();\n\n    emit RewardsPeriodRenewed(address(stakingToken));\n  }\n\n  function _updateStoredRewardsAndTime() internal {\n    // Get the rewards\n    uint256[] memory rewards_per_token = rewardsPerToken();\n\n    // Update the rewardsPerTokenStored\n    for (uint256 i = 0; i < rewardsPerTokenStored.length; i++) {\n      rewardsPerTokenStored[i] = rewards_per_token[i];\n    }\n\n    // Update the last stored time\n    lastUpdateTime = lastTimeRewardApplicable();\n  }\n\n  function sync_gauge_weights(bool force_update) public {\n    // Loop through the gauge controllers\n    for (uint256 i = 0; i < gaugeControllers.length; i++) {\n      address gauge_controller_address = gaugeControllers[i];\n      if (gauge_controller_address != address(0)) {\n        if (force_update || (block.timestamp > last_gauge_time_totals[i])) {\n          // Update the gauge_relative_weight\n          last_gauge_relative_weights[i] = IFraxGaugeController(gauge_controller_address).gauge_relative_weight_write(\n            address(this),\n            block.timestamp\n          );\n          last_gauge_time_totals[i] = IFraxGaugeController(gauge_controller_address).time_total();\n        }\n      }\n    }\n  }\n\n  function sync() public {\n    // Sync the gauge weight, if applicable\n    sync_gauge_weights(false);\n\n    if (block.timestamp >= periodFinish) {\n      retroCatchUp();\n    } else {\n      _updateStoredRewardsAndTime();\n    }\n  }\n\n  /* ========== RESTRICTED FUNCTIONS ========== */\n\n  // Migrator can stake for someone else (they won't be able to withdraw it back though, only staker_address can).\n  function migrator_stakeLocked_for(\n    address staker_address,\n    uint256 amount,\n    uint256 secs,\n    uint256 start_timestamp\n  ) external isMigrating {\n    require(\n      staker_allowed_migrators[staker_address][msg.sender] && valid_migrators[msg.sender],\n      'Mig. invalid or unapproved'\n    );\n    _stakeLocked(staker_address, msg.sender, amount, secs, start_timestamp);\n  }\n\n  // Used for migrations\n  function migrator_withdraw_locked(address staker_address, bytes32 kek_id) external isMigrating {\n    require(\n      staker_allowed_migrators[staker_address][msg.sender] && valid_migrators[msg.sender],\n      'Mig. invalid or unapproved'\n    );\n    _withdrawLocked(staker_address, msg.sender, kek_id);\n  }\n\n  // Adds supported migrator address\n  function addMigrator(address migrator_address) external onlyOwner {\n    valid_migrators[migrator_address] = true;\n  }\n\n  // Remove a migrator address\n  function removeMigrator(address migrator_address) external onlyOwner {\n    require(valid_migrators[migrator_address] == true, 'Address nonexistent');\n\n    // Delete from the mapping\n    delete valid_migrators[migrator_address];\n  }\n\n  // Added to support recovering LP Rewards and other mistaken tokens from other systems to be distributed to holders\n  function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyTknMgrs(tokenAddress) {\n    // Check if the desired token is a reward token\n    bool isRewardToken = false;\n    for (uint256 i = 0; i < rewardTokens.length; i++) {\n      if (rewardTokens[i] == tokenAddress) {\n        isRewardToken = true;\n        break;\n      }\n    }\n\n    // Only the reward managers can take back their reward tokens\n    if (isRewardToken && rewardManagers[tokenAddress] == msg.sender) {\n      ERC20(tokenAddress).transfer(msg.sender, tokenAmount);\n      emit Recovered(msg.sender, tokenAddress, tokenAmount);\n      return;\n    }\n    // Other tokens, like the staking token, airdrops, or accidental deposits, can be withdrawn by the owner\n    else if (!isRewardToken && (msg.sender == owner())) {\n      ERC20(tokenAddress).transfer(msg.sender, tokenAmount);\n      emit Recovered(msg.sender, tokenAddress, tokenAmount);\n      return;\n    }\n    // If none of the above conditions are true\n    else {\n      revert('No valid tokens to recover');\n    }\n  }\n\n  function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {\n    require(_rewardsDuration >= 86400, 'Rewards duration too short');\n    require(_rewardsDuration < 365 days, 'Rewards duration too long');\n    require(periodFinish == 0 || block.timestamp > periodFinish, 'Reward period incomplete');\n    rewardsDuration = _rewardsDuration;\n    emit RewardsDurationUpdated(rewardsDuration);\n  }\n\n  function setMultipliers(\n    uint256 _lock_max_multiplier,\n    uint256 _veSumer_max_multiplier,\n    uint256 _veSumer_per_usd_for_max_boost\n  ) external onlyOwner {\n    require(_lock_max_multiplier >= MULTIPLIER_PRECISION, 'Mult must be >= MULTIPLIER_PRECISION');\n    require(_veSumer_max_multiplier >= 0, 'veSumer mul must be >= 0');\n    require(_veSumer_per_usd_for_max_boost > 0, 'veSumer pct max must be >= 0');\n\n    lock_max_multiplier = _lock_max_multiplier;\n    veSumer_max_multiplier = _veSumer_max_multiplier;\n    veSumer_per_usd_for_max_boost = _veSumer_per_usd_for_max_boost;\n\n    emit MaxVeSumerMultiplier(veSumer_max_multiplier);\n    emit LockedStakeMaxMultiplierUpdated(lock_max_multiplier);\n    emit veSumerPerUsdForMaxBoostUpdated(veSumer_per_usd_for_max_boost);\n  }\n\n  function setLockedStakeTimeForMinAndMaxMultiplier(\n    uint256 _lock_time_for_max_multiplier,\n    uint256 _lock_time_min\n  ) external onlyOwner {\n    require(_lock_time_for_max_multiplier >= 1, 'Mul max time must be >= 1');\n    require(_lock_time_min >= 1, 'Mul min time must be >= 1');\n\n    lock_time_for_max_multiplier = _lock_time_for_max_multiplier;\n    lock_time_min = _lock_time_min;\n\n    emit LockedStakeTimeForMaxMultiplier(lock_time_for_max_multiplier);\n    emit LockedStakeMinTime(_lock_time_min);\n  }\n\n  function greylistAddress(address _address) external onlyOwner {\n    greylist[_address] = !(greylist[_address]);\n  }\n\n  function unlockStakes() external onlyOwner {\n    stakesUnlocked = !stakesUnlocked;\n  }\n\n  function toggleStaking() external onlyOwner {\n    stakingPaused = !stakingPaused;\n  }\n\n  function toggleMigrations() external onlyOwner {\n    migrationsOn = !migrationsOn;\n  }\n\n  function toggleWithdrawals() external onlyOwner {\n    withdrawalsPaused = !withdrawalsPaused;\n  }\n\n  function toggleRewardsCollection() external onlyOwner {\n    rewardsCollectionPaused = !rewardsCollectionPaused;\n  }\n\n  // The owner or the reward token managers can set reward rates\n  function setRewardRate(\n    address reward_token_address,\n    uint256 new_rate,\n    bool sync_too\n  ) external onlyTknMgrs(reward_token_address) {\n    require(new_rate > 0, 'new_rate=0');\n    rewardRatesManual[rewardTokenAddrToIdx[reward_token_address]] = new_rate;\n\n    if (sync_too) {\n      sync();\n    }\n  }\n\n  // The owner or the reward token managers can set reward rates\n  function setGaugeController(\n    address reward_token_address,\n    address _rewards_distributor_address,\n    address _gauge_controller_address,\n    bool sync_too\n  ) external onlyTknMgrs(reward_token_address) {\n    gaugeControllers[rewardTokenAddrToIdx[reward_token_address]] = _gauge_controller_address;\n    rewards_distributor = IFraxGaugeFXSRewardsDistributor(_rewards_distributor_address);\n\n    if (sync_too) {\n      sync();\n    }\n  }\n\n  // The owner or the reward token managers can change managers\n  function changeTokenManager(\n    address reward_token_address,\n    address new_manager_address\n  ) external onlyTknMgrs(reward_token_address) {\n    rewardManagers[reward_token_address] = new_manager_address;\n  }\n\n  /* ========== EVENTS ========== */\n\n  event StakeLocked(address indexed user, uint256 amount, uint256 secs, bytes32 kek_id, address source_address);\n  event WithdrawLocked(address indexed user, uint256 amount, bytes32 kek_id, address destination_address);\n  event RewardPaid(address indexed user, uint256 reward, address token_address, address destination_address);\n  event RewardsDurationUpdated(uint256 newDuration);\n  event Recovered(address destination_address, address token, uint256 amount);\n  event RewardsPeriodRenewed(address token);\n  event LockedStakeMaxMultiplierUpdated(uint256 multiplier);\n  event LockedStakeTimeForMaxMultiplier(uint256 secs);\n  event LockedStakeMinTime(uint256 secs);\n  event MaxVeSumerMultiplier(uint256 multiplier);\n  event veSumerPerUsdForMaxBoostUpdated(uint256 scale_factor);\n}\n"
    },
    "contracts/stake/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.19;\n\nlibrary TransferHelper {\n  function safeApprove(address token, address to, uint value) internal {\n    // bytes4(keccak256(bytes('approve(address,uint256)')));\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n    require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n  }\n\n  function safeTransfer(address token, address to, uint value) internal {\n    // bytes4(keccak256(bytes('transfer(address,uint256)')));\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n    require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n  }\n\n  function safeTransferFrom(address token, address from, address to, uint value) internal {\n    // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n    require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n  }\n\n  function safeTransferETH(address to, uint value) internal {\n    (bool success, ) = to.call{value: value}(new bytes(0));\n    require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n  }\n}"
    },
    "contracts/stake/VeSumer.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.19;\n\n// ====================================================================\n// |     ______                   _______                             |\n// |    / _____________ __  __   / ____(_____  ____ _____  ________   |\n// |   / /_  / ___/ __ `| |/_/  / /_  / / __ \\/ __ `/ __ \\/ ___/ _ \\  |\n// |  / __/ / /  / /_/ _>  <   / __/ / / / / / /_/ / / / / /__/  __/  |\n// | /_/   /_/   \\__,_/_/|_|  /_/   /_/_/ /_/\\__,_/_/ /_/\\___/\\___/   |\n// |                                                                  |\n// ====================================================================\n// =============================== veFXS ==============================\n// ====================================================================\n// Frax Finance: https://github.com/FraxFinance\n\n// Original idea and credit:\n// Curve Finance's veCRV\n// https://resources.curve.fi/faq/vote-locking-boost\n// https://github.com/curvefi/curve-dao-contracts/blob/master/contracts/VotingEscrow.vy\n// This is a Solidity version converted from Vyper by the Frax team\n// Almost all of the logic / algorithms are the Curve team's\n\n// Primary Author(s)\n// Travis Moore: https://github.com/FortisFortuna\n\n// Reviewer(s) / Contributor(s)\n// Jason Huan: https://github.com/jasonhuan\n// Sam Kazemian: https://github.com/samkazemian\n\n//@notice Votes have a weight depending on time, so that users are\n//        committed to the future of (whatever they are voting for)\n//@dev Vote weight decays linearly over time. Lock time cannot be\n//     more than `MAXTIME` (3 years).\n\n// Voting escrow to have time-weighted votes\n// Votes have a weight depending on time, so that users are committed\n// to the future of (whatever they are voting for).\n// The weight in this implementation is linear, and lock cannot be more than maxtime:\n// w ^\n// 1 +        /\n//   |      /\n//   |    /\n//   |  /\n//   |/\n// 0 +--------+------> time\n//       maxtime (4 years?)\n\nimport '@openzeppelin/contracts/utils/math/Math.sol';\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\nimport './TransferHelper.sol';\n\n// Inheritance\nimport '@openzeppelin/contracts/access/Ownable2Step.sol';\nimport '@openzeppelin/contracts/security/Pausable.sol';\n\n// # Interface for checking whether address belongs to a whitelisted\n// # type of a smart wallet.\n// # When new types are added - the whole contract is changed\n// # The check() method is modifying to be able to use caching\n// # for individual wallet addresses\ninterface SmartWalletChecker {\n  function check(address addr) external returns (bool);\n}\n\n// We cannot really do block numbers per se b/c slope is per time, not per block\n// and per block could be fairly bad b/c Ethereum changes blocktimes.\n// What we can do is to extrapolate ***At functions\nstruct Point {\n  int128 bias; // principal Sumer amount locked\n  int128 slope; // dweight / dt\n  uint256 ts;\n  uint256 blk; // block\n  uint256 sumer_amt;\n}\n// We cannot really do block numbers per se b/c slope is per time, not per block\n// and per block could be fairly bad b/c Ethereum changes blocktimes.\n// What we can do is to extrapolate ***At functions\n\nstruct LockedBalance {\n  int128 amount;\n  uint256 end;\n}\n\ncontract VeSumer is ReentrancyGuard, Ownable2Step {\n  using SafeMath for uint256;\n  using SafeERC20 for ERC20;\n\n  /* ========== STATE VARIABLES ========== */\n  // Flags\n  int128 public constant DEPOSIT_FOR_TYPE = 0;\n  int128 public constant CREATE_LOCK_TYPE = 1;\n  int128 public constant INCREASE_LOCK_AMOUNT = 2;\n  int128 public constant INCREASE_UNLOCK_TIME = 3;\n  int128 public constant USER_WITHDRAW = 4;\n  int128 public constant TRANSFER_FROM_APP = 5;\n  int128 public constant PROXY_ADD = 7;\n  int128 public constant PROXY_SLASH = 8;\n  int128 public constant CHECKPOINT_ONLY = 9;\n  address public constant ZERO_ADDRESS = address(0);\n\n  /* ========== EVENTS ========== */\n  event NominateOwnership(address admin);\n  event AcceptOwnership(address admin);\n  event Deposit(\n    address indexed provider,\n    address indexed payer_addr,\n    uint256 value,\n    uint256 indexed locktime,\n    int128 _type,\n    uint256 ts\n  );\n  event Withdraw(address indexed provider, address indexed to_addr, uint256 value, uint256 ts);\n  event Supply(uint256 prevSupply, uint256 supply);\n  event TransferFromApp(address indexed app_addr, address indexed staker_addr, uint256 transfer_amt);\n  event ProxyAdd(address indexed staker_addr, address indexed proxy_addr, uint256 add_amt);\n  event SmartWalletCheckerComitted(address future_smart_wallet_checker);\n  event SmartWalletCheckerApplied(address smart_wallet_checker);\n  event AppIncreaseAmountForsToggled(bool appIncreaseAmountForsEnabled);\n  event ProxyTransferFromsToggled(bool appTransferFromsEnabled);\n  event ProxyTransferTosToggled(bool appTransferTosEnabled);\n  event ProxyAddsToggled(bool proxyAddsEnabled);\n  event ProxySlashesToggled(bool proxySlashesEnabled);\n  event LendingProxySet(address proxy_address);\n  event HistoricalProxyToggled(address proxy_address, bool enabled);\n  event StakerProxySet(address proxy_address);\n\n  uint256 public constant WEEK = 7 * 86400; // all future times are rounded by week\n  uint256 public constant MAXTIME = 4 * 365 * 86400; // 4 years\n  int128 public constant MAXTIME_I128 = 4 * 365 * 86400; // 4 years\n  uint256 public constant MULTIPLIER = 10 ** 18;\n  int128 public constant VOTE_WEIGHT_MULTIPLIER_I128 = 4 - 1; // 4x gives 300% boost at 4 years\n\n  address public token; // Sumer\n  uint256 public supply; // Tracked Sumer in the contract\n\n  mapping(address => LockedBalance) public locked; // user -> locked balance position info\n\n  uint256 public epoch;\n  Point[100000000000000000] public point_history; // epoch -> unsigned point\n  // mapping(uint256 => Point) public point_history; // epoch -> unsigned point\n  mapping(address => Point[1000000000]) public user_point_history; // user -> Point[user_epoch]\n  // mapping(address => mapping(uint256 => Point)) public user_point_history; // user -> Point[user_epoch]\n  mapping(address => uint256) public user_point_epoch; // user -> last week epoch their slope and bias were checkpointed\n\n  // time -> signed slope change. Stored ahead of time so we can keep track of expiring users.\n  // Time will always be a multiple of 1 week\n  mapping(uint256 => int128) public slope_changes; // time -> signed slope change\n\n  // Misc\n  bool public appIncreaseAmountForsEnabled; // Whether the proxy can directly deposit FPIS and increase a particular user's stake\n  bool public appTransferFromsEnabled; // Whether Sumer can be received from apps or not\n  bool public appTransferTosEnabled; // Whether Sumer can be sent to apps or not\n  bool public proxyAddsEnabled; // Whether the proxy can add to the user's position\n  bool public proxySlashesEnabled; // Whether the proxy can slash the user's position\n\n  // Emergency Unlock\n  bool public emergencyUnlockActive;\n\n  // Proxies (allow withdrawal / deposits for lending protocols, etc.)\n  address public current_proxy; // Set by admin. Can only be one at any given time\n  mapping(address => bool) public historical_proxies; // Set by admin. Used for paying back / liquidating after the main current_proxy changes\n  mapping(address => address) public staker_whitelisted_proxy; // user -> proxy. Set by user\n  mapping(address => uint256) public user_proxy_balance; // user -> amount held in proxy\n\n  // veSumer token related\n  string public name;\n  string public symbol;\n  string public version;\n  uint256 public decimals;\n  // Checker for whitelisted (smart contract) wallets which are allowed to deposit\n  // The goal is to prevent tokenizing the escrow\n  address public future_smart_wallet_checker;\n  address public smart_wallet_checker;\n\n  address public admin; // Can and will be a smart contract\n  address public future_admin;\n\n  /* ========== MODIFIERS ========== */\n\n\n  /* ========== CONSTRUCTOR ========== */\n  // token_addr: address, _name: String[64], _symbol: String[32], _version: String[32]\n  /**\n   * @notice Contract constructor\n   * @param sumer `ERC20CRV` token address\n   */\n  constructor(address sumer) {\n    admin = msg.sender;\n    token = sumer;\n    point_history[0].blk = block.number;\n    point_history[0].ts = block.timestamp;\n    point_history[0].sumer_amt = 0;\n    appTransferFromsEnabled = false;\n    appTransferTosEnabled = false;\n    proxyAddsEnabled = false;\n    proxySlashesEnabled = false;\n\n    uint256 _decimals = ERC20(sumer).decimals();\n    assert(_decimals <= 255);\n    decimals = _decimals;\n\n    name = 'veSumer';\n    symbol = 'veSumer';\n    version = 'veSumer0.1';\n  }\n\n  /**\n   * @notice Set an external contract to check for approved smart contract wallets\n   * @param addr Address of Smart contract checker\n   */\n  function commit_smart_wallet_checker(address addr) external onlyOwner {\n    future_smart_wallet_checker = addr;\n    emit SmartWalletCheckerComitted(future_smart_wallet_checker);\n  }\n\n  /**\n   * @notice Apply setting external contract to check approved smart contract wallets\n   */\n  function apply_smart_wallet_checker() external onlyOwner {\n    smart_wallet_checker = future_smart_wallet_checker;\n    emit SmartWalletCheckerApplied(smart_wallet_checker);\n  }\n\n  function recoverERC20(address token_addr, uint256 amount) external onlyOwner {\n    require(token_addr != token, '!token_addr');\n    ERC20(token_addr).transfer(admin, amount);\n  }\n\n  /**\n   * @notice Check if the call is from a whitelisted smart contract, revert if not\n   * @param addr Address to be checked\n   */\n  function assert_not_contract(address addr) internal {\n    if (addr != tx.origin) {\n      address checker = smart_wallet_checker;\n      if (checker != ZERO_ADDRESS) {\n        if (SmartWalletChecker(checker).check(addr)) {\n          return;\n        }\n      }\n      revert('depositors');\n    }\n  }\n\n  /* ========== VIEWS ========== */\n  /**\n   * @notice Get the most recently recorded rate of voting power decrease for `addr`\n   * @param addr Address of the user wallet\n   * @return Value of the slope\n   */\n  function get_last_user_slope(address addr) external view returns (int128) {\n    uint256 uepoch = user_point_epoch[addr];\n    return user_point_history[addr][uepoch].slope;\n  }\n\n  function get_last_user_bias(address addr) external view returns (int128) {\n    uint256 uepoch = user_point_epoch[addr];\n    return user_point_history[addr][uepoch].bias;\n  }\n\n  function get_last_user_point(address addr) external view returns (Point memory) {\n    uint256 uepoch = user_point_epoch[addr];\n    return user_point_history[addr][uepoch];\n  }\n\n  /**\n   * @notice Get the timestamp for checkpoint `_idx` for `_addr`\n   * @param _addr User wallet address\n   * @param _idx User epoch number\n   * @return Epoch time of the checkpoint\n   */\n  function user_point_history__ts(address _addr, uint256 _idx) external view returns (uint256) {\n    return user_point_history[_addr][_idx].ts;\n  }\n\n  function get_last_point() external view returns (Point memory) {\n    return point_history[epoch];\n  }\n\n  /**\n   * @notice Get timestamp when `_addr`'s lock finishes\n   * @param _addr User wallet\n   * @return Epoch time of the lock end\n   */\n  function locked__end(address _addr) external view returns (uint256) {\n    return locked[_addr].end;\n  }\n\n  function locked__amount(address _addr) external view returns (int128) {\n    return locked[_addr].amount;\n  }\n\n  function curr_period_start() external view returns (uint256) {\n    return (block.timestamp / WEEK) * WEEK;\n  }\n\n  function next_period_start() external view returns (uint256) {\n    return WEEK + (block.timestamp / WEEK) * WEEK;\n  }\n\n  // Constant structs not allowed yet, so this will have to do\n  function EMPTY_POINT_FACTORY() internal pure returns (Point memory) {\n    return Point({bias: 0, slope: 0, ts: 0, blk: 0, sumer_amt: 0});\n  }\n\n  /* ========== INTERNAL FUNCTIONS ========== */\n  /**\n   * @notice Record global and per-user data to checkpoint\n   * @param addr User's wallet address. No user checkpoint if 0x0\n   * @param old_locked Previous locked amount / end lock time for the user\n   * @param new_locked New locked amount / end lock time for the user\n   */\n  function _checkpoint(\n    address addr,\n    LockedBalance memory old_locked,\n    LockedBalance memory new_locked,\n    int128 flag\n  ) internal {\n    Point memory usr_old_pt = EMPTY_POINT_FACTORY();\n    Point memory usr_new_pt = EMPTY_POINT_FACTORY();\n    int128 old_gbl_dslope = 0;\n    int128 new_gbl_dslope = 0;\n    uint256 _epoch = epoch;\n\n    if (addr != ZERO_ADDRESS) {\n      // Calculate slopes and biases\n      // Kept at zero when they have to\n      if ((old_locked.end > block.timestamp) && (old_locked.amount > 0)) {\n        usr_old_pt.slope = (old_locked.amount * VOTE_WEIGHT_MULTIPLIER_I128) / MAXTIME_I128;\n        usr_old_pt.bias = old_locked.amount + (usr_old_pt.slope * int128(uint128(old_locked.end - block.timestamp)));\n      }\n      if ((new_locked.end > block.timestamp) && (new_locked.amount > 0)) {\n        usr_new_pt.slope = (new_locked.amount * VOTE_WEIGHT_MULTIPLIER_I128) / MAXTIME_I128;\n        usr_new_pt.bias = new_locked.amount + (usr_new_pt.slope * int128(uint128(new_locked.end - block.timestamp)));\n      }\n\n      // Read values of scheduled changes in the slope\n      // old_locked.end can be in the past and in the future\n      // new_locked.end can ONLY by in the FUTURE unless everything expired: than zeros\n      old_gbl_dslope = slope_changes[old_locked.end];\n      if (new_locked.end != 0) {\n        if (new_locked.end == old_locked.end) {\n          new_gbl_dslope = old_gbl_dslope;\n        } else {\n          new_gbl_dslope = slope_changes[new_locked.end];\n        }\n      }\n    }\n\n    Point memory last_point = Point({bias: 0, slope: 0, ts: block.timestamp, blk: block.number, sumer_amt: 0});\n    if (_epoch > 0) {\n      last_point = point_history[_epoch];\n    }\n    uint256 last_checkpoint = last_point.ts;\n\n    // initial_last_point is used for extrapolation to calculate block number\n    // (approximately, for *At methods) and save them\n    // as we cannot figure that out exactly from inside the contract\n    Point memory initial_last_point = last_point;\n\n    uint256 block_slope = 0; // dblock/dt\n    if (block.timestamp > last_point.ts) {\n      block_slope = (MULTIPLIER * (block.number - last_point.blk)) / (block.timestamp - last_point.ts);\n    }\n\n    // If last point is already recorded in this block, slope=0\n    // But that's ok b/c we know the block in such case\n\n    // Go over weeks to fill history and calculate what the current point is\n    uint256 latest_checkpoint_ts = (last_checkpoint / WEEK) * WEEK;\n    for (uint i = 0; i < 255; i++) {\n      // Hopefully it won't happen that this won't get used in 4 years!\n      // If it does, users will be able to withdraw but vote weight will be broken\n      latest_checkpoint_ts += WEEK;\n      int128 d_slope = 0;\n      if (latest_checkpoint_ts > block.timestamp) {\n        latest_checkpoint_ts = block.timestamp;\n      } else {\n        d_slope = slope_changes[latest_checkpoint_ts];\n      }\n      last_point.bias -= last_point.slope * int128(uint128(latest_checkpoint_ts - last_checkpoint));\n\n      last_point.slope += d_slope;\n\n      if (last_point.bias < 0) {\n        last_point.bias = 0; // This can happen\n      }\n      if (last_point.slope < 0) {\n        last_point.slope = 0; // This cannot happen - just in case\n      }\n      last_checkpoint = latest_checkpoint_ts;\n      last_point.ts = latest_checkpoint_ts;\n\n      last_point.blk =\n        initial_last_point.blk +\n        (block_slope * (latest_checkpoint_ts - initial_last_point.ts)) /\n        MULTIPLIER;\n      _epoch += 1;\n\n      if (latest_checkpoint_ts == block.timestamp) {\n        last_point.blk = block.number;\n        break;\n      } else {\n        point_history[_epoch] = last_point;\n      }\n    }\n\n    epoch = _epoch;\n    // Now point_history is filled until t=now\n\n    if (addr != ZERO_ADDRESS) {\n      // If last point was in this block, the slope change has been applied already\n      // But in such case we have 0 slope(s)\n      last_point.slope += (usr_new_pt.slope - usr_old_pt.slope);\n      last_point.bias += (usr_new_pt.bias - usr_old_pt.bias);\n\n      if (new_locked.amount > old_locked.amount) {\n        last_point.sumer_amt += uint256(uint128(new_locked.amount - old_locked.amount));\n        if (new_locked.amount < old_locked.amount) {\n          last_point.sumer_amt -= uint256(uint128(old_locked.amount - new_locked.amount));\n          // Subtract the bias if you are slashing after expiry\n          if (flag == PROXY_SLASH && new_locked.end < block.timestamp) {\n            // Net change is the delta\n            last_point.bias += new_locked.amount;\n            last_point.bias -= old_locked.amount;\n          }\n          // Remove the offset\n          // Corner case to fix issue because emergency unlock allows withdrawal before expiry and disrupts the math\n          if (new_locked.amount == 0) {\n            if (!emergencyUnlockActive) {\n              // Net change is the delta\n              // last_point.bias += new_locked.amount WILL BE ZERO\n              last_point.bias -= old_locked.amount;\n            }\n          }\n        }\n      }\n      if (last_point.slope < 0) {\n        last_point.slope = 0;\n      }\n      if (last_point.bias < 0) {\n        last_point.bias = 0;\n      }\n    }\n\n    // Record the changed point into history\n    point_history[_epoch] = last_point;\n\n    if (addr != ZERO_ADDRESS) {\n      // Schedule the slope changes (slope is going down)\n      // We subtract new_user_slope from [new_locked.end]\n      // and add old_user_slope to [old_locked.end]\n      if (old_locked.end > block.timestamp) {\n        // old_gbl_dslope was <something> - usr_old_pt.slope, so we cancel that\n        old_gbl_dslope += usr_old_pt.slope;\n        if (new_locked.end == old_locked.end) {\n          old_gbl_dslope -= usr_new_pt.slope; // It was a new deposit, not extension\n        }\n        slope_changes[old_locked.end] = old_gbl_dslope;\n      }\n\n      if (new_locked.end > block.timestamp) {\n        if (new_locked.end > old_locked.end) {\n          new_gbl_dslope -= usr_new_pt.slope; // old slope disappeared at this point\n          slope_changes[new_locked.end] = new_gbl_dslope;\n        }\n        // else: we recorded it already in old_gbl_dslope\n      }\n\n      uint256 user_epoch = user_point_epoch[addr] + 1;\n      user_point_epoch[addr] = user_epoch;\n      usr_new_pt.ts = block.timestamp;\n      usr_new_pt.blk = block.number;\n      usr_new_pt.sumer_amt = uint128(locked[addr].amount);\n\n      if (new_locked.end < block.timestamp) {\n        usr_new_pt.bias = locked[addr].amount;\n        usr_new_pt.slope = 0;\n      }\n      user_point_history[addr][user_epoch] = usr_new_pt;\n    }\n  }\n\n  /**\n   * @notice Deposit and lock tokens for a user\n   * @param _staker_addr User's wallet address\n   * @param _payer_addr Payer's wallet address\n   * @param _value Amount to deposit\n   * @param unlock_time New time when to unlock the tokens, or 0 if unchanged\n   * @param locked_balance Previous locked amount / timestamp\n   */\n  function _deposit_for(\n    address _staker_addr,\n    address _payer_addr,\n    uint256 _value,\n    uint256 unlock_time,\n    LockedBalance memory locked_balance,\n    int128 flag\n  ) internal {\n    require(ERC20(token).transferFrom(_payer_addr, address(this), _value), 'transfer failed');\n\n    LockedBalance memory old_locked = locked_balance;\n    uint256 supply_before = supply;\n\n    LockedBalance memory new_locked = old_locked;\n\n    supply = supply_before + _value;\n\n    // Adding to existing lock, or if a lock is expired - creating a new one\n    new_locked.amount += int128(uint128(_value));\n    if (unlock_time != 0) {\n      new_locked.end = unlock_time;\n    }\n    locked[_staker_addr] = new_locked;\n\n    // Possibilities:\n    // Both old_locked.end could be current or expired (>/< block.timestamp)\n    // value == 0 (extend lock) or value > 0 (add to lock or extend lock)\n    // _locked.end > block.timestamp (always)\n    _checkpoint(_staker_addr, old_locked, new_locked, flag);\n\n    emit Deposit(_staker_addr, _payer_addr, _value, new_locked.end, flag, block.timestamp);\n    emit Supply(supply_before, supply_before + _value);\n  }\n\n  /* ========== MUTATIVE FUNCTIONS ========== */\n\n  /**\n   * @notice Record global data to checkpoint\n   */\n  function checkpoint() external {\n    _checkpoint(ZERO_ADDRESS, EMPTY_LOCKED_BALANCE_FACTORY(), EMPTY_LOCKED_BALANCE_FACTORY(), 0);\n  }\n\n  /**\n   * @notice Deposit `_value` tokens for `msg.sender` and lock until `_unlock_time`\n   * @param _value Amount to deposit\n   * @param _unlock_time Epoch time when tokens unlock, rounded down to whole weeks\n   */\n  function create_lock(uint256 _value, uint256 _unlock_time) external nonReentrant {\n    assert_not_contract(msg.sender);\n    uint256 unlock_time = (_unlock_time / WEEK) * WEEK; // Locktime is rounded down to weeks\n    LockedBalance memory _locked = locked[msg.sender];\n\n    require(_value > 0, '<=0');\n    require(_locked.amount == 0, 'amount=0');\n    require(unlock_time > block.timestamp, 'unlock_time');\n    require(unlock_time <= block.timestamp + MAXTIME, 'MAXTIME');\n    _deposit_for(msg.sender, msg.sender, _value, unlock_time, _locked, CREATE_LOCK_TYPE);\n  }\n\n  function _increase_amount(address _staker_addr, address _payer_addr, uint256 _value) internal {\n    if (_payer_addr != current_proxy && !historical_proxies[_payer_addr]) {\n      assert_not_contract(_payer_addr);\n    }\n    assert_not_contract(_staker_addr);\n\n    LockedBalance memory _locked = locked[_staker_addr];\n\n    require(_value > 0, '<=0');\n    require(_locked.amount == 0, 'amount=0');\n    require(_locked.end > block.timestamp, 'locked.end');\n    _deposit_for(_staker_addr, _payer_addr, _value, 0, _locked, INCREASE_LOCK_AMOUNT);\n  }\n\n  /**\n   * @notice Deposit `_value` additional tokens for `msg.sender` without modifying the unlock time\n   * @param _value Amount of tokens to deposit and add to the lock\n   */\n  function increase_amount(uint256 _value) external nonReentrant {\n    _increase_amount(msg.sender, msg.sender, _value);\n  }\n\n  function increase_amount_for(address _staker_addr, uint256 _value) external nonReentrant {\n    require(appIncreaseAmountForsEnabled, 'Currently disabled');\n    _increase_amount(_staker_addr, msg.sender, _value);\n  }\n\n  function checkpoint_user(address _staker_addr) external nonReentrant {\n    LockedBalance memory _locked = locked[_staker_addr];\n    require(_locked.amount > 0, '<=0');\n    _deposit_for(_staker_addr, _staker_addr, 0, 0, _locked, CHECKPOINT_ONLY);\n  }\n\n  /**\n   * @notice Extend the unlock time for `msg.sender` to `_unlock_time`\n   * @param _unlock_time New epoch time for unlocking\n   */\n  function increase_unlock_time(uint256 _unlock_time) external nonReentrant {\n    assert_not_contract(msg.sender);\n    LockedBalance memory _locked = locked[msg.sender];\n    uint256 unlock_time = (_unlock_time / WEEK) * WEEK; // Locktime is rounded down to weeks\n\n    require(_locked.end > block.timestamp, 'locked.end');\n    require(_locked.amount > 0, '=0');\n    require(unlock_time > _locked.end, 'unlock_time');\n    require(unlock_time <= block.timestamp + MAXTIME, 'MAXTIME');\n\n    _deposit_for(msg.sender, msg.sender, 0, unlock_time, _locked, INCREASE_UNLOCK_TIME);\n  }\n\n  /**\n   * @notice Withdraw all tokens for `msg.sender`ime`\n   * @dev Only possible if the lock has expired\n   */\n  function _withdraw(\n    address staker_addr,\n    address addr_out,\n    LockedBalance memory locked_in,\n    int128 amount_in,\n    int128 flag\n  ) internal {\n    require(amount_in >= 0 && amount_in <= locked_in.amount, 'amount');\n\n    LockedBalance memory _locked = locked_in;\n    // require(block.timestamp >= _locked.end, \"The lock didn't expire\");\n    uint256 value = uint128(_locked.amount);\n\n    LockedBalance memory old_locked = _locked;\n    if (amount_in == _locked.amount) {\n      _locked.end = 0;\n    }\n    _locked.amount -= amount_in;\n\n    locked[staker_addr] = _locked;\n    uint256 supply_before = supply;\n    supply = supply_before - value;\n\n    // old_locked can have either expired <= timestamp or zero end\n    // _locked has only 0 end\n    // Both can have >= 0 amount\n    _checkpoint(staker_addr, old_locked, _locked, flag);\n\n    require(ERC20(token).transfer(msg.sender, value), 'transfer failed');\n\n    emit Withdraw(staker_addr, addr_out, value, block.timestamp);\n    emit Supply(supply_before, supply_before - value);\n  }\n\n  function proxy_add(address _staker_addr, uint256 _add_amt) external nonReentrant {\n    require(proxyAddsEnabled, 'Currently disabled');\n    require(msg.sender == current_proxy || historical_proxies[msg.sender], 'Whitelisted[admin level]');\n    require(msg.sender == staker_whitelisted_proxy[_staker_addr], 'Whitelisted[staker level]');\n\n    LockedBalance memory old_locked = locked[_staker_addr];\n    // uint256 _proxy_balance = user_proxy_balance[_staker_addr];\n\n    require(old_locked.amount > 0, 'No existing lock found');\n    require(_add_amt > 0, 'Amount must be non-zero');\n\n    user_proxy_balance[_staker_addr] += _add_amt;\n    uint256 supply_before = supply;\n\n    LockedBalance memory new_locked = old_locked;\n\n    supply += _add_amt;\n\n    new_locked.amount += int128(uint128(_add_amt));\n    locked[_staker_addr] = new_locked;\n\n    _checkpoint(_staker_addr, old_locked, new_locked, PROXY_ADD);\n\n    emit ProxyAdd(_staker_addr, msg.sender, _add_amt);\n    emit Supply(supply_before, supply_before + _add_amt);\n  }\n\n  function proxy_slash(address _staker_addr, uint256 _slash_amt) external nonReentrant {\n    require(proxyAddsEnabled, 'Currently disabled');\n    require(msg.sender == current_proxy || historical_proxies[msg.sender], 'Whitelisted[admin level]');\n    require(msg.sender == staker_whitelisted_proxy[_staker_addr], 'whitelisted[staker level]');\n\n    LockedBalance memory old_locked = locked[_staker_addr];\n    // uint256 _proxy_balance = user_proxy_balance[_staker_addr];\n\n    require(old_locked.amount > 0, 'No existing lock found');\n    require(_slash_amt > 0, 'Amount must be non-zero');\n\n    require(user_proxy_balance[_staker_addr] >= _slash_amt, 'user_proxy_balance');\n    user_proxy_balance[_staker_addr] -= _slash_amt;\n\n    uint256 supply_before = supply;\n\n    LockedBalance memory new_locked = old_locked;\n    supply -= _slash_amt;\n\n    new_locked.amount -= int128(uint128(_slash_amt));\n    locked[_staker_addr] = new_locked;\n\n    _checkpoint(_staker_addr, old_locked, new_locked, PROXY_SLASH);\n    emit ProxyAdd(_staker_addr, msg.sender, _slash_amt);\n    emit Supply(supply_before, supply_before + _slash_amt);\n  }\n\n  function withdraw() external nonReentrant {\n    LockedBalance memory _locked = locked[msg.sender];\n\n    require(block.timestamp >= _locked.end || emergencyUnlockActive, 'locked.end');\n    require(user_proxy_balance[msg.sender] == 0, 'user_proxy_balance');\n\n    _withdraw(msg.sender, msg.sender, _locked, _locked.amount, USER_WITHDRAW);\n  }\n\n  function transfer_from_app(address _staker_addr, address _app_addr, int128 _transfer_amt) external nonReentrant {\n    require(appTransferFromsEnabled, 'Currently disabled');\n    require(msg.sender == current_proxy || historical_proxies[msg.sender], 'whitelisted[admin level]');\n    require(msg.sender == staker_whitelisted_proxy[_staker_addr], 'whitelisted[staker level]');\n\n    LockedBalance memory _locked = locked[_staker_addr];\n    require(_locked.amount > 0, '_locked.amount');\n\n    uint256 _value = uint128(_transfer_amt);\n    require(user_proxy_balance[_staker_addr] >= _value, 'user_proxy_balance');\n    user_proxy_balance[_staker_addr] -= _value;\n\n    require(ERC20(token).transferFrom(_app_addr, address(this), _value), 'transfer failed');\n    _checkpoint(_staker_addr, _locked, _locked, TRANSFER_FROM_APP);\n    emit TransferFromApp(_app_addr, _staker_addr, _value);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // Constant structs not allowed yet, so this will have to do\n  function EMPTY_LOCKED_BALANCE_FACTORY() internal pure returns (LockedBalance memory) {\n    return LockedBalance({amount: 0, end: 0});\n  }\n\n  /**\n   * @notice Get the current voting power for `msg.sender` at the specified timestamp\n   * @dev Adheres to the ERC20 `balanceOf` interface for Aragon compatibility\n   * @param addr User wallet address\n   * @param _t Epoch time to return voting power at\n   * @return User voting power\n   */\n  function balanceOf(address addr, uint256 _t) public view returns (uint256) {\n    uint256 _epoch = user_point_epoch[addr];\n    if (_epoch == 0) {\n      return 0;\n    } else {\n      Point memory last_point = user_point_history[addr][_epoch];\n      last_point.bias -= last_point.slope * (int128(uint128(_t)) - int128(uint128(last_point.ts)));\n      if (last_point.bias < 0) {\n        last_point.bias = 0;\n      }\n      return uint256(int256(last_point.bias));\n    }\n  }\n\n  /**\n   * @notice Get the current voting power for `msg.sender` at the current timestamp\n   * @dev Adheres to the ERC20 `balanceOf` interface for Aragon compatibility\n   * @param addr User wallet address\n   * @return User voting power\n   */\n  function balanceOf(address addr) public view returns (uint256) {\n    return balanceOf(addr, block.timestamp);\n  }\n\n  /**\n   * @notice Measure voting power of `addr` at block height `_block`\n   * @dev Adheres to MiniMe `balanceOfAt` interface: https://github.com/Giveth/minime\n   * @param addr User's wallet address\n   * @param _block Block to calculate the voting power at\n   * @return Voting power\n   */\n  function balanceOfAt(address addr, uint256 _block) external view returns (uint256) {\n    // Copying and pasting totalSupply code because Vyper cannot pass by\n    // reference yet\n    require(_block <= block.number);\n\n    // Binary search\n    uint256 _min = 0;\n    uint256 _max = user_point_epoch[addr];\n\n    // Will be always enough for 128-bit numbers\n    for (uint i = 0; i < 128; i++) {\n      if (_min >= _max) {\n        break;\n      }\n      uint256 _mid = (_min + _max + 1) / 2;\n      if (user_point_history[addr][_mid].blk <= _block) {\n        _min = _mid;\n      } else {\n        _max = _mid - 1;\n      }\n    }\n\n    Point memory upoint = user_point_history[addr][_min];\n\n    uint256 max_epoch = epoch;\n    uint256 _epoch = find_block_epoch(_block, max_epoch);\n    Point memory point_0 = point_history[_epoch];\n    uint256 d_block = 0;\n    uint256 d_t = 0;\n\n    if (_epoch < max_epoch) {\n      Point memory point_1 = point_history[_epoch + 1];\n      d_block = point_1.blk - point_0.blk;\n      d_t = point_1.ts - point_0.ts;\n    } else {\n      d_block = block.number - point_0.blk;\n      d_t = block.timestamp - point_0.ts;\n    }\n\n    uint256 block_time = point_0.ts;\n    if (d_block != 0) {\n      block_time += (d_t * (_block - point_0.blk)) / d_block;\n    }\n\n    upoint.bias -= upoint.slope * (int128(uint128(block_time)) - int128(uint128(upoint.ts)));\n    if (upoint.bias >= 0) {\n      return uint256(int256(upoint.bias));\n    } else {\n      return 0;\n    }\n  }\n\n  /**\n   * @notice Calculate total voting power at the specified timestamp\n   * @dev Adheres to the ERC20 `totalSupply` interface for Aragon compatibility\n   * @return Total voting power\n   */\n  function totalSupply(uint256 t) public view returns (uint256) {\n    uint256 _epoch = epoch;\n    Point memory last_point = point_history[_epoch];\n    return supply_at(last_point, t);\n  }\n\n  /**\n   * @notice Calculate total voting power at the current timestamp\n   * @dev Adheres to the ERC20 `totalSupply` interface for Aragon compatibility\n   * @return Total voting power\n   */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply(block.timestamp);\n  }\n\n  /**\n   * @notice Calculate total voting power at some point in the past\n   * @param _block Block to calculate the total voting power at\n   * @return Total voting power at `_block`\n   */\n  function totalSupplyAt(uint256 _block) external view returns (uint256) {\n    require(_block <= block.number);\n    uint256 _epoch = epoch;\n    uint256 target_epoch = find_block_epoch(_block, _epoch);\n\n    Point memory point = point_history[target_epoch];\n    uint256 dt = 0;\n\n    if (target_epoch < _epoch) {\n      Point memory point_next = point_history[target_epoch + 1];\n      if (point.blk != point_next.blk) {\n        dt = ((_block - point.blk) * (point_next.ts - point.ts)) / (point_next.blk - point.blk);\n      }\n    } else {\n      if (point.blk != block.number) {\n        dt = ((_block - point.blk) * (block.timestamp - point.ts)) / (block.number - point.blk);\n      }\n    }\n\n    // Now dt contains info on how far are we beyond point\n    return supply_at(point, point.ts + dt);\n  }\n\n  // The following ERC20/minime-compatible methods are not real balanceOf and supply!\n  // They measure the weights for the purpose of voting, so they don't represent\n  // real coins.\n  /**\n   * @notice Binary search to estimate timestamp for block number\n   * @param _block Block to find\n   * @param max_epoch Don't go beyond this epoch\n   * @return Approximate timestamp for block\n   */\n  function find_block_epoch(uint256 _block, uint256 max_epoch) internal view returns (uint256) {\n    // Binary search\n    uint256 _min = 0;\n    uint256 _max = max_epoch;\n\n    // Will be always enough for 128-bit numbers\n    for (uint i = 0; i < 128; i++) {\n      if (_min >= _max) {\n        break;\n      }\n      uint256 _mid = (_min + _max + 1) / 2;\n      if (point_history[_mid].blk <= _block) {\n        _min = _mid;\n      } else {\n        _max = _mid - 1;\n      }\n    }\n\n    return _min;\n  }\n\n  /**\n   * @notice Calculate total voting power at some point in the past\n   * @param point The point (bias/slope) to start search from\n   * @param t Time to calculate the total voting power at\n   * @return Total voting power at that time\n   */\n  function supply_at(Point memory point, uint256 t) internal view returns (uint256) {\n    Point memory last_point = point;\n    uint256 t_i = (last_point.ts / WEEK) * WEEK;\n\n    for (uint i = 0; i < 255; i++) {\n      t_i += WEEK;\n      int128 d_slope = 0;\n      if (t_i > t) {\n        t_i = t;\n      } else {\n        d_slope = slope_changes[t_i];\n      }\n      last_point.bias -= last_point.slope * (int128(uint128(t_i)) - int128(uint128(last_point.ts)));\n      if (t_i == t) {\n        break;\n      }\n      last_point.slope += d_slope;\n      last_point.ts = t_i;\n    }\n\n    if (last_point.bias < 0) {\n      last_point.bias = 0;\n    }\n    return uint256(int256(last_point.bias));\n  }\n\n  /**\n        * @notice Deposit and lock tokens for a user\n        * @dev Anyone (even a smart contract) can deposit for someone else, but\n        cannot extend their locktime and deposit for a brand new user\n        * @param _addr User's wallet address\n        * @param _value Amount to add to user's lock\n    */\n  function deposit_for(address _addr, uint256 _value) external nonReentrant {\n    LockedBalance memory _locked = locked[_addr];\n    require(_value > 0, '=0');\n    require(_locked.amount > 0, 'locked.amount');\n    require(_locked.end > block.timestamp, 'locked.end');\n    _deposit_for(_addr, msg.sender, _value, 0, locked[_addr], DEPOSIT_FOR_TYPE);\n  }\n\n  /* ========== RESTRICTED FUNCTIONS ========== */\n}\n"
    },
    "contracts/Timelock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '@openzeppelin/contracts/access/AccessControlEnumerable.sol';\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport './ITimelock.sol';\n\ninterface ICToken {\n  function underlying() external view returns (address);\n\n  function isCEther() external view returns (bool);\n}\n\ncontract Timelock is ITimelock, AccessControlEnumerable, ReentrancyGuard {\n  using SafeERC20 for IERC20;\n  using EnumerableSet for EnumerableSet.UintSet;\n\n  bytes32 public constant EMERGENCY_ADMIN = keccak256('EMERGENCY_ADMIN');\n  /// @notice user => agreements ids set\n  mapping(address => EnumerableSet.UintSet) private _userAgreements;\n  /// @notice ids => agreement\n  mapping(uint256 => Agreement) private agreements;\n  /// @notice cToken => underlying\n  mapping(address => address) public cTokenToUnderlying;\n  /// @notice underlying => underlyDetial\n  mapping(address => Underlying) public underlyingDetail;\n  uint256 public agreementCount;\n  bool public frozen;\n\n  constructor(address[] memory cTokens) {\n    for (uint i; i < cTokens.length; ++i) {\n      address cToken = cTokens[i];\n      require(cToken != address(0), 'cToken is zero');\n      address underlying;\n      if (ICToken(cToken).isCEther()) {\n        underlying = address(1);\n      } else {\n        underlying = ICToken(cToken).underlying();\n      }\n      require(underlying != address(0), 'underlying is zero');\n      cTokenToUnderlying[cToken] = underlying;\n      underlyingDetail[underlying].cToken = cToken;\n      underlyingDetail[underlying].isSupport = true;\n    }\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    _setupRole(EMERGENCY_ADMIN, msg.sender);\n  }\n\n  receive() external payable {}\n\n  modifier onlyAdmin() {\n    require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), 'CALLER_NOT_ADMIN');\n    _;\n  }\n\n  modifier onlyEmergencyAdmin() {\n    require(hasRole(EMERGENCY_ADMIN, msg.sender), 'CALLER_NOT_EMERGENCY_ADMIN');\n    _;\n  }\n\n  modifier onlyCToken(address underlying) {\n    require(cTokenToUnderlying[msg.sender] == underlying && underlying != address(0), 'CALLER_NOT_CTOKEN');\n    require(underlyingDetail[underlying].isSupport, 'NOT_SUPPORT');\n    _;\n  }\n\n  function setUnderly(address cToken, address underlying, bool isSupport) external onlyAdmin {\n    cTokenToUnderlying[cToken] = underlying;\n    underlyingDetail[underlying].cToken = cToken;\n    underlyingDetail[underlying].isSupport = isSupport;\n  }\n\n  function setLockDuration(address underlying, uint256 lockDuration) external onlyAdmin {\n    underlyingDetail[underlying].lockDuration = lockDuration;\n  }\n\n  function rescueERC20(address token, address to, uint256 amount) external onlyEmergencyAdmin {\n    IERC20(token).safeTransfer(to, amount);\n    emit RescueERC20(token, to, amount);\n  }\n\n  function createAgreement(\n    TimeLockActionType actionType,\n    address underlying,\n    uint256 amount,\n    address beneficiary\n  ) external onlyCToken(underlying) returns (uint256) {\n    require(beneficiary != address(0), 'Beneficiary cant be zero address');\n    uint256 underlyBalance;\n    if (underlying == address(1)) {\n      underlyBalance = address(this).balance;\n    } else {\n      underlyBalance = IERC20(underlying).balanceOf(address(this));\n    }\n    require(underlyBalance >= underlyingDetail[underlying].totalBalance + amount, 'balance error');\n    underlyingDetail[underlying].totalBalance = underlyBalance;\n\n    uint256 agreementId = agreementCount++;\n    uint256 releaseTime = block.timestamp + underlyingDetail[underlying].lockDuration;\n    agreements[agreementId] = Agreement({\n      actionType: actionType,\n      underlying: underlying,\n      amount: amount,\n      beneficiary: beneficiary,\n      releaseTime: releaseTime,\n      isFrozen: false,\n      agreementId: agreementId\n    });\n    _userAgreements[beneficiary].add(agreementId);\n\n    emit AgreementCreated(agreementId, actionType, underlying, amount, beneficiary, releaseTime);\n    return agreementId;\n  }\n\n  function _validateAndDeleteAgreement(uint256 agreementId) internal returns (Agreement memory) {\n    Agreement memory agreement = agreements[agreementId];\n    require(msg.sender == agreement.beneficiary, 'Not beneficiary');\n    require(block.timestamp >= agreement.releaseTime, 'Release time not reached');\n    require(!agreement.isFrozen, 'Agreement frozen');\n    delete agreements[agreementId];\n    _userAgreements[agreement.beneficiary].remove(agreementId);\n\n    emit AgreementClaimed(\n      agreementId,\n      agreement.actionType,\n      agreement.underlying,\n      agreement.amount,\n      agreement.beneficiary\n    );\n\n    return agreement;\n  }\n\n  function claim(uint256[] calldata agreementIds) external nonReentrant {\n    require(!frozen, 'TimeLock is frozen');\n\n    for (uint256 index = 0; index < agreementIds.length; index++) {\n      Agreement memory agreement = _validateAndDeleteAgreement(agreementIds[index]);\n      if (agreement.underlying == address(1)) {\n        // payable(agreement.beneficiary).transfer(agreement.amount);\n        Address.sendValue(payable(agreement.beneficiary), agreement.amount);\n      } else {\n        IERC20(agreement.underlying).safeTransfer(agreement.beneficiary, agreement.amount);\n      }\n      underlyingDetail[agreement.underlying].totalBalance -= agreement.amount;\n    }\n  }\n\n  function underlyingDetails(address[] calldata underlyings) external view returns (Underlying[] memory) {\n    uint256 underlyingLength = underlyings.length;\n    Underlying[] memory underlyingDetails = new Underlying[](underlyingLength);\n    for (uint256 i; i < underlyingLength; ++i) {\n      underlyingDetails[i] = underlyingDetail[underlyings[i]];\n    }\n    return underlyingDetails;\n  }\n\n  function userAgreements(address user) external view returns (Agreement[] memory) {\n    uint256 agreementLength = _userAgreements[user].length();\n    Agreement[] memory userAgreements = new Agreement[](agreementLength);\n    for (uint256 i; i < agreementLength; ++i) {\n      userAgreements[i] = agreements[_userAgreements[user].at(i)];\n    }\n    return userAgreements;\n  }\n\n  function isSupport(address underlying) external view returns (bool) {\n    return underlyingDetail[underlying].isSupport;\n  }\n\n  function freezeAgreement(uint256 agreementId) external onlyEmergencyAdmin {\n    agreements[agreementId].isFrozen = true;\n    emit AgreementFrozen(agreementId, true);\n  }\n\n  function freezeAllAgreements() external onlyEmergencyAdmin {\n    frozen = true;\n    emit TimeLockFrozen(true);\n  }\n\n  function unfreezeAllAgreements() external onlyAdmin {\n    frozen = false;\n    emit TimeLockFrozen(false);\n  }\n}\n"
    }
  },
  "settings": {
    "viaIR": true,
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}