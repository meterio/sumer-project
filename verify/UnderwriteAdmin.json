{
  "language": "Solidity",
  "settings": {
    "viaIR": true,
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "": ["ast"],
        "*": ["abi", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers", "metadata", "storageLayout"]
      }
    }
  },
  "sources": {
    "contracts/Comptroller/UnderWriterAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport './ComptrollerErrorReporter.sol';\nimport './UnderwriterStorage.sol';\nimport './Interfaces/IPriceOracle.sol';\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\ncontract UnderwriterAdmin is IUnderwriterAdmin, UnderwriterStorage, Initializable {\n  function initialize(address _gov, address _admin) public initializer {\n    admin = _admin;\n    governanceToken = _gov;\n    suTokenRateMantissa = 10**18;\n  }\n\n  function setAssetGroup(\n    uint8 groupId,\n    string memory groupName,\n    uint256 intraCRateMantissa, // ctoken collateral rate for intra group ctoken liability\n    uint256 intraMintRateMantissa, // ctoken collateral rate for intra group sutoken liability\n    uint256 intraSuRateMantissa, // sutoken collateral rate for intra group ctoken liability\n    uint256 interCRateMantissa, // ctoken collateral rate for inter group ctoken/sutoken liability\n    uint256 interSuRateMantissa // sutoken collateral rate for inter group ctoken/sutoken liability\n  ) public returns (uint256) {\n    // Check caller is admin\n    if (msg.sender != admin) {\n      return\n        ComptrollerErrorReporter.fail(\n          ComptrollerErrorReporter.Error.UNAUTHORIZED,\n          ComptrollerErrorReporter.FailureInfo.SET_EQUAL_ASSET_GROUP_OWNER_CHECK\n        );\n    }\n\n    eqAssetGroup[groupId] = AssetGroup(\n      groupId,\n      groupName,\n      intraCRateMantissa,\n      intraMintRateMantissa,\n      intraSuRateMantissa,\n      interCRateMantissa,\n      interSuRateMantissa\n    );\n    equalAssetsGroupNum++;\n    emit NewAssetGroup(\n      groupId,\n      groupName,\n      intraCRateMantissa,\n      intraMintRateMantissa,\n      intraSuRateMantissa,\n      interCRateMantissa,\n      interSuRateMantissa,\n      equalAssetsGroupNum\n    );\n    return uint256(ComptrollerErrorReporter.Error.NO_ERROR);\n  }\n\n  function removeAssetGroup(uint8 groupId) public returns (uint256) {\n    // Check caller is admin\n    if (msg.sender != admin) {\n      return\n        ComptrollerErrorReporter.fail(\n          ComptrollerErrorReporter.Error.UNAUTHORIZED,\n          ComptrollerErrorReporter.FailureInfo.SET_EQUAL_ASSET_GROUP_OWNER_CHECK\n        );\n    }\n\n    delete eqAssetGroup[groupId];\n    equalAssetsGroupNum--;\n    emit RemoveAssetGroup(groupId, equalAssetsGroupNum);\n    return uint256(ComptrollerErrorReporter.Error.NO_ERROR);\n  }\n\n  function getAssetGroup(uint8 groupId) public view override returns (AssetGroup memory) {\n    return eqAssetGroup[groupId];\n  }\n\n  function getAssetGroupNum() public view override returns (uint8) {\n    return equalAssetsGroupNum;\n  }\n\n  /**\n   * @notice Admin function to change the Pause Guardian\n   * @param newPauseGuardian The address of the new Pause Guardian\n   * @return uint 0=success, otherwise a failure. (See enum Error for details)\n   */\n  function _setPauseGuardian(address newPauseGuardian) public returns (uint256) {\n    if (msg.sender != admin) {\n      return\n        ComptrollerErrorReporter.fail(\n          ComptrollerErrorReporter.Error.UNAUTHORIZED,\n          ComptrollerErrorReporter.FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK\n        );\n    }\n    require(newPauseGuardian != address(0), 'Address is Zero!');\n\n    // Save current value for inclusion in log\n    address oldPauseGuardian = pauseGuardian;\n\n    // Store pauseGuardian with value newPauseGuardian\n    pauseGuardian = newPauseGuardian;\n\n    // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\n    emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);\n\n    return uint256(ComptrollerErrorReporter.Error.NO_ERROR);\n  }\n\n  function _getPauseGuardian() public view returns (address) {\n    return pauseGuardian;\n  }\n\n  function _setMintPaused(ICToken cToken, bool state) public returns (bool) {\n    //require(markets[address(cToken)].isListed, \"cannot pause a market that is not listed\");\n    require(msg.sender == pauseGuardian || msg.sender == admin, 'only pause guardian and admin can pause');\n    require(msg.sender == admin || state, 'only admin can unpause');\n\n    mintGuardianPaused[address(cToken)] = state;\n    emit ActionPaused(address(cToken), 'Mint', state);\n    return state;\n  }\n\n  function _getMintPaused(address cToken) public view override returns (bool) {\n    return mintGuardianPaused[cToken];\n  }\n\n  function _setBorrowPaused(ICToken cToken, bool state) public returns (bool) {\n    //require(markets[address(cToken)].isListed, \"cannot pause a market that is not listed\");\n    require(msg.sender == pauseGuardian || msg.sender == admin, 'only pause guardian and admin can pause');\n    require(msg.sender == admin || state, 'only admin can unpause');\n\n    borrowGuardianPaused[address(cToken)] = state;\n    emit ActionPaused(address(cToken), 'Borrow', state);\n    return state;\n  }\n\n  function _getBorrowPaused(address cToken) public view override returns (bool) {\n    return borrowGuardianPaused[cToken];\n  }\n\n  function _setTransferPaused(bool state) public returns (bool) {\n    require(msg.sender == pauseGuardian || msg.sender == admin, 'only pause guardian and admin can pause');\n    require(msg.sender == admin || state, 'only admin can unpause');\n\n    transferGuardianPaused = state;\n    emit ActionPaused(address(0), 'Transfer', state);\n    return state;\n  }\n\n  function _getTransferPaused() public view override returns (bool) {\n    return transferGuardianPaused;\n  }\n\n  function _setSeizePaused(bool state) public returns (bool) {\n    require(msg.sender == pauseGuardian || msg.sender == admin, 'only pause guardian and admin can pause');\n    require(msg.sender == admin || state, 'only admin can unpause');\n\n    seizeGuardianPaused = state;\n    emit ActionPaused(address(0), 'Seize', state);\n    return state;\n  }\n\n  function _getSeizePaused() public view override returns (bool) {\n    return seizeGuardianPaused;\n  }\n\n  /**\n   * @notice Return the address of the COMP token\n   * @return The address of COMP\n   */\n  function getCompAddress() public view override returns (address) {\n    /*\n        return 0xc00e94Cb662C3520282E6f5717214004A7f26888;\n        */\n    return governanceToken;\n  }\n\n  /**\n   * @notice Return the address of the COMP token\n   * @param _governanceToken The address of COMP(governance token)\n   */\n  function setGovTokenAddress(address _governanceToken) public {\n    //require(adminOrInitializing(), \"only admin can set governanceToken\");\n    require(msg.sender == admin, 'only admin can set');\n    require(_governanceToken != address(0), 'Address is Zero!');\n    governanceToken = _governanceToken;\n  }\n\n  /**\n   * @notice Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\n   * @dev Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\n   * @param cTokens The addresses of the markets (tokens) to change the borrow caps for\n   * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\n   */\n  function _setMarketBorrowCaps(ICToken[] calldata cTokens, uint256[] calldata newBorrowCaps) external {\n    require(\n      msg.sender == admin || msg.sender == borrowCapGuardian,\n      'only admin or borrow cap guardian can set borrow caps'\n    );\n\n    uint256 numMarkets = cTokens.length;\n    uint256 numBorrowCaps = newBorrowCaps.length;\n\n    require(numMarkets != 0 && numMarkets == numBorrowCaps, 'invalid input');\n\n    for (uint256 i = 0; i < numMarkets; i++) {\n      borrowCaps[address(cTokens[i])] = newBorrowCaps[i];\n      emit NewBorrowCap(address(cTokens[i]), newBorrowCaps[i]);\n    }\n  }\n\n  function _getMarketBorrowCap(address cToken) external view override returns (uint256) {\n    return borrowCaps[cToken];\n  }\n\n  /**\n   * @notice Admin function to change the Borrow Cap Guardian\n   * @param newBorrowCapGuardian The address of the new Borrow Cap Guardian\n   */\n  function _setBorrowCapGuardian(address newBorrowCapGuardian) external {\n    require(msg.sender == admin, 'only admin can set borrow cap guardian');\n    require(newBorrowCapGuardian != address(0), 'Address is Zero!');\n\n    // Save current value for inclusion in log\n    address oldBorrowCapGuardian = borrowCapGuardian;\n\n    // Store borrowCapGuardian with value newBorrowCapGuardian\n    borrowCapGuardian = newBorrowCapGuardian;\n\n    // Emit NewBorrowCapGuardian(OldBorrowCapGuardian, NewBorrowCapGuardian)\n    emit NewBorrowCapGuardian(oldBorrowCapGuardian, newBorrowCapGuardian);\n  }\n\n  function _getBorrowCapGuardian() external view returns (address) {\n    return borrowCapGuardian;\n  }\n\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "contracts/Comptroller/Interfaces/IPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ninterface IPriceOracle {\n  /**\n   * @notice Get the underlying price of a cToken asset\n   * @param cToken The cToken to get the underlying price of\n   * @return The underlying asset price mantissa (scaled by 1e18).\n   *  Zero means the price is unavailable.\n   */\n  function getUnderlyingPrice(address cToken) external view returns (uint256);\n}\n"
    },
    "contracts/Comptroller/UnderwriterStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\npragma experimental ABIEncoderV2;\nimport './Interfaces/ICToken.sol';\nimport './Interfaces/IUnderwriterAdmin.sol';\n\ncontract UnderwriterStorage {\n  /**\n   * @notice Administrator for this contract\n   */\n  address public admin;\n  address public governanceToken;\n\n  uint256 public suTokenRateMantissa;\n\n  /**\n   * @notice eqAssetGroup, cToken -> equal assets info.\n   */\n\n  uint8 public equalAssetsGroupNum;\n  /**\n   * @notice eqAssetGroup, groupId -> equal assets info.\n   */\n  mapping(uint8 => IUnderwriterAdmin.AssetGroup) public eqAssetGroup;\n\n  /**\n   * @notice The Pause Guardian can pause certain actions as a safety mechanism.\n   *  Actions which allow users to remove their own assets cannot be paused.\n   *  Liquidation / seizing / transfer can only be paused globally, not by market.\n   */\n  address public pauseGuardian;\n  bool public _mintGuardianPaused;\n  bool public _borrowGuardianPaused;\n  bool public transferGuardianPaused;\n  bool public seizeGuardianPaused;\n  mapping(address => bool) public mintGuardianPaused;\n  mapping(address => bool) public borrowGuardianPaused;\n\n  // @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\n  address public borrowCapGuardian;\n\n  // @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\n  mapping(address => uint256) public borrowCaps;\n}\n"
    },
    "contracts/Comptroller/ComptrollerErrorReporter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nlibrary ComptrollerErrorReporter {\n  enum Error {\n    NO_ERROR,\n    UNAUTHORIZED,\n    COMPTROLLER_MISMATCH,\n    INSUFFICIENT_SHORTFALL,\n    INSUFFICIENT_LIQUIDITY,\n    INVALID_CLOSE_FACTOR,\n    INVALID_COLLATERAL_FACTOR,\n    INVALID_LIQUIDATION_INCENTIVE,\n    MARKET_NOT_ENTERED,\n    MARKET_NOT_LISTED,\n    MARKET_ALREADY_LISTED,\n    MATH_ERROR,\n    NONZERO_BORROW_BALANCE,\n    PRICE_ERROR,\n    REJECTION,\n    SNAPSHOT_ERROR,\n    TOO_MANY_ASSETS,\n    TOO_MUCH_REPAY\n  }\n\n  enum FailureInfo {\n    ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\n    ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\n    EXIT_MARKET_BALANCE_OWED,\n    EXIT_MARKET_REJECTION,\n    SET_CLOSE_FACTOR_OWNER_CHECK,\n    SET_CLOSE_FACTOR_VALIDATION,\n    SET_COLLATERAL_FACTOR_OWNER_CHECK,\n    SET_COLLATERAL_FACTOR_NO_EXISTS,\n    SET_COLLATERAL_FACTOR_VALIDATION,\n    SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\n    SET_IMPLEMENTATION_OWNER_CHECK,\n    SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\n    SET_LIQUIDATION_INCENTIVE_VALIDATION,\n    SET_MAX_ASSETS_OWNER_CHECK,\n    SET_PENDING_ADMIN_OWNER_CHECK,\n    SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\n    SET_PRICE_ORACLE_OWNER_CHECK,\n    SUPPORT_MARKET_EXISTS,\n    SUPPORT_MARKET_OWNER_CHECK,\n    SET_PAUSE_GUARDIAN_OWNER_CHECK,\n    SET_EQUAL_ASSET_GROUP_OWNER_CHECK\n  }\n\n  /**\n   * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\n   * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\n   **/\n  event Failure(uint256 error, uint256 info, uint256 detail);\n\n  error ComptrollerError(uint256 errorCode, uint256 infoCode, uint256 detailCode);\n\n  /**\n   * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\n   */\n  function fail(Error err, FailureInfo info) internal returns (uint256) {\n\n    // emit Failure(uint256(err), uint256(info), 0);\n    revert ComptrollerError(uint256(err), uint256(info), 0);\n    // return uint256(err);\n  }\n\n  /**\n   * @dev use this when reporting an opaque error from an upgradeable collaborator contract\n   */\n  function failOpaque(\n    Error err,\n    FailureInfo info,\n    uint256 opaqueError\n  ) internal returns (uint256) {\n    // emit Failure(uint256(err), uint256(info), opaqueError);\n    revert ComptrollerError(uint256(err), uint256(info), opaqueError);\n    // return uint256(err);\n  }\n}\n"
    },
    "contracts/Comptroller/Interfaces/IUnderwriterAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ninterface IUnderwriterAdmin {\n  /// @notice Emitted when an action is paused on a market\n  event ActionPaused(address cToken, string action, bool pauseState);\n\n  /// @notice Emitted when borrow cap for a cToken is changed\n  event NewBorrowCap(address indexed cToken, uint256 newBorrowCap);\n\n  /// @notice Emitted when borrow cap guardian is changed\n  event NewBorrowCapGuardian(address oldBorrowCapGuardian, address newBorrowCapGuardian);\n\n  /// @notice Emitted when pause guardian is changed\n  event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\n\n  event NewAssetGroup(\n    uint8 indexed groupId,\n    string indexed groupName,\n    uint256 intraCRateMantissa,\n    uint256 intraMintRateMantissa,\n    uint256 intraSuRateMantissa,\n    uint256 interCRateMantissa,\n    uint256 interSuRateMantissa,\n    uint8 assetsGroupNum\n  );\n\n  event RemoveAssetGroup(uint8 indexed groupId, uint8 equalAssetsGroupNum);\n\n  /// @notice AssetGroup, contains information of groupName and rateMantissas\n  struct AssetGroup {\n    uint8 groupId;\n    string groupName;\n    uint256 intraCRateMantissa;\n    uint256 intraMintRateMantissa;\n    uint256 intraSuRateMantissa;\n    uint256 interCRateMantissa;\n    uint256 interSuRateMantissa;\n  }\n\n  function getAssetGroupNum() external view returns (uint8);\n\n  function getAssetGroup(uint8 groupId) external view returns (AssetGroup memory);\n\n  function _getMintPaused(address cToken) external returns (bool);\n\n  function _getTransferPaused() external view returns (bool);\n\n  function _getBorrowPaused(address cToken) external view returns (bool);\n\n  function _getSeizePaused() external view returns (bool);\n\n  function getCompAddress() external view returns (address);\n\n  function _getMarketBorrowCap(address cToken) external view returns (uint256);\n\n}\n"
    },
    "contracts/Comptroller/Interfaces/ICToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ninterface ICToken {\n  function comptroller() external view returns (address);\n\n  function reserveFactorMantissa() external view returns (uint256);\n\n  function borrowIndex() external view returns (uint256);\n\n  function totalBorrows() external view returns (uint256);\n\n  function totalSupply() external view returns (uint256);\n\n  function isCToken() external view returns (bool);\n\n  function balanceOf(address owner) external view returns (uint256);\n\n  function getAccountSnapshot(address account)\n    external\n    view\n    returns (\n      uint256,\n      uint256,\n      uint256,\n      uint256\n    );\n\n  function borrowBalanceStored(address account) external view returns (uint256);\n\n  function exchangeRateStored() external view returns (uint256);\n\n  function underlying() external view returns (address);\n\n  function exchangeRateCurrent() external returns (uint256);\n\n  function isCEther() external view returns (bool);\n\n  function supplyRatePerBlock() external view returns (uint256);\n\n  function borrowRatePerBlock() external view returns (uint256);\n\n  function totalReserves() external view returns (uint256);\n\n  function getCash() external view returns (uint256);\n\n  function decimals() external view returns (uint8);\n\n  function borrowBalanceCurrent(address account) external returns (uint256);\n\n  function balanceOfUnderlying(address owner) external returns (uint256);\n\n  function allowance(address owner, address spender) external view returns (uint256);\n\n  function getCurrentVotes(address account) external view returns (uint96);\n\n  function delegates(address) external view returns (address);\n\n  function getPriorVotes(address account, uint256 blockNumber) external view returns (uint96);\n\n  function getDiscountRate() external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    }
  }
}
