/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TimelockInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "EMERGENCY_ADMIN()": FunctionFragment;
    "agreementCount()": FunctionFragment;
    "cTokenToUnderlying(address)": FunctionFragment;
    "claim(uint256[])": FunctionFragment;
    "createAgreement(uint8,address,uint256,address)": FunctionFragment;
    "freezeAgreement(uint256)": FunctionFragment;
    "freezeAllAgreements()": FunctionFragment;
    "frozen()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "isSupport(address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "rescueERC20(address,address,uint256)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setLockDuration(address,uint256)": FunctionFragment;
    "setUnderly(address,address,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "underlyingDetail(address)": FunctionFragment;
    "underlyingDetails(address[])": FunctionFragment;
    "unfreezeAllAgreements()": FunctionFragment;
    "userAgreements(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EMERGENCY_ADMIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "agreementCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cTokenToUnderlying",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createAgreement",
    values: [BigNumberish, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "freezeAgreement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "freezeAllAgreements",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "frozen", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "isSupport", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rescueERC20",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLockDuration",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnderly",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingDetail",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingDetails",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "unfreezeAllAgreements",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userAgreements",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EMERGENCY_ADMIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "agreementCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cTokenToUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freezeAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freezeAllAgreements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "frozen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isSupport", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLockDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUnderly", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingDetail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unfreezeAllAgreements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userAgreements",
    data: BytesLike
  ): Result;

  events: {
    "AgreementClaimed(uint256,uint8,address,uint256,address)": EventFragment;
    "AgreementCreated(uint256,uint8,address,uint256,address,uint256)": EventFragment;
    "AgreementFrozen(uint256,bool)": EventFragment;
    "RescueERC20(address,address,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "TimeLockFrozen(bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AgreementClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementFrozen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RescueERC20"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TimeLockFrozen"): EventFragment;
}

export type AgreementClaimedEvent = TypedEvent<
  [BigNumber, number, string, BigNumber, string] & {
    agreementId: BigNumber;
    actionType: number;
    asset: string;
    amount: BigNumber;
    beneficiary: string;
  }
>;

export type AgreementCreatedEvent = TypedEvent<
  [BigNumber, number, string, BigNumber, string, BigNumber] & {
    agreementId: BigNumber;
    actionType: number;
    asset: string;
    amount: BigNumber;
    beneficiary: string;
    releaseTime: BigNumber;
  }
>;

export type AgreementFrozenEvent = TypedEvent<
  [BigNumber, boolean] & { agreementId: BigNumber; value: boolean }
>;

export type RescueERC20Event = TypedEvent<
  [string, string, BigNumber] & { token: string; to: string; amount: BigNumber }
>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type TimeLockFrozenEvent = TypedEvent<[boolean] & { value: boolean }>;

export class Timelock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TimelockInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    EMERGENCY_ADMIN(overrides?: CallOverrides): Promise<[string]>;

    agreementCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    cTokenToUnderlying(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    claim(
      agreementIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createAgreement(
      actionType: BigNumberish,
      underlying: string,
      amount: BigNumberish,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    freezeAgreement(
      agreementId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    freezeAllAgreements(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    frozen(overrides?: CallOverrides): Promise<[boolean]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSupport(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rescueERC20(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLockDuration(
      underlying: string,
      lockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUnderly(
      cToken: string,
      underlying: string,
      isSupport: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    underlyingDetail(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean] & {
        cToken: string;
        totalBalance: BigNumber;
        lockDuration: BigNumber;
        isSupport: boolean;
      }
    >;

    underlyingDetails(
      underlyings: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, BigNumber, boolean] & {
          cToken: string;
          totalBalance: BigNumber;
          lockDuration: BigNumber;
          isSupport: boolean;
        })[]
      ]
    >;

    unfreezeAllAgreements(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userAgreements(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([number, string, boolean, string, BigNumber, BigNumber] & {
          actionType: number;
          underlying: string;
          isFrozen: boolean;
          beneficiary: string;
          releaseTime: BigNumber;
          amount: BigNumber;
        })[]
      ]
    >;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  EMERGENCY_ADMIN(overrides?: CallOverrides): Promise<string>;

  agreementCount(overrides?: CallOverrides): Promise<BigNumber>;

  cTokenToUnderlying(arg0: string, overrides?: CallOverrides): Promise<string>;

  claim(
    agreementIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createAgreement(
    actionType: BigNumberish,
    underlying: string,
    amount: BigNumberish,
    beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  freezeAgreement(
    agreementId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  freezeAllAgreements(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  frozen(overrides?: CallOverrides): Promise<boolean>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSupport(underlying: string, overrides?: CallOverrides): Promise<boolean>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rescueERC20(
    token: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLockDuration(
    underlying: string,
    lockDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUnderly(
    cToken: string,
    underlying: string,
    isSupport: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  underlyingDetail(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, boolean] & {
      cToken: string;
      totalBalance: BigNumber;
      lockDuration: BigNumber;
      isSupport: boolean;
    }
  >;

  underlyingDetails(
    underlyings: string[],
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber, boolean] & {
      cToken: string;
      totalBalance: BigNumber;
      lockDuration: BigNumber;
      isSupport: boolean;
    })[]
  >;

  unfreezeAllAgreements(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userAgreements(
    user: string,
    overrides?: CallOverrides
  ): Promise<
    ([number, string, boolean, string, BigNumber, BigNumber] & {
      actionType: number;
      underlying: string;
      isFrozen: boolean;
      beneficiary: string;
      releaseTime: BigNumber;
      amount: BigNumber;
    })[]
  >;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    EMERGENCY_ADMIN(overrides?: CallOverrides): Promise<string>;

    agreementCount(overrides?: CallOverrides): Promise<BigNumber>;

    cTokenToUnderlying(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    claim(
      agreementIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    createAgreement(
      actionType: BigNumberish,
      underlying: string,
      amount: BigNumberish,
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    freezeAgreement(
      agreementId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    freezeAllAgreements(overrides?: CallOverrides): Promise<void>;

    frozen(overrides?: CallOverrides): Promise<boolean>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSupport(underlying: string, overrides?: CallOverrides): Promise<boolean>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rescueERC20(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLockDuration(
      underlying: string,
      lockDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUnderly(
      cToken: string,
      underlying: string,
      isSupport: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    underlyingDetail(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean] & {
        cToken: string;
        totalBalance: BigNumber;
        lockDuration: BigNumber;
        isSupport: boolean;
      }
    >;

    underlyingDetails(
      underlyings: string[],
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber, boolean] & {
        cToken: string;
        totalBalance: BigNumber;
        lockDuration: BigNumber;
        isSupport: boolean;
      })[]
    >;

    unfreezeAllAgreements(overrides?: CallOverrides): Promise<void>;

    userAgreements(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      ([number, string, boolean, string, BigNumber, BigNumber] & {
        actionType: number;
        underlying: string;
        isFrozen: boolean;
        beneficiary: string;
        releaseTime: BigNumber;
        amount: BigNumber;
      })[]
    >;
  };

  filters: {
    "AgreementClaimed(uint256,uint8,address,uint256,address)"(
      agreementId?: null,
      actionType?: null,
      asset?: string | null,
      amount?: null,
      beneficiary?: string | null
    ): TypedEventFilter<
      [BigNumber, number, string, BigNumber, string],
      {
        agreementId: BigNumber;
        actionType: number;
        asset: string;
        amount: BigNumber;
        beneficiary: string;
      }
    >;

    AgreementClaimed(
      agreementId?: null,
      actionType?: null,
      asset?: string | null,
      amount?: null,
      beneficiary?: string | null
    ): TypedEventFilter<
      [BigNumber, number, string, BigNumber, string],
      {
        agreementId: BigNumber;
        actionType: number;
        asset: string;
        amount: BigNumber;
        beneficiary: string;
      }
    >;

    "AgreementCreated(uint256,uint8,address,uint256,address,uint256)"(
      agreementId?: null,
      actionType?: null,
      asset?: string | null,
      amount?: null,
      beneficiary?: string | null,
      releaseTime?: null
    ): TypedEventFilter<
      [BigNumber, number, string, BigNumber, string, BigNumber],
      {
        agreementId: BigNumber;
        actionType: number;
        asset: string;
        amount: BigNumber;
        beneficiary: string;
        releaseTime: BigNumber;
      }
    >;

    AgreementCreated(
      agreementId?: null,
      actionType?: null,
      asset?: string | null,
      amount?: null,
      beneficiary?: string | null,
      releaseTime?: null
    ): TypedEventFilter<
      [BigNumber, number, string, BigNumber, string, BigNumber],
      {
        agreementId: BigNumber;
        actionType: number;
        asset: string;
        amount: BigNumber;
        beneficiary: string;
        releaseTime: BigNumber;
      }
    >;

    "AgreementFrozen(uint256,bool)"(
      agreementId?: null,
      value?: null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { agreementId: BigNumber; value: boolean }
    >;

    AgreementFrozen(
      agreementId?: null,
      value?: null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { agreementId: BigNumber; value: boolean }
    >;

    "RescueERC20(address,address,uint256)"(
      token?: string | null,
      to?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; to: string; amount: BigNumber }
    >;

    RescueERC20(
      token?: string | null,
      to?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; to: string; amount: BigNumber }
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "TimeLockFrozen(bool)"(
      value?: null
    ): TypedEventFilter<[boolean], { value: boolean }>;

    TimeLockFrozen(
      value?: null
    ): TypedEventFilter<[boolean], { value: boolean }>;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    EMERGENCY_ADMIN(overrides?: CallOverrides): Promise<BigNumber>;

    agreementCount(overrides?: CallOverrides): Promise<BigNumber>;

    cTokenToUnderlying(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      agreementIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createAgreement(
      actionType: BigNumberish,
      underlying: string,
      amount: BigNumberish,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    freezeAgreement(
      agreementId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    freezeAllAgreements(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    frozen(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSupport(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rescueERC20(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLockDuration(
      underlying: string,
      lockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUnderly(
      cToken: string,
      underlying: string,
      isSupport: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underlyingDetail(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underlyingDetails(
      underlyings: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unfreezeAllAgreements(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userAgreements(user: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EMERGENCY_ADMIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    agreementCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cTokenToUnderlying(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      agreementIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createAgreement(
      actionType: BigNumberish,
      underlying: string,
      amount: BigNumberish,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    freezeAgreement(
      agreementId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    freezeAllAgreements(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    frozen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSupport(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rescueERC20(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLockDuration(
      underlying: string,
      lockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUnderly(
      cToken: string,
      underlying: string,
      isSupport: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    underlyingDetail(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    underlyingDetails(
      underlyings: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unfreezeAllAgreements(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userAgreements(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
