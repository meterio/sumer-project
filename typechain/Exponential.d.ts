/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ExponentialInterface extends ethers.utils.Interface {
  functions: {
    "addExp((uint256),(uint256))": FunctionFragment;
    "divExp((uint256),(uint256))": FunctionFragment;
    "divScalar((uint256),uint256)": FunctionFragment;
    "divScalarByExp(uint256,(uint256))": FunctionFragment;
    "divScalarByExpTruncate(uint256,(uint256))": FunctionFragment;
    "getExp(uint256,uint256)": FunctionFragment;
    "mulExp((uint256),(uint256))": FunctionFragment;
    "mulExp3((uint256),(uint256),(uint256))": FunctionFragment;
    "mulScalar((uint256),uint256)": FunctionFragment;
    "mulScalarTruncate((uint256),uint256)": FunctionFragment;
    "mulScalarTruncateAddUInt((uint256),uint256,uint256)": FunctionFragment;
    "subExp((uint256),(uint256))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addExp",
    values: [{ mantissa: BigNumberish }, { mantissa: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "divExp",
    values: [{ mantissa: BigNumberish }, { mantissa: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "divScalar",
    values: [{ mantissa: BigNumberish }, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "divScalarByExp",
    values: [BigNumberish, { mantissa: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "divScalarByExpTruncate",
    values: [BigNumberish, { mantissa: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "getExp",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mulExp",
    values: [{ mantissa: BigNumberish }, { mantissa: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "mulExp3",
    values: [
      { mantissa: BigNumberish },
      { mantissa: BigNumberish },
      { mantissa: BigNumberish }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mulScalar",
    values: [{ mantissa: BigNumberish }, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mulScalarTruncate",
    values: [{ mantissa: BigNumberish }, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mulScalarTruncateAddUInt",
    values: [{ mantissa: BigNumberish }, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subExp",
    values: [{ mantissa: BigNumberish }, { mantissa: BigNumberish }]
  ): string;

  decodeFunctionResult(functionFragment: "addExp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "divExp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "divScalar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "divScalarByExp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "divScalarByExpTruncate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getExp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mulExp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mulExp3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mulScalar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mulScalarTruncate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mulScalarTruncateAddUInt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subExp", data: BytesLike): Result;

  events: {};
}

export class Exponential extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ExponentialInterface;

  functions: {
    addExp(
      a: { mantissa: BigNumberish },
      b: { mantissa: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[number, [BigNumber] & { mantissa: BigNumber }]>;

    divExp(
      a: { mantissa: BigNumberish },
      b: { mantissa: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[number, [BigNumber] & { mantissa: BigNumber }]>;

    divScalar(
      a: { mantissa: BigNumberish },
      scalar: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, [BigNumber] & { mantissa: BigNumber }]>;

    divScalarByExp(
      scalar: BigNumberish,
      divisor: { mantissa: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[number, [BigNumber] & { mantissa: BigNumber }]>;

    divScalarByExpTruncate(
      scalar: BigNumberish,
      divisor: { mantissa: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[number, BigNumber]>;

    getExp(
      num: BigNumberish,
      denom: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, [BigNumber] & { mantissa: BigNumber }]>;

    "mulExp((uint256),(uint256))"(
      a: { mantissa: BigNumberish },
      b: { mantissa: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[number, [BigNumber] & { mantissa: BigNumber }]>;

    "mulExp(uint256,uint256)"(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, [BigNumber] & { mantissa: BigNumber }]>;

    mulExp3(
      a: { mantissa: BigNumberish },
      b: { mantissa: BigNumberish },
      c: { mantissa: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[number, [BigNumber] & { mantissa: BigNumber }]>;

    mulScalar(
      a: { mantissa: BigNumberish },
      scalar: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, [BigNumber] & { mantissa: BigNumber }]>;

    mulScalarTruncate(
      a: { mantissa: BigNumberish },
      scalar: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber]>;

    mulScalarTruncateAddUInt(
      a: { mantissa: BigNumberish },
      scalar: BigNumberish,
      addend: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber]>;

    subExp(
      a: { mantissa: BigNumberish },
      b: { mantissa: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[number, [BigNumber] & { mantissa: BigNumber }]>;
  };

  addExp(
    a: { mantissa: BigNumberish },
    b: { mantissa: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[number, [BigNumber] & { mantissa: BigNumber }]>;

  divExp(
    a: { mantissa: BigNumberish },
    b: { mantissa: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[number, [BigNumber] & { mantissa: BigNumber }]>;

  divScalar(
    a: { mantissa: BigNumberish },
    scalar: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, [BigNumber] & { mantissa: BigNumber }]>;

  divScalarByExp(
    scalar: BigNumberish,
    divisor: { mantissa: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[number, [BigNumber] & { mantissa: BigNumber }]>;

  divScalarByExpTruncate(
    scalar: BigNumberish,
    divisor: { mantissa: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[number, BigNumber]>;

  getExp(
    num: BigNumberish,
    denom: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, [BigNumber] & { mantissa: BigNumber }]>;

  "mulExp((uint256),(uint256))"(
    a: { mantissa: BigNumberish },
    b: { mantissa: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[number, [BigNumber] & { mantissa: BigNumber }]>;

  "mulExp(uint256,uint256)"(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, [BigNumber] & { mantissa: BigNumber }]>;

  mulExp3(
    a: { mantissa: BigNumberish },
    b: { mantissa: BigNumberish },
    c: { mantissa: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[number, [BigNumber] & { mantissa: BigNumber }]>;

  mulScalar(
    a: { mantissa: BigNumberish },
    scalar: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, [BigNumber] & { mantissa: BigNumber }]>;

  mulScalarTruncate(
    a: { mantissa: BigNumberish },
    scalar: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, BigNumber]>;

  mulScalarTruncateAddUInt(
    a: { mantissa: BigNumberish },
    scalar: BigNumberish,
    addend: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, BigNumber]>;

  subExp(
    a: { mantissa: BigNumberish },
    b: { mantissa: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[number, [BigNumber] & { mantissa: BigNumber }]>;

  callStatic: {
    addExp(
      a: { mantissa: BigNumberish },
      b: { mantissa: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[number, [BigNumber] & { mantissa: BigNumber }]>;

    divExp(
      a: { mantissa: BigNumberish },
      b: { mantissa: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[number, [BigNumber] & { mantissa: BigNumber }]>;

    divScalar(
      a: { mantissa: BigNumberish },
      scalar: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, [BigNumber] & { mantissa: BigNumber }]>;

    divScalarByExp(
      scalar: BigNumberish,
      divisor: { mantissa: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[number, [BigNumber] & { mantissa: BigNumber }]>;

    divScalarByExpTruncate(
      scalar: BigNumberish,
      divisor: { mantissa: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[number, BigNumber]>;

    getExp(
      num: BigNumberish,
      denom: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, [BigNumber] & { mantissa: BigNumber }]>;

    "mulExp((uint256),(uint256))"(
      a: { mantissa: BigNumberish },
      b: { mantissa: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[number, [BigNumber] & { mantissa: BigNumber }]>;

    "mulExp(uint256,uint256)"(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, [BigNumber] & { mantissa: BigNumber }]>;

    mulExp3(
      a: { mantissa: BigNumberish },
      b: { mantissa: BigNumberish },
      c: { mantissa: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[number, [BigNumber] & { mantissa: BigNumber }]>;

    mulScalar(
      a: { mantissa: BigNumberish },
      scalar: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, [BigNumber] & { mantissa: BigNumber }]>;

    mulScalarTruncate(
      a: { mantissa: BigNumberish },
      scalar: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber]>;

    mulScalarTruncateAddUInt(
      a: { mantissa: BigNumberish },
      scalar: BigNumberish,
      addend: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber]>;

    subExp(
      a: { mantissa: BigNumberish },
      b: { mantissa: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[number, [BigNumber] & { mantissa: BigNumber }]>;
  };

  filters: {};

  estimateGas: {
    addExp(
      a: { mantissa: BigNumberish },
      b: { mantissa: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    divExp(
      a: { mantissa: BigNumberish },
      b: { mantissa: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    divScalar(
      a: { mantissa: BigNumberish },
      scalar: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    divScalarByExp(
      scalar: BigNumberish,
      divisor: { mantissa: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    divScalarByExpTruncate(
      scalar: BigNumberish,
      divisor: { mantissa: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExp(
      num: BigNumberish,
      denom: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mulExp((uint256),(uint256))"(
      a: { mantissa: BigNumberish },
      b: { mantissa: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mulExp(uint256,uint256)"(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mulExp3(
      a: { mantissa: BigNumberish },
      b: { mantissa: BigNumberish },
      c: { mantissa: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mulScalar(
      a: { mantissa: BigNumberish },
      scalar: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mulScalarTruncate(
      a: { mantissa: BigNumberish },
      scalar: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mulScalarTruncateAddUInt(
      a: { mantissa: BigNumberish },
      scalar: BigNumberish,
      addend: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    subExp(
      a: { mantissa: BigNumberish },
      b: { mantissa: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addExp(
      a: { mantissa: BigNumberish },
      b: { mantissa: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    divExp(
      a: { mantissa: BigNumberish },
      b: { mantissa: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    divScalar(
      a: { mantissa: BigNumberish },
      scalar: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    divScalarByExp(
      scalar: BigNumberish,
      divisor: { mantissa: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    divScalarByExpTruncate(
      scalar: BigNumberish,
      divisor: { mantissa: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExp(
      num: BigNumberish,
      denom: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mulExp((uint256),(uint256))"(
      a: { mantissa: BigNumberish },
      b: { mantissa: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mulExp(uint256,uint256)"(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mulExp3(
      a: { mantissa: BigNumberish },
      b: { mantissa: BigNumberish },
      c: { mantissa: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mulScalar(
      a: { mantissa: BigNumberish },
      scalar: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mulScalarTruncate(
      a: { mantissa: BigNumberish },
      scalar: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mulScalarTruncateAddUInt(
      a: { mantissa: BigNumberish },
      scalar: BigNumberish,
      addend: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    subExp(
      a: { mantissa: BigNumberish },
      b: { mantissa: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
