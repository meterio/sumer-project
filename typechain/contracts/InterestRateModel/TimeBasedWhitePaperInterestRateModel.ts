/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface TimeBasedWhitePaperInterestRateModelInterface
  extends Interface {
  getFunction(
    nameOrSignature:
      | "baseRatePerTimestamp"
      | "getBorrowRate"
      | "getSupplyRate"
      | "isInterestRateModel"
      | "multiplierPerTimestamp"
      | "timestampsPerYear"
      | "utilizationRate"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "NewInterestParams"): EventFragment;

  encodeFunctionData(
    functionFragment: "baseRatePerTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowRate",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupplyRate",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isInterestRateModel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiplierPerTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timestampsPerYear",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "utilizationRate",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "baseRatePerTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupplyRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInterestRateModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiplierPerTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timestampsPerYear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "utilizationRate",
    data: BytesLike
  ): Result;
}

export namespace NewInterestParamsEvent {
  export type InputTuple = [
    baseRatePerTimestamp: BigNumberish,
    multiplierPerTimestamp: BigNumberish
  ];
  export type OutputTuple = [
    baseRatePerTimestamp: bigint,
    multiplierPerTimestamp: bigint
  ];
  export interface OutputObject {
    baseRatePerTimestamp: bigint;
    multiplierPerTimestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TimeBasedWhitePaperInterestRateModel extends BaseContract {
  connect(runner?: ContractRunner | null): TimeBasedWhitePaperInterestRateModel;
  waitForDeployment(): Promise<this>;

  interface: TimeBasedWhitePaperInterestRateModelInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  baseRatePerTimestamp: TypedContractMethod<[], [bigint], "view">;

  getBorrowRate: TypedContractMethod<
    [cash: BigNumberish, borrows: BigNumberish, reserves: BigNumberish],
    [bigint],
    "view"
  >;

  getSupplyRate: TypedContractMethod<
    [
      cash: BigNumberish,
      borrows: BigNumberish,
      reserves: BigNumberish,
      reserveFactorMantissa: BigNumberish
    ],
    [bigint],
    "view"
  >;

  isInterestRateModel: TypedContractMethod<[], [boolean], "view">;

  multiplierPerTimestamp: TypedContractMethod<[], [bigint], "view">;

  timestampsPerYear: TypedContractMethod<[], [bigint], "view">;

  utilizationRate: TypedContractMethod<
    [cash: BigNumberish, borrows: BigNumberish, reserves: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "baseRatePerTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBorrowRate"
  ): TypedContractMethod<
    [cash: BigNumberish, borrows: BigNumberish, reserves: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSupplyRate"
  ): TypedContractMethod<
    [
      cash: BigNumberish,
      borrows: BigNumberish,
      reserves: BigNumberish,
      reserveFactorMantissa: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "isInterestRateModel"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "multiplierPerTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "timestampsPerYear"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "utilizationRate"
  ): TypedContractMethod<
    [cash: BigNumberish, borrows: BigNumberish, reserves: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "NewInterestParams"
  ): TypedContractEvent<
    NewInterestParamsEvent.InputTuple,
    NewInterestParamsEvent.OutputTuple,
    NewInterestParamsEvent.OutputObject
  >;

  filters: {
    "NewInterestParams(uint256,uint256)": TypedContractEvent<
      NewInterestParamsEvent.InputTuple,
      NewInterestParamsEvent.OutputTuple,
      NewInterestParamsEvent.OutputObject
    >;
    NewInterestParams: TypedContractEvent<
      NewInterestParamsEvent.InputTuple,
      NewInterestParamsEvent.OutputTuple,
      NewInterestParamsEvent.OutputObject
    >;
  };
}
