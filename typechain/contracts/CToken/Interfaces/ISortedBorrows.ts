/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface ISortedBorrowsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "contains"
      | "findInsertPosition"
      | "getFirst"
      | "getLast"
      | "getNext"
      | "getPrev"
      | "getSize"
      | "insert"
      | "isEmpty"
      | "reInsert"
      | "remove"
      | "validInsertPosition"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "NodeAdded" | "NodeRemoved"): EventFragment;

  encodeFunctionData(
    functionFragment: "contains",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "findInsertPosition",
    values: [AddressLike, BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFirst",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLast",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNext",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrev",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "insert",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isEmpty",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reInsert",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "remove",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validInsertPosition",
    values: [AddressLike, BigNumberish, AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "contains", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "findInsertPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFirst", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLast", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNext", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPrev", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "insert", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isEmpty", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reInsert", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validInsertPosition",
    data: BytesLike
  ): Result;
}

export namespace NodeAddedEvent {
  export type InputTuple = [
    _asset: AddressLike,
    _id: AddressLike,
    _NICR: BigNumberish
  ];
  export type OutputTuple = [_asset: string, _id: string, _NICR: bigint];
  export interface OutputObject {
    _asset: string;
    _id: string;
    _NICR: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NodeRemovedEvent {
  export type InputTuple = [_asset: AddressLike, _id: AddressLike];
  export type OutputTuple = [_asset: string, _id: string];
  export interface OutputObject {
    _asset: string;
    _id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ISortedBorrows extends BaseContract {
  connect(runner?: ContractRunner | null): ISortedBorrows;
  waitForDeployment(): Promise<this>;

  interface: ISortedBorrowsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  contains: TypedContractMethod<
    [_asset: AddressLike, _id: AddressLike],
    [boolean],
    "view"
  >;

  findInsertPosition: TypedContractMethod<
    [
      _asset: AddressLike,
      _ICR: BigNumberish,
      _prevId: AddressLike,
      _nextId: AddressLike
    ],
    [[string, string]],
    "view"
  >;

  getFirst: TypedContractMethod<[_asset: AddressLike], [string], "view">;

  getLast: TypedContractMethod<[_asset: AddressLike], [string], "view">;

  getNext: TypedContractMethod<
    [_asset: AddressLike, _id: AddressLike],
    [string],
    "view"
  >;

  getPrev: TypedContractMethod<
    [_asset: AddressLike, _id: AddressLike],
    [string],
    "view"
  >;

  getSize: TypedContractMethod<[_asset: AddressLike], [bigint], "view">;

  insert: TypedContractMethod<
    [
      _asset: AddressLike,
      _id: AddressLike,
      _ICR: BigNumberish,
      _prevId: AddressLike,
      _nextId: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  isEmpty: TypedContractMethod<[_asset: AddressLike], [boolean], "view">;

  reInsert: TypedContractMethod<
    [
      _asset: AddressLike,
      _id: AddressLike,
      _newICR: BigNumberish,
      _prevId: AddressLike,
      _nextId: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  remove: TypedContractMethod<
    [_asset: AddressLike, _id: AddressLike],
    [void],
    "nonpayable"
  >;

  validInsertPosition: TypedContractMethod<
    [
      _asset: AddressLike,
      _ICR: BigNumberish,
      _prevId: AddressLike,
      _nextId: AddressLike
    ],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "contains"
  ): TypedContractMethod<
    [_asset: AddressLike, _id: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "findInsertPosition"
  ): TypedContractMethod<
    [
      _asset: AddressLike,
      _ICR: BigNumberish,
      _prevId: AddressLike,
      _nextId: AddressLike
    ],
    [[string, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFirst"
  ): TypedContractMethod<[_asset: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getLast"
  ): TypedContractMethod<[_asset: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getNext"
  ): TypedContractMethod<
    [_asset: AddressLike, _id: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPrev"
  ): TypedContractMethod<
    [_asset: AddressLike, _id: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSize"
  ): TypedContractMethod<[_asset: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "insert"
  ): TypedContractMethod<
    [
      _asset: AddressLike,
      _id: AddressLike,
      _ICR: BigNumberish,
      _prevId: AddressLike,
      _nextId: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isEmpty"
  ): TypedContractMethod<[_asset: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "reInsert"
  ): TypedContractMethod<
    [
      _asset: AddressLike,
      _id: AddressLike,
      _newICR: BigNumberish,
      _prevId: AddressLike,
      _nextId: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "remove"
  ): TypedContractMethod<
    [_asset: AddressLike, _id: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validInsertPosition"
  ): TypedContractMethod<
    [
      _asset: AddressLike,
      _ICR: BigNumberish,
      _prevId: AddressLike,
      _nextId: AddressLike
    ],
    [boolean],
    "view"
  >;

  getEvent(
    key: "NodeAdded"
  ): TypedContractEvent<
    NodeAddedEvent.InputTuple,
    NodeAddedEvent.OutputTuple,
    NodeAddedEvent.OutputObject
  >;
  getEvent(
    key: "NodeRemoved"
  ): TypedContractEvent<
    NodeRemovedEvent.InputTuple,
    NodeRemovedEvent.OutputTuple,
    NodeRemovedEvent.OutputObject
  >;

  filters: {
    "NodeAdded(address,address,uint256)": TypedContractEvent<
      NodeAddedEvent.InputTuple,
      NodeAddedEvent.OutputTuple,
      NodeAddedEvent.OutputObject
    >;
    NodeAdded: TypedContractEvent<
      NodeAddedEvent.InputTuple,
      NodeAddedEvent.OutputTuple,
      NodeAddedEvent.OutputObject
    >;

    "NodeRemoved(address,address)": TypedContractEvent<
      NodeRemovedEvent.InputTuple,
      NodeRemovedEvent.OutputTuple,
      NodeRemovedEvent.OutputObject
    >;
    NodeRemoved: TypedContractEvent<
      NodeRemovedEvent.InputTuple,
      NodeRemovedEvent.OutputTuple,
      NodeRemovedEvent.OutputObject
    >;
  };
}
