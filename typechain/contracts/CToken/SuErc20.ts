/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface SuErc20Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "_acceptAdmin"
      | "_addReserves"
      | "_reduceReserves"
      | "_setComptroller"
      | "_setDiscountRate"
      | "_setInterestRateModel"
      | "_setPendingAdmin"
      | "_setReserveFactor"
      | "_syncUnderlyingBalance"
      | "accrualBlockNumber"
      | "accrueInterest"
      | "admin"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "balanceOfUnderlying"
      | "borrow"
      | "borrowAndMint"
      | "borrowBalanceCurrent"
      | "borrowBalanceStored"
      | "borrowIndex"
      | "borrowRatePerBlock"
      | "comptroller"
      | "decimals"
      | "discountRateMantissa"
      | "exchangeRateCurrent"
      | "exchangeRateStored"
      | "executeRedemption"
      | "getAccountSnapshot"
      | "getCash"
      | "initialize"
      | "interestRateModel"
      | "isCEther"
      | "isCToken"
      | "isDeprecated"
      | "liquidateBorrow"
      | "liquidateCalculateSeizeTokens"
      | "mint"
      | "name"
      | "pendingAdmin"
      | "protocolSeizeShareMantissa"
      | "redeem"
      | "redeemUnderlying"
      | "repayBorrow"
      | "repayBorrowBehalf"
      | "reserveFactorMantissa"
      | "seize"
      | "supplyRatePerBlock"
      | "sweepToken"
      | "symbol"
      | "totalBorrows"
      | "totalBorrowsCurrent"
      | "totalReserves"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "underlying"
      | "underlyingBalance"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccrueInterest"
      | "Approval"
      | "Borrow"
      | "Initialized"
      | "LiquidateBorrow"
      | "Mint"
      | "NewAdmin"
      | "NewComptroller"
      | "NewDiscountRate"
      | "NewMarketInterestRateModel"
      | "NewPendingAdmin"
      | "NewReserveFactor"
      | "Redeem"
      | "RepayBorrow"
      | "ReservesAdded"
      | "ReservesReduced"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_acceptAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_addReserves",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_reduceReserves",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setComptroller",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_setDiscountRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setInterestRateModel",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_setPendingAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_setReserveFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_syncUnderlyingBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accrualBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accrueInterest",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfUnderlying",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowAndMint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowBalanceCurrent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowBalanceStored",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowRatePerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "comptroller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "discountRateMantissa",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeRateCurrent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeRateStored",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeRedemption",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountSnapshot",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getCash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      string,
      string,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "interestRateModel",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isCEther", values?: undefined): string;
  encodeFunctionData(functionFragment: "isCToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isDeprecated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateBorrow",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateCalculateSeizeTokens",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "mint", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolSeizeShareMantissa",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemUnderlying",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayBorrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayBorrowBehalf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveFactorMantissa",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seize",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyRatePerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sweepToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalBorrows",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBorrowsCurrent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingBalance",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_acceptAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_addReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_reduceReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setComptroller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setDiscountRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setInterestRateModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setPendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setReserveFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_syncUnderlyingBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accrualBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accrueInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowAndMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowBalanceCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowBalanceStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowRatePerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "comptroller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "discountRateMantissa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRateCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRateStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeRedemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountSnapshot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interestRateModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isCEther", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isCToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDeprecated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateCalculateSeizeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolSeizeShareMantissa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayBorrowBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveFactorMantissa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supplyRatePerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sweepToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBorrows",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBorrowsCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "underlyingBalance",
    data: BytesLike
  ): Result;
}

export namespace AccrueInterestEvent {
  export type InputTuple = [
    cashPrior: BigNumberish,
    interestAccumulated: BigNumberish,
    borrowIndex: BigNumberish,
    totalBorrows: BigNumberish
  ];
  export type OutputTuple = [
    cashPrior: bigint,
    interestAccumulated: bigint,
    borrowIndex: bigint,
    totalBorrows: bigint
  ];
  export interface OutputObject {
    cashPrior: bigint;
    interestAccumulated: bigint;
    borrowIndex: bigint;
    totalBorrows: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BorrowEvent {
  export type InputTuple = [
    borrower: AddressLike,
    borrowAmount: BigNumberish,
    accountBorrows: BigNumberish,
    totalBorrows: BigNumberish
  ];
  export type OutputTuple = [
    borrower: string,
    borrowAmount: bigint,
    accountBorrows: bigint,
    totalBorrows: bigint
  ];
  export interface OutputObject {
    borrower: string;
    borrowAmount: bigint;
    accountBorrows: bigint;
    totalBorrows: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidateBorrowEvent {
  export type InputTuple = [
    liquidator: AddressLike,
    borrower: AddressLike,
    repayAmount: BigNumberish,
    cTokenCollateral: AddressLike,
    seizeTokens: BigNumberish
  ];
  export type OutputTuple = [
    liquidator: string,
    borrower: string,
    repayAmount: bigint,
    cTokenCollateral: string,
    seizeTokens: bigint
  ];
  export interface OutputObject {
    liquidator: string;
    borrower: string;
    repayAmount: bigint;
    cTokenCollateral: string;
    seizeTokens: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintEvent {
  export type InputTuple = [
    minter: AddressLike,
    mintAmount: BigNumberish,
    mintTokens: BigNumberish
  ];
  export type OutputTuple = [
    minter: string,
    mintAmount: bigint,
    mintTokens: bigint
  ];
  export interface OutputObject {
    minter: string;
    mintAmount: bigint;
    mintTokens: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewAdminEvent {
  export type InputTuple = [oldAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [oldAdmin: string, newAdmin: string];
  export interface OutputObject {
    oldAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewComptrollerEvent {
  export type InputTuple = [
    oldComptroller: AddressLike,
    newComptroller: AddressLike
  ];
  export type OutputTuple = [oldComptroller: string, newComptroller: string];
  export interface OutputObject {
    oldComptroller: string;
    newComptroller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewDiscountRateEvent {
  export type InputTuple = [
    oldDiscountRateMantissa: BigNumberish,
    newDiscountRateMantissa: BigNumberish
  ];
  export type OutputTuple = [
    oldDiscountRateMantissa: bigint,
    newDiscountRateMantissa: bigint
  ];
  export interface OutputObject {
    oldDiscountRateMantissa: bigint;
    newDiscountRateMantissa: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewMarketInterestRateModelEvent {
  export type InputTuple = [
    oldInterestRateModel: AddressLike,
    newInterestRateModel: AddressLike
  ];
  export type OutputTuple = [
    oldInterestRateModel: string,
    newInterestRateModel: string
  ];
  export interface OutputObject {
    oldInterestRateModel: string;
    newInterestRateModel: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewPendingAdminEvent {
  export type InputTuple = [
    oldPendingAdmin: AddressLike,
    newPendingAdmin: AddressLike
  ];
  export type OutputTuple = [oldPendingAdmin: string, newPendingAdmin: string];
  export interface OutputObject {
    oldPendingAdmin: string;
    newPendingAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewReserveFactorEvent {
  export type InputTuple = [
    oldReserveFactorMantissa: BigNumberish,
    newReserveFactorMantissa: BigNumberish
  ];
  export type OutputTuple = [
    oldReserveFactorMantissa: bigint,
    newReserveFactorMantissa: bigint
  ];
  export interface OutputObject {
    oldReserveFactorMantissa: bigint;
    newReserveFactorMantissa: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemEvent {
  export type InputTuple = [
    redeemer: AddressLike,
    redeemAmount: BigNumberish,
    redeemTokens: BigNumberish
  ];
  export type OutputTuple = [
    redeemer: string,
    redeemAmount: bigint,
    redeemTokens: bigint
  ];
  export interface OutputObject {
    redeemer: string;
    redeemAmount: bigint;
    redeemTokens: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepayBorrowEvent {
  export type InputTuple = [
    payer: AddressLike,
    borrower: AddressLike,
    repayAmount: BigNumberish,
    accountBorrows: BigNumberish,
    totalBorrows: BigNumberish
  ];
  export type OutputTuple = [
    payer: string,
    borrower: string,
    repayAmount: bigint,
    accountBorrows: bigint,
    totalBorrows: bigint
  ];
  export interface OutputObject {
    payer: string;
    borrower: string;
    repayAmount: bigint;
    accountBorrows: bigint;
    totalBorrows: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReservesAddedEvent {
  export type InputTuple = [
    benefactor: AddressLike,
    addAmount: BigNumberish,
    newTotalReserves: BigNumberish
  ];
  export type OutputTuple = [
    benefactor: string,
    addAmount: bigint,
    newTotalReserves: bigint
  ];
  export interface OutputObject {
    benefactor: string;
    addAmount: bigint;
    newTotalReserves: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReservesReducedEvent {
  export type InputTuple = [
    admin: AddressLike,
    reduceAmount: BigNumberish,
    newTotalReserves: BigNumberish
  ];
  export type OutputTuple = [
    admin: string,
    reduceAmount: bigint,
    newTotalReserves: bigint
  ];
  export interface OutputObject {
    admin: string;
    reduceAmount: bigint;
    newTotalReserves: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, amount: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SuErc20 extends BaseContract {
  connect(runner?: ContractRunner | null): SuErc20;
  waitForDeployment(): Promise<this>;

  interface: SuErc20Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _acceptAdmin: TypedContractMethod<[], [bigint], "nonpayable">;

  _addReserves: TypedContractMethod<
    [addAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  _reduceReserves: TypedContractMethod<
    [reduceAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  _setComptroller: TypedContractMethod<
    [newComptroller: AddressLike],
    [bigint],
    "nonpayable"
  >;

  _setDiscountRate: TypedContractMethod<
    [discountRateMantissa_: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  _setInterestRateModel: TypedContractMethod<
    [newInterestRateModel: AddressLike],
    [bigint],
    "nonpayable"
  >;

  _setPendingAdmin: TypedContractMethod<
    [newPendingAdmin: AddressLike],
    [bigint],
    "nonpayable"
  >;

  _setReserveFactor: TypedContractMethod<
    [newReserveFactorMantissa: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  _syncUnderlyingBalance: TypedContractMethod<[], [void], "nonpayable">;

  accrualBlockNumber: TypedContractMethod<[], [bigint], "view">;

  accrueInterest: TypedContractMethod<[], [bigint], "nonpayable">;

  admin: TypedContractMethod<[], [string], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  balanceOfUnderlying: TypedContractMethod<
    [owner: AddressLike],
    [bigint],
    "nonpayable"
  >;

  borrow: TypedContractMethod<
    [borrowAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  borrowAndMint: TypedContractMethod<
    [borrowAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  borrowBalanceCurrent: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "nonpayable"
  >;

  borrowBalanceStored: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  borrowIndex: TypedContractMethod<[], [bigint], "view">;

  borrowRatePerBlock: TypedContractMethod<[], [bigint], "view">;

  comptroller: TypedContractMethod<[], [string], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  discountRateMantissa: TypedContractMethod<[], [bigint], "view">;

  exchangeRateCurrent: TypedContractMethod<[], [bigint], "nonpayable">;

  exchangeRateStored: TypedContractMethod<[], [bigint], "view">;

  executeRedemption: TypedContractMethod<
    [
      redeemer: AddressLike,
      provider: AddressLike,
      repayAmount: BigNumberish,
      cTokenCollateral: AddressLike,
      seizeAmount: BigNumberish,
      redemptionRate: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getAccountSnapshot: TypedContractMethod<
    [account: AddressLike],
    [[bigint, bigint, bigint, bigint]],
    "view"
  >;

  getCash: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [
      underlying_: AddressLike,
      comptroller_: AddressLike,
      interestRateModel_: AddressLike,
      initialExchangeRateMantissa_: BigNumberish,
      name_: string,
      symbol_: string,
      decimals_: BigNumberish,
      admin_: AddressLike,
      discountRateMantissa_: BigNumberish,
      reserveFactorMantissa_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  interestRateModel: TypedContractMethod<[], [string], "view">;

  isCEther: TypedContractMethod<[], [boolean], "view">;

  isCToken: TypedContractMethod<[], [boolean], "view">;

  isDeprecated: TypedContractMethod<[], [boolean], "view">;

  liquidateBorrow: TypedContractMethod<
    [
      borrower: AddressLike,
      repayAmount: BigNumberish,
      cTokenCollateral: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  liquidateCalculateSeizeTokens: TypedContractMethod<
    [
      cTokenCollateral: AddressLike,
      actualRepayAmount: BigNumberish,
      liquidationIncentiveMantissa: BigNumberish
    ],
    [[bigint, bigint]],
    "view"
  >;

  mint: TypedContractMethod<[mintAmount: BigNumberish], [bigint], "nonpayable">;

  name: TypedContractMethod<[], [string], "view">;

  pendingAdmin: TypedContractMethod<[], [string], "view">;

  protocolSeizeShareMantissa: TypedContractMethod<[], [bigint], "view">;

  redeem: TypedContractMethod<
    [redeemTokens: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  redeemUnderlying: TypedContractMethod<
    [redeemAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  repayBorrow: TypedContractMethod<
    [repayAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  repayBorrowBehalf: TypedContractMethod<
    [borrower: AddressLike, repayAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  reserveFactorMantissa: TypedContractMethod<[], [bigint], "view">;

  seize: TypedContractMethod<
    [
      liquidator: AddressLike,
      borrower: AddressLike,
      seizeTokens: BigNumberish,
      protocolShareMantissa: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  supplyRatePerBlock: TypedContractMethod<[], [bigint], "view">;

  sweepToken: TypedContractMethod<[token: AddressLike], [void], "nonpayable">;

  symbol: TypedContractMethod<[], [string], "view">;

  totalBorrows: TypedContractMethod<[], [bigint], "view">;

  totalBorrowsCurrent: TypedContractMethod<[], [bigint], "nonpayable">;

  totalReserves: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [dst: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [src: AddressLike, dst: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  underlying: TypedContractMethod<[], [string], "view">;

  underlyingBalance: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_acceptAdmin"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "_addReserves"
  ): TypedContractMethod<[addAmount: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "_reduceReserves"
  ): TypedContractMethod<[reduceAmount: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "_setComptroller"
  ): TypedContractMethod<[newComptroller: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "_setDiscountRate"
  ): TypedContractMethod<
    [discountRateMantissa_: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_setInterestRateModel"
  ): TypedContractMethod<
    [newInterestRateModel: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_setPendingAdmin"
  ): TypedContractMethod<
    [newPendingAdmin: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_setReserveFactor"
  ): TypedContractMethod<
    [newReserveFactorMantissa: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_syncUnderlyingBalance"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "accrualBlockNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "accrueInterest"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOfUnderlying"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "borrow"
  ): TypedContractMethod<[borrowAmount: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "borrowAndMint"
  ): TypedContractMethod<[borrowAmount: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "borrowBalanceCurrent"
  ): TypedContractMethod<[account: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "borrowBalanceStored"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "borrowIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "borrowRatePerBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "comptroller"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "discountRateMantissa"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "exchangeRateCurrent"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "exchangeRateStored"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "executeRedemption"
  ): TypedContractMethod<
    [
      redeemer: AddressLike,
      provider: AddressLike,
      repayAmount: BigNumberish,
      cTokenCollateral: AddressLike,
      seizeAmount: BigNumberish,
      redemptionRate: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAccountSnapshot"
  ): TypedContractMethod<
    [account: AddressLike],
    [[bigint, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCash"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      underlying_: AddressLike,
      comptroller_: AddressLike,
      interestRateModel_: AddressLike,
      initialExchangeRateMantissa_: BigNumberish,
      name_: string,
      symbol_: string,
      decimals_: BigNumberish,
      admin_: AddressLike,
      discountRateMantissa_: BigNumberish,
      reserveFactorMantissa_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "interestRateModel"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isCEther"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isCToken"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isDeprecated"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "liquidateBorrow"
  ): TypedContractMethod<
    [
      borrower: AddressLike,
      repayAmount: BigNumberish,
      cTokenCollateral: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "liquidateCalculateSeizeTokens"
  ): TypedContractMethod<
    [
      cTokenCollateral: AddressLike,
      actualRepayAmount: BigNumberish,
      liquidationIncentiveMantissa: BigNumberish
    ],
    [[bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<[mintAmount: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolSeizeShareMantissa"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "redeem"
  ): TypedContractMethod<[redeemTokens: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "redeemUnderlying"
  ): TypedContractMethod<[redeemAmount: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "repayBorrow"
  ): TypedContractMethod<[repayAmount: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "repayBorrowBehalf"
  ): TypedContractMethod<
    [borrower: AddressLike, repayAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reserveFactorMantissa"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "seize"
  ): TypedContractMethod<
    [
      liquidator: AddressLike,
      borrower: AddressLike,
      seizeTokens: BigNumberish,
      protocolShareMantissa: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supplyRatePerBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sweepToken"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalBorrows"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalBorrowsCurrent"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "totalReserves"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [dst: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [src: AddressLike, dst: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "underlying"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "underlyingBalance"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "AccrueInterest"
  ): TypedContractEvent<
    AccrueInterestEvent.InputTuple,
    AccrueInterestEvent.OutputTuple,
    AccrueInterestEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "Borrow"
  ): TypedContractEvent<
    BorrowEvent.InputTuple,
    BorrowEvent.OutputTuple,
    BorrowEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidateBorrow"
  ): TypedContractEvent<
    LiquidateBorrowEvent.InputTuple,
    LiquidateBorrowEvent.OutputTuple,
    LiquidateBorrowEvent.OutputObject
  >;
  getEvent(
    key: "Mint"
  ): TypedContractEvent<
    MintEvent.InputTuple,
    MintEvent.OutputTuple,
    MintEvent.OutputObject
  >;
  getEvent(
    key: "NewAdmin"
  ): TypedContractEvent<
    NewAdminEvent.InputTuple,
    NewAdminEvent.OutputTuple,
    NewAdminEvent.OutputObject
  >;
  getEvent(
    key: "NewComptroller"
  ): TypedContractEvent<
    NewComptrollerEvent.InputTuple,
    NewComptrollerEvent.OutputTuple,
    NewComptrollerEvent.OutputObject
  >;
  getEvent(
    key: "NewDiscountRate"
  ): TypedContractEvent<
    NewDiscountRateEvent.InputTuple,
    NewDiscountRateEvent.OutputTuple,
    NewDiscountRateEvent.OutputObject
  >;
  getEvent(
    key: "NewMarketInterestRateModel"
  ): TypedContractEvent<
    NewMarketInterestRateModelEvent.InputTuple,
    NewMarketInterestRateModelEvent.OutputTuple,
    NewMarketInterestRateModelEvent.OutputObject
  >;
  getEvent(
    key: "NewPendingAdmin"
  ): TypedContractEvent<
    NewPendingAdminEvent.InputTuple,
    NewPendingAdminEvent.OutputTuple,
    NewPendingAdminEvent.OutputObject
  >;
  getEvent(
    key: "NewReserveFactor"
  ): TypedContractEvent<
    NewReserveFactorEvent.InputTuple,
    NewReserveFactorEvent.OutputTuple,
    NewReserveFactorEvent.OutputObject
  >;
  getEvent(
    key: "Redeem"
  ): TypedContractEvent<
    RedeemEvent.InputTuple,
    RedeemEvent.OutputTuple,
    RedeemEvent.OutputObject
  >;
  getEvent(
    key: "RepayBorrow"
  ): TypedContractEvent<
    RepayBorrowEvent.InputTuple,
    RepayBorrowEvent.OutputTuple,
    RepayBorrowEvent.OutputObject
  >;
  getEvent(
    key: "ReservesAdded"
  ): TypedContractEvent<
    ReservesAddedEvent.InputTuple,
    ReservesAddedEvent.OutputTuple,
    ReservesAddedEvent.OutputObject
  >;
  getEvent(
    key: "ReservesReduced"
  ): TypedContractEvent<
    ReservesReducedEvent.InputTuple,
    ReservesReducedEvent.OutputTuple,
    ReservesReducedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "AccrueInterest(uint256,uint256,uint256,uint256)": TypedContractEvent<
      AccrueInterestEvent.InputTuple,
      AccrueInterestEvent.OutputTuple,
      AccrueInterestEvent.OutputObject
    >;
    AccrueInterest: TypedContractEvent<
      AccrueInterestEvent.InputTuple,
      AccrueInterestEvent.OutputTuple,
      AccrueInterestEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "Borrow(address,uint256,uint256,uint256)": TypedContractEvent<
      BorrowEvent.InputTuple,
      BorrowEvent.OutputTuple,
      BorrowEvent.OutputObject
    >;
    Borrow: TypedContractEvent<
      BorrowEvent.InputTuple,
      BorrowEvent.OutputTuple,
      BorrowEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "LiquidateBorrow(address,address,uint256,address,uint256)": TypedContractEvent<
      LiquidateBorrowEvent.InputTuple,
      LiquidateBorrowEvent.OutputTuple,
      LiquidateBorrowEvent.OutputObject
    >;
    LiquidateBorrow: TypedContractEvent<
      LiquidateBorrowEvent.InputTuple,
      LiquidateBorrowEvent.OutputTuple,
      LiquidateBorrowEvent.OutputObject
    >;

    "Mint(address,uint256,uint256)": TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;
    Mint: TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;

    "NewAdmin(address,address)": TypedContractEvent<
      NewAdminEvent.InputTuple,
      NewAdminEvent.OutputTuple,
      NewAdminEvent.OutputObject
    >;
    NewAdmin: TypedContractEvent<
      NewAdminEvent.InputTuple,
      NewAdminEvent.OutputTuple,
      NewAdminEvent.OutputObject
    >;

    "NewComptroller(address,address)": TypedContractEvent<
      NewComptrollerEvent.InputTuple,
      NewComptrollerEvent.OutputTuple,
      NewComptrollerEvent.OutputObject
    >;
    NewComptroller: TypedContractEvent<
      NewComptrollerEvent.InputTuple,
      NewComptrollerEvent.OutputTuple,
      NewComptrollerEvent.OutputObject
    >;

    "NewDiscountRate(uint256,uint256)": TypedContractEvent<
      NewDiscountRateEvent.InputTuple,
      NewDiscountRateEvent.OutputTuple,
      NewDiscountRateEvent.OutputObject
    >;
    NewDiscountRate: TypedContractEvent<
      NewDiscountRateEvent.InputTuple,
      NewDiscountRateEvent.OutputTuple,
      NewDiscountRateEvent.OutputObject
    >;

    "NewMarketInterestRateModel(address,address)": TypedContractEvent<
      NewMarketInterestRateModelEvent.InputTuple,
      NewMarketInterestRateModelEvent.OutputTuple,
      NewMarketInterestRateModelEvent.OutputObject
    >;
    NewMarketInterestRateModel: TypedContractEvent<
      NewMarketInterestRateModelEvent.InputTuple,
      NewMarketInterestRateModelEvent.OutputTuple,
      NewMarketInterestRateModelEvent.OutputObject
    >;

    "NewPendingAdmin(address,address)": TypedContractEvent<
      NewPendingAdminEvent.InputTuple,
      NewPendingAdminEvent.OutputTuple,
      NewPendingAdminEvent.OutputObject
    >;
    NewPendingAdmin: TypedContractEvent<
      NewPendingAdminEvent.InputTuple,
      NewPendingAdminEvent.OutputTuple,
      NewPendingAdminEvent.OutputObject
    >;

    "NewReserveFactor(uint256,uint256)": TypedContractEvent<
      NewReserveFactorEvent.InputTuple,
      NewReserveFactorEvent.OutputTuple,
      NewReserveFactorEvent.OutputObject
    >;
    NewReserveFactor: TypedContractEvent<
      NewReserveFactorEvent.InputTuple,
      NewReserveFactorEvent.OutputTuple,
      NewReserveFactorEvent.OutputObject
    >;

    "Redeem(address,uint256,uint256)": TypedContractEvent<
      RedeemEvent.InputTuple,
      RedeemEvent.OutputTuple,
      RedeemEvent.OutputObject
    >;
    Redeem: TypedContractEvent<
      RedeemEvent.InputTuple,
      RedeemEvent.OutputTuple,
      RedeemEvent.OutputObject
    >;

    "RepayBorrow(address,address,uint256,uint256,uint256)": TypedContractEvent<
      RepayBorrowEvent.InputTuple,
      RepayBorrowEvent.OutputTuple,
      RepayBorrowEvent.OutputObject
    >;
    RepayBorrow: TypedContractEvent<
      RepayBorrowEvent.InputTuple,
      RepayBorrowEvent.OutputTuple,
      RepayBorrowEvent.OutputObject
    >;

    "ReservesAdded(address,uint256,uint256)": TypedContractEvent<
      ReservesAddedEvent.InputTuple,
      ReservesAddedEvent.OutputTuple,
      ReservesAddedEvent.OutputObject
    >;
    ReservesAdded: TypedContractEvent<
      ReservesAddedEvent.InputTuple,
      ReservesAddedEvent.OutputTuple,
      ReservesAddedEvent.OutputObject
    >;

    "ReservesReduced(address,uint256,uint256)": TypedContractEvent<
      ReservesReducedEvent.InputTuple,
      ReservesReducedEvent.OutputTuple,
      ReservesReducedEvent.OutputObject
    >;
    ReservesReduced: TypedContractEvent<
      ReservesReducedEvent.InputTuple,
      ReservesReducedEvent.OutputTuple,
      ReservesReducedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
