/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface FraxGaugeFXSRewardsDistributorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "curator_address"
      | "currentReward"
      | "distributeReward"
      | "distributionsOn"
      | "gauge_controller"
      | "gauge_whitelist"
      | "is_middleman"
      | "last_time_gauge_paid"
      | "owner"
      | "recoverERC20"
      | "renounceOwnership"
      | "reward_token_address"
      | "setCurator"
      | "setGaugeController"
      | "setGaugeState"
      | "setTimelock"
      | "timelock_address"
      | "toggleDistributions"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DistributionsToggled"
      | "GaugeStateChanged"
      | "OwnershipTransferred"
      | "RecoveredERC20"
      | "RewardDistributed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "curator_address",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "distributionsOn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gauge_controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gauge_whitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "is_middleman",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "last_time_gauge_paid",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reward_token_address",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCurator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGaugeController",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGaugeState",
    values: [AddressLike, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimelock",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "timelock_address",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleDistributions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "curator_address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributionsOn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gauge_controller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gauge_whitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "is_middleman",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "last_time_gauge_paid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reward_token_address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCurator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGaugeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGaugeState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timelock_address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleDistributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace DistributionsToggledEvent {
  export type InputTuple = [distibutions_state: boolean];
  export type OutputTuple = [distibutions_state: boolean];
  export interface OutputObject {
    distibutions_state: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GaugeStateChangedEvent {
  export type InputTuple = [
    gauge_address: AddressLike,
    is_middleman: boolean,
    is_active: boolean
  ];
  export type OutputTuple = [
    gauge_address: string,
    is_middleman: boolean,
    is_active: boolean
  ];
  export interface OutputObject {
    gauge_address: string;
    is_middleman: boolean;
    is_active: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecoveredERC20Event {
  export type InputTuple = [token: AddressLike, amount: BigNumberish];
  export type OutputTuple = [token: string, amount: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardDistributedEvent {
  export type InputTuple = [
    gauge_address: AddressLike,
    reward_amount: BigNumberish
  ];
  export type OutputTuple = [gauge_address: string, reward_amount: bigint];
  export interface OutputObject {
    gauge_address: string;
    reward_amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FraxGaugeFXSRewardsDistributor extends BaseContract {
  connect(runner?: ContractRunner | null): FraxGaugeFXSRewardsDistributor;
  waitForDeployment(): Promise<this>;

  interface: FraxGaugeFXSRewardsDistributorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  curator_address: TypedContractMethod<[], [string], "view">;

  currentReward: TypedContractMethod<
    [gauge_address: AddressLike],
    [bigint],
    "view"
  >;

  distributeReward: TypedContractMethod<
    [gauge_address: AddressLike],
    [[bigint, bigint] & { weeks_elapsed: bigint; reward_tally: bigint }],
    "nonpayable"
  >;

  distributionsOn: TypedContractMethod<[], [boolean], "view">;

  gauge_controller: TypedContractMethod<[], [string], "view">;

  gauge_whitelist: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  is_middleman: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  last_time_gauge_paid: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  recoverERC20: TypedContractMethod<
    [tokenAddress: AddressLike, tokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  reward_token_address: TypedContractMethod<[], [string], "view">;

  setCurator: TypedContractMethod<
    [_new_curator_address: AddressLike],
    [void],
    "nonpayable"
  >;

  setGaugeController: TypedContractMethod<
    [_gauge_controller_address: AddressLike],
    [void],
    "nonpayable"
  >;

  setGaugeState: TypedContractMethod<
    [_gauge_address: AddressLike, _is_middleman: boolean, _is_active: boolean],
    [void],
    "nonpayable"
  >;

  setTimelock: TypedContractMethod<
    [_new_timelock: AddressLike],
    [void],
    "nonpayable"
  >;

  timelock_address: TypedContractMethod<[], [string], "view">;

  toggleDistributions: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "curator_address"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "currentReward"
  ): TypedContractMethod<[gauge_address: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "distributeReward"
  ): TypedContractMethod<
    [gauge_address: AddressLike],
    [[bigint, bigint] & { weeks_elapsed: bigint; reward_tally: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "distributionsOn"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "gauge_controller"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "gauge_whitelist"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "is_middleman"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "last_time_gauge_paid"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "recoverERC20"
  ): TypedContractMethod<
    [tokenAddress: AddressLike, tokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reward_token_address"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setCurator"
  ): TypedContractMethod<
    [_new_curator_address: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGaugeController"
  ): TypedContractMethod<
    [_gauge_controller_address: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGaugeState"
  ): TypedContractMethod<
    [_gauge_address: AddressLike, _is_middleman: boolean, _is_active: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTimelock"
  ): TypedContractMethod<[_new_timelock: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "timelock_address"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "toggleDistributions"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "DistributionsToggled"
  ): TypedContractEvent<
    DistributionsToggledEvent.InputTuple,
    DistributionsToggledEvent.OutputTuple,
    DistributionsToggledEvent.OutputObject
  >;
  getEvent(
    key: "GaugeStateChanged"
  ): TypedContractEvent<
    GaugeStateChangedEvent.InputTuple,
    GaugeStateChangedEvent.OutputTuple,
    GaugeStateChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RecoveredERC20"
  ): TypedContractEvent<
    RecoveredERC20Event.InputTuple,
    RecoveredERC20Event.OutputTuple,
    RecoveredERC20Event.OutputObject
  >;
  getEvent(
    key: "RewardDistributed"
  ): TypedContractEvent<
    RewardDistributedEvent.InputTuple,
    RewardDistributedEvent.OutputTuple,
    RewardDistributedEvent.OutputObject
  >;

  filters: {
    "DistributionsToggled(bool)": TypedContractEvent<
      DistributionsToggledEvent.InputTuple,
      DistributionsToggledEvent.OutputTuple,
      DistributionsToggledEvent.OutputObject
    >;
    DistributionsToggled: TypedContractEvent<
      DistributionsToggledEvent.InputTuple,
      DistributionsToggledEvent.OutputTuple,
      DistributionsToggledEvent.OutputObject
    >;

    "GaugeStateChanged(address,bool,bool)": TypedContractEvent<
      GaugeStateChangedEvent.InputTuple,
      GaugeStateChangedEvent.OutputTuple,
      GaugeStateChangedEvent.OutputObject
    >;
    GaugeStateChanged: TypedContractEvent<
      GaugeStateChangedEvent.InputTuple,
      GaugeStateChangedEvent.OutputTuple,
      GaugeStateChangedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RecoveredERC20(address,uint256)": TypedContractEvent<
      RecoveredERC20Event.InputTuple,
      RecoveredERC20Event.OutputTuple,
      RecoveredERC20Event.OutputObject
    >;
    RecoveredERC20: TypedContractEvent<
      RecoveredERC20Event.InputTuple,
      RecoveredERC20Event.OutputTuple,
      RecoveredERC20Event.OutputObject
    >;

    "RewardDistributed(address,uint256)": TypedContractEvent<
      RewardDistributedEvent.InputTuple,
      RewardDistributedEvent.OutputTuple,
      RewardDistributedEvent.OutputObject
    >;
    RewardDistributed: TypedContractEvent<
      RewardDistributedEvent.InputTuple,
      RewardDistributedEvent.OutputTuple,
      RewardDistributedEvent.OutputObject
    >;
  };
}
