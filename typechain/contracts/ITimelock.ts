/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ITimelockInterface extends Interface {
  getFunction(
    nameOrSignature: "createAgreement" | "isSupport" | "overThreshold"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AgreementClaimed"
      | "AgreementCreated"
      | "AgreementFrozen"
      | "RescueERC20"
      | "TimeLockFrozen"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createAgreement",
    values: [BigNumberish, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSupport",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "overThreshold",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isSupport", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "overThreshold",
    data: BytesLike
  ): Result;
}

export namespace AgreementClaimedEvent {
  export type InputTuple = [
    beneficiary: AddressLike,
    agreementIndex: BigNumberish,
    asset: AddressLike,
    actionType: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    beneficiary: string,
    agreementIndex: bigint,
    asset: string,
    actionType: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    beneficiary: string;
    agreementIndex: bigint;
    asset: string;
    actionType: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgreementCreatedEvent {
  export type InputTuple = [
    beneficiary: AddressLike,
    agreementIndex: BigNumberish,
    asset: AddressLike,
    actionType: BigNumberish,
    amount: BigNumberish,
    releaseTime: BigNumberish
  ];
  export type OutputTuple = [
    beneficiary: string,
    agreementIndex: bigint,
    asset: string,
    actionType: bigint,
    amount: bigint,
    releaseTime: bigint
  ];
  export interface OutputObject {
    beneficiary: string;
    agreementIndex: bigint;
    asset: string;
    actionType: bigint;
    amount: bigint;
    releaseTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgreementFrozenEvent {
  export type InputTuple = [
    beneficiary: AddressLike,
    agreementIndex: BigNumberish,
    value: boolean
  ];
  export type OutputTuple = [
    beneficiary: string,
    agreementIndex: bigint,
    value: boolean
  ];
  export interface OutputObject {
    beneficiary: string;
    agreementIndex: bigint;
    value: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RescueERC20Event {
  export type InputTuple = [
    token: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [token: string, to: string, amount: bigint];
  export interface OutputObject {
    token: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TimeLockFrozenEvent {
  export type InputTuple = [value: boolean];
  export type OutputTuple = [value: boolean];
  export interface OutputObject {
    value: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ITimelock extends BaseContract {
  connect(runner?: ContractRunner | null): ITimelock;
  waitForDeployment(): Promise<this>;

  interface: ITimelockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createAgreement: TypedContractMethod<
    [
      actionType: BigNumberish,
      underlying: AddressLike,
      amount: BigNumberish,
      beneficiary: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  isSupport: TypedContractMethod<[underlying: AddressLike], [boolean], "view">;

  overThreshold: TypedContractMethod<
    [
      underlying: AddressLike,
      oracle: AddressLike,
      usdValue: BigNumberish,
      decimals: BigNumberish
    ],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createAgreement"
  ): TypedContractMethod<
    [
      actionType: BigNumberish,
      underlying: AddressLike,
      amount: BigNumberish,
      beneficiary: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isSupport"
  ): TypedContractMethod<[underlying: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "overThreshold"
  ): TypedContractMethod<
    [
      underlying: AddressLike,
      oracle: AddressLike,
      usdValue: BigNumberish,
      decimals: BigNumberish
    ],
    [boolean],
    "view"
  >;

  getEvent(
    key: "AgreementClaimed"
  ): TypedContractEvent<
    AgreementClaimedEvent.InputTuple,
    AgreementClaimedEvent.OutputTuple,
    AgreementClaimedEvent.OutputObject
  >;
  getEvent(
    key: "AgreementCreated"
  ): TypedContractEvent<
    AgreementCreatedEvent.InputTuple,
    AgreementCreatedEvent.OutputTuple,
    AgreementCreatedEvent.OutputObject
  >;
  getEvent(
    key: "AgreementFrozen"
  ): TypedContractEvent<
    AgreementFrozenEvent.InputTuple,
    AgreementFrozenEvent.OutputTuple,
    AgreementFrozenEvent.OutputObject
  >;
  getEvent(
    key: "RescueERC20"
  ): TypedContractEvent<
    RescueERC20Event.InputTuple,
    RescueERC20Event.OutputTuple,
    RescueERC20Event.OutputObject
  >;
  getEvent(
    key: "TimeLockFrozen"
  ): TypedContractEvent<
    TimeLockFrozenEvent.InputTuple,
    TimeLockFrozenEvent.OutputTuple,
    TimeLockFrozenEvent.OutputObject
  >;

  filters: {
    "AgreementClaimed(address,uint256,address,uint8,uint256)": TypedContractEvent<
      AgreementClaimedEvent.InputTuple,
      AgreementClaimedEvent.OutputTuple,
      AgreementClaimedEvent.OutputObject
    >;
    AgreementClaimed: TypedContractEvent<
      AgreementClaimedEvent.InputTuple,
      AgreementClaimedEvent.OutputTuple,
      AgreementClaimedEvent.OutputObject
    >;

    "AgreementCreated(address,uint256,address,uint8,uint256,uint256)": TypedContractEvent<
      AgreementCreatedEvent.InputTuple,
      AgreementCreatedEvent.OutputTuple,
      AgreementCreatedEvent.OutputObject
    >;
    AgreementCreated: TypedContractEvent<
      AgreementCreatedEvent.InputTuple,
      AgreementCreatedEvent.OutputTuple,
      AgreementCreatedEvent.OutputObject
    >;

    "AgreementFrozen(address,uint256,bool)": TypedContractEvent<
      AgreementFrozenEvent.InputTuple,
      AgreementFrozenEvent.OutputTuple,
      AgreementFrozenEvent.OutputObject
    >;
    AgreementFrozen: TypedContractEvent<
      AgreementFrozenEvent.InputTuple,
      AgreementFrozenEvent.OutputTuple,
      AgreementFrozenEvent.OutputObject
    >;

    "RescueERC20(address,address,uint256)": TypedContractEvent<
      RescueERC20Event.InputTuple,
      RescueERC20Event.OutputTuple,
      RescueERC20Event.OutputObject
    >;
    RescueERC20: TypedContractEvent<
      RescueERC20Event.InputTuple,
      RescueERC20Event.OutputTuple,
      RescueERC20Event.OutputObject
    >;

    "TimeLockFrozen(bool)": TypedContractEvent<
      TimeLockFrozenEvent.InputTuple,
      TimeLockFrozenEvent.OutputTuple,
      TimeLockFrozenEvent.OutputObject
    >;
    TimeLockFrozen: TypedContractEvent<
      TimeLockFrozenEvent.InputTuple,
      TimeLockFrozenEvent.OutputTuple,
      TimeLockFrozenEvent.OutputObject
    >;
  };
}
