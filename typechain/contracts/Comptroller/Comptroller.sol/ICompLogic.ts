/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type ExpStruct = { mantissa: BigNumberish };

export type ExpStructOutput = [mantissa: bigint] & { mantissa: bigint };

export interface ICompLogicInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "distributeBorrowerComp"
      | "distributeSupplierComp"
      | "initializeMarket"
      | "setCompSpeed"
      | "updateCompBorrowIndex"
      | "updateCompSupplyIndex"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "distributeBorrowerComp",
    values: [AddressLike, AddressLike, ExpStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeSupplierComp",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeMarket",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCompSpeed",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCompBorrowIndex",
    values: [AddressLike, ExpStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCompSupplyIndex",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "distributeBorrowerComp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeSupplierComp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCompSpeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCompBorrowIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCompSupplyIndex",
    data: BytesLike
  ): Result;
}

export interface ICompLogic extends BaseContract {
  connect(runner?: ContractRunner | null): ICompLogic;
  waitForDeployment(): Promise<this>;

  interface: ICompLogicInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  distributeBorrowerComp: TypedContractMethod<
    [cToken: AddressLike, borrower: AddressLike, marketBorrowIndex: ExpStruct],
    [void],
    "nonpayable"
  >;

  distributeSupplierComp: TypedContractMethod<
    [cToken: AddressLike, supplier: AddressLike],
    [void],
    "nonpayable"
  >;

  initializeMarket: TypedContractMethod<
    [cToken: AddressLike, blockNumber: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCompSpeed: TypedContractMethod<
    [cToken: AddressLike, supplySpeed: BigNumberish, borrowSpeed: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateCompBorrowIndex: TypedContractMethod<
    [cToken: AddressLike, marketBorrowIndex: ExpStruct],
    [void],
    "nonpayable"
  >;

  updateCompSupplyIndex: TypedContractMethod<
    [cToken: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "distributeBorrowerComp"
  ): TypedContractMethod<
    [cToken: AddressLike, borrower: AddressLike, marketBorrowIndex: ExpStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "distributeSupplierComp"
  ): TypedContractMethod<
    [cToken: AddressLike, supplier: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initializeMarket"
  ): TypedContractMethod<
    [cToken: AddressLike, blockNumber: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCompSpeed"
  ): TypedContractMethod<
    [cToken: AddressLike, supplySpeed: BigNumberish, borrowSpeed: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateCompBorrowIndex"
  ): TypedContractMethod<
    [cToken: AddressLike, marketBorrowIndex: ExpStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateCompSupplyIndex"
  ): TypedContractMethod<[cToken: AddressLike], [void], "nonpayable">;

  filters: {};
}
