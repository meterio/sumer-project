/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IComptroller {
  export type AssetGroupStruct = {
    groupId: BigNumberish;
    groupName: string;
    intraCRateMantissa: BigNumberish;
    intraMintRateMantissa: BigNumberish;
    intraSuRateMantissa: BigNumberish;
    interCRateMantissa: BigNumberish;
    interSuRateMantissa: BigNumberish;
    exist: boolean;
  };

  export type AssetGroupStructOutput = [
    groupId: bigint,
    groupName: string,
    intraCRateMantissa: bigint,
    intraMintRateMantissa: bigint,
    intraSuRateMantissa: bigint,
    interCRateMantissa: bigint,
    interSuRateMantissa: bigint,
    exist: boolean
  ] & {
    groupId: bigint;
    groupName: string;
    intraCRateMantissa: bigint;
    intraMintRateMantissa: bigint;
    intraSuRateMantissa: bigint;
    interCRateMantissa: bigint;
    interSuRateMantissa: bigint;
    exist: boolean;
  };
}

export interface IComptrollerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_getBorrowPaused"
      | "_getMintPaused"
      | "_getSeizePaused"
      | "_getTransferPaused"
      | "assetGroupIdToIndex"
      | "borrowAllowed"
      | "borrowCaps"
      | "claimComp"
      | "closeFactorMantissa"
      | "compAccrued"
      | "enterMarkets"
      | "exitMarket"
      | "getAccountLiquidity"
      | "getAllAssetGroup"
      | "getAllMarkets"
      | "getAssetGroup"
      | "getAssetGroupNum"
      | "getAssetsIn"
      | "getCompAddress"
      | "getHypotheticalAccountLiquidity"
      | "isComptroller"
      | "isListed"
      | "liquidationIncentiveMantissa"
      | "marketGroupId"
      | "markets"
      | "mintAllowed"
      | "oracle"
      | "redeemAllowed"
      | "redeemVerify"
      | "repayBorrowAllowed"
      | "seizeAllowed"
      | "timelock"
      | "transferAllowed"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ActionPaused"
      | "NewBorrowCap"
      | "NewBorrowCapGuardian"
      | "NewPauseGuardian"
      | "RemoveAssetGroup"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_getBorrowPaused",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_getMintPaused",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_getSeizePaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_getTransferPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetGroupIdToIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowAllowed",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowCaps",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimComp",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "closeFactorMantissa",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "compAccrued",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "enterMarkets",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "exitMarket",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountLiquidity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllAssetGroup",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllMarkets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetGroup",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetGroupNum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetsIn",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCompAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHypotheticalAccountLiquidity",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isComptroller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isListed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationIncentiveMantissa",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketGroupId",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "markets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAllowed",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemAllowed",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemVerify",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayBorrowAllowed",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "seizeAllowed",
    values: [AddressLike, AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferAllowed",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "_getBorrowPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getMintPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getSeizePaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getTransferPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetGroupIdToIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrowCaps", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimComp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closeFactorMantissa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compAccrued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exitMarket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllAssetGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetGroupNum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetsIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCompAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHypotheticalAccountLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isComptroller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isListed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidationIncentiveMantissa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketGroupId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "markets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayBorrowAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seizeAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferAllowed",
    data: BytesLike
  ): Result;
}

export namespace ActionPausedEvent {
  export type InputTuple = [
    cToken: AddressLike,
    action: string,
    pauseState: boolean
  ];
  export type OutputTuple = [
    cToken: string,
    action: string,
    pauseState: boolean
  ];
  export interface OutputObject {
    cToken: string;
    action: string;
    pauseState: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewBorrowCapEvent {
  export type InputTuple = [cToken: AddressLike, newBorrowCap: BigNumberish];
  export type OutputTuple = [cToken: string, newBorrowCap: bigint];
  export interface OutputObject {
    cToken: string;
    newBorrowCap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewBorrowCapGuardianEvent {
  export type InputTuple = [
    oldBorrowCapGuardian: AddressLike,
    newBorrowCapGuardian: AddressLike
  ];
  export type OutputTuple = [
    oldBorrowCapGuardian: string,
    newBorrowCapGuardian: string
  ];
  export interface OutputObject {
    oldBorrowCapGuardian: string;
    newBorrowCapGuardian: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewPauseGuardianEvent {
  export type InputTuple = [
    oldPauseGuardian: AddressLike,
    newPauseGuardian: AddressLike
  ];
  export type OutputTuple = [
    oldPauseGuardian: string,
    newPauseGuardian: string
  ];
  export interface OutputObject {
    oldPauseGuardian: string;
    newPauseGuardian: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveAssetGroupEvent {
  export type InputTuple = [
    groupId: BigNumberish,
    equalAssetsGroupNum: BigNumberish
  ];
  export type OutputTuple = [groupId: bigint, equalAssetsGroupNum: bigint];
  export interface OutputObject {
    groupId: bigint;
    equalAssetsGroupNum: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IComptroller extends BaseContract {
  connect(runner?: ContractRunner | null): IComptroller;
  waitForDeployment(): Promise<this>;

  interface: IComptrollerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _getBorrowPaused: TypedContractMethod<
    [cToken: AddressLike],
    [boolean],
    "view"
  >;

  _getMintPaused: TypedContractMethod<
    [cToken: AddressLike],
    [boolean],
    "nonpayable"
  >;

  _getSeizePaused: TypedContractMethod<[], [boolean], "view">;

  _getTransferPaused: TypedContractMethod<[], [boolean], "view">;

  assetGroupIdToIndex: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  borrowAllowed: TypedContractMethod<
    [cToken: AddressLike, borrower: AddressLike, borrowAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  borrowCaps: TypedContractMethod<[cToken: AddressLike], [bigint], "view">;

  claimComp: TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;

  closeFactorMantissa: TypedContractMethod<[], [bigint], "view">;

  compAccrued: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  enterMarkets: TypedContractMethod<
    [cTokens: AddressLike[]],
    [bigint[]],
    "nonpayable"
  >;

  exitMarket: TypedContractMethod<
    [cToken: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getAccountLiquidity: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint, bigint]],
    "view"
  >;

  getAllAssetGroup: TypedContractMethod<
    [],
    [IComptroller.AssetGroupStructOutput[]],
    "view"
  >;

  getAllMarkets: TypedContractMethod<[], [string[]], "view">;

  getAssetGroup: TypedContractMethod<
    [groupId: BigNumberish],
    [IComptroller.AssetGroupStructOutput],
    "view"
  >;

  getAssetGroupNum: TypedContractMethod<[], [bigint], "view">;

  getAssetsIn: TypedContractMethod<[account: AddressLike], [string[]], "view">;

  getCompAddress: TypedContractMethod<[], [string], "view">;

  getHypotheticalAccountLiquidity: TypedContractMethod<
    [
      account: AddressLike,
      cTokenModify: AddressLike,
      redeemTokens: BigNumberish,
      borrowAmount: BigNumberish
    ],
    [[bigint, bigint, bigint]],
    "view"
  >;

  isComptroller: TypedContractMethod<[], [boolean], "view">;

  isListed: TypedContractMethod<[asset: AddressLike], [boolean], "view">;

  liquidationIncentiveMantissa: TypedContractMethod<
    [],
    [[bigint, bigint, bigint]],
    "view"
  >;

  marketGroupId: TypedContractMethod<[asset: AddressLike], [bigint], "view">;

  markets: TypedContractMethod<
    [arg0: AddressLike],
    [[boolean, bigint, boolean]],
    "view"
  >;

  mintAllowed: TypedContractMethod<
    [cToken: AddressLike, minter: AddressLike, mintAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  oracle: TypedContractMethod<[], [string], "view">;

  redeemAllowed: TypedContractMethod<
    [cToken: AddressLike, redeemer: AddressLike, redeemTokens: BigNumberish],
    [void],
    "nonpayable"
  >;

  redeemVerify: TypedContractMethod<
    [
      cToken: AddressLike,
      redeemer: AddressLike,
      redeemAmount: BigNumberish,
      redeemTokens: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  repayBorrowAllowed: TypedContractMethod<
    [
      cToken: AddressLike,
      payer: AddressLike,
      borrower: AddressLike,
      repayAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  seizeAllowed: TypedContractMethod<
    [
      cTokenCollateral: AddressLike,
      cTokenBorrowed: AddressLike,
      liquidator: AddressLike,
      borrower: AddressLike,
      seizeTokens: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  timelock: TypedContractMethod<[], [string], "view">;

  transferAllowed: TypedContractMethod<
    [
      cToken: AddressLike,
      src: AddressLike,
      dst: AddressLike,
      transferTokens: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_getBorrowPaused"
  ): TypedContractMethod<[cToken: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "_getMintPaused"
  ): TypedContractMethod<[cToken: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "_getSeizePaused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "_getTransferPaused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "assetGroupIdToIndex"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "borrowAllowed"
  ): TypedContractMethod<
    [cToken: AddressLike, borrower: AddressLike, borrowAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "borrowCaps"
  ): TypedContractMethod<[cToken: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimComp"
  ): TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "closeFactorMantissa"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "compAccrued"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "enterMarkets"
  ): TypedContractMethod<[cTokens: AddressLike[]], [bigint[]], "nonpayable">;
  getFunction(
    nameOrSignature: "exitMarket"
  ): TypedContractMethod<[cToken: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "getAccountLiquidity"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllAssetGroup"
  ): TypedContractMethod<[], [IComptroller.AssetGroupStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getAllMarkets"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAssetGroup"
  ): TypedContractMethod<
    [groupId: BigNumberish],
    [IComptroller.AssetGroupStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAssetGroupNum"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAssetsIn"
  ): TypedContractMethod<[account: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getCompAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getHypotheticalAccountLiquidity"
  ): TypedContractMethod<
    [
      account: AddressLike,
      cTokenModify: AddressLike,
      redeemTokens: BigNumberish,
      borrowAmount: BigNumberish
    ],
    [[bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "isComptroller"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isListed"
  ): TypedContractMethod<[asset: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "liquidationIncentiveMantissa"
  ): TypedContractMethod<[], [[bigint, bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "marketGroupId"
  ): TypedContractMethod<[asset: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "markets"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[boolean, bigint, boolean]],
    "view"
  >;
  getFunction(
    nameOrSignature: "mintAllowed"
  ): TypedContractMethod<
    [cToken: AddressLike, minter: AddressLike, mintAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "oracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "redeemAllowed"
  ): TypedContractMethod<
    [cToken: AddressLike, redeemer: AddressLike, redeemTokens: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemVerify"
  ): TypedContractMethod<
    [
      cToken: AddressLike,
      redeemer: AddressLike,
      redeemAmount: BigNumberish,
      redeemTokens: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "repayBorrowAllowed"
  ): TypedContractMethod<
    [
      cToken: AddressLike,
      payer: AddressLike,
      borrower: AddressLike,
      repayAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "seizeAllowed"
  ): TypedContractMethod<
    [
      cTokenCollateral: AddressLike,
      cTokenBorrowed: AddressLike,
      liquidator: AddressLike,
      borrower: AddressLike,
      seizeTokens: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "timelock"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferAllowed"
  ): TypedContractMethod<
    [
      cToken: AddressLike,
      src: AddressLike,
      dst: AddressLike,
      transferTokens: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ActionPaused"
  ): TypedContractEvent<
    ActionPausedEvent.InputTuple,
    ActionPausedEvent.OutputTuple,
    ActionPausedEvent.OutputObject
  >;
  getEvent(
    key: "NewBorrowCap"
  ): TypedContractEvent<
    NewBorrowCapEvent.InputTuple,
    NewBorrowCapEvent.OutputTuple,
    NewBorrowCapEvent.OutputObject
  >;
  getEvent(
    key: "NewBorrowCapGuardian"
  ): TypedContractEvent<
    NewBorrowCapGuardianEvent.InputTuple,
    NewBorrowCapGuardianEvent.OutputTuple,
    NewBorrowCapGuardianEvent.OutputObject
  >;
  getEvent(
    key: "NewPauseGuardian"
  ): TypedContractEvent<
    NewPauseGuardianEvent.InputTuple,
    NewPauseGuardianEvent.OutputTuple,
    NewPauseGuardianEvent.OutputObject
  >;
  getEvent(
    key: "RemoveAssetGroup"
  ): TypedContractEvent<
    RemoveAssetGroupEvent.InputTuple,
    RemoveAssetGroupEvent.OutputTuple,
    RemoveAssetGroupEvent.OutputObject
  >;

  filters: {
    "ActionPaused(address,string,bool)": TypedContractEvent<
      ActionPausedEvent.InputTuple,
      ActionPausedEvent.OutputTuple,
      ActionPausedEvent.OutputObject
    >;
    ActionPaused: TypedContractEvent<
      ActionPausedEvent.InputTuple,
      ActionPausedEvent.OutputTuple,
      ActionPausedEvent.OutputObject
    >;

    "NewBorrowCap(address,uint256)": TypedContractEvent<
      NewBorrowCapEvent.InputTuple,
      NewBorrowCapEvent.OutputTuple,
      NewBorrowCapEvent.OutputObject
    >;
    NewBorrowCap: TypedContractEvent<
      NewBorrowCapEvent.InputTuple,
      NewBorrowCapEvent.OutputTuple,
      NewBorrowCapEvent.OutputObject
    >;

    "NewBorrowCapGuardian(address,address)": TypedContractEvent<
      NewBorrowCapGuardianEvent.InputTuple,
      NewBorrowCapGuardianEvent.OutputTuple,
      NewBorrowCapGuardianEvent.OutputObject
    >;
    NewBorrowCapGuardian: TypedContractEvent<
      NewBorrowCapGuardianEvent.InputTuple,
      NewBorrowCapGuardianEvent.OutputTuple,
      NewBorrowCapGuardianEvent.OutputObject
    >;

    "NewPauseGuardian(address,address)": TypedContractEvent<
      NewPauseGuardianEvent.InputTuple,
      NewPauseGuardianEvent.OutputTuple,
      NewPauseGuardianEvent.OutputObject
    >;
    NewPauseGuardian: TypedContractEvent<
      NewPauseGuardianEvent.InputTuple,
      NewPauseGuardianEvent.OutputTuple,
      NewPauseGuardianEvent.OutputObject
    >;

    "RemoveAssetGroup(uint8,uint8)": TypedContractEvent<
      RemoveAssetGroupEvent.InputTuple,
      RemoveAssetGroupEvent.OutputTuple,
      RemoveAssetGroupEvent.OutputObject
    >;
    RemoveAssetGroup: TypedContractEvent<
      RemoveAssetGroupEvent.InputTuple,
      RemoveAssetGroupEvent.OutputTuple,
      RemoveAssetGroupEvent.OutputObject
    >;
  };
}
