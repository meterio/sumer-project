/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type ExpStruct = { mantissa: BigNumberish };

export type ExpStructOutput = [mantissa: bigint] & { mantissa: bigint };

export interface CompLogicInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "_grantComp"
      | "_setCompSpeeds"
      | "_setContributorCompSpeed"
      | "calculateComp"
      | "claimSumer(address[],address[],bool,bool)"
      | "claimSumer(address)"
      | "claimSumer(address,address[])"
      | "comp"
      | "compAccrued"
      | "compBorrowSpeeds"
      | "compBorrowState"
      | "compBorrowerIndex"
      | "compContributorSpeeds"
      | "compInitialIndex"
      | "compSupplierIndex"
      | "compSupplySpeeds"
      | "compSupplyState"
      | "comptroller"
      | "distributeBorrowerComp"
      | "distributeSupplierComp"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "initializeMarket"
      | "lastContributorBlock"
      | "renounceRole"
      | "revokeRole"
      | "setCompSpeed"
      | "setComptroller"
      | "supportsInterface"
      | "updateCompBorrowIndex"
      | "updateCompSupplyIndex"
      | "updateContributorRewards"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CompBorrowSpeedUpdated"
      | "CompGranted"
      | "CompSupplySpeedUpdated"
      | "ContributorCompSpeedUpdated"
      | "DistributedBorrowerComp"
      | "DistributedSupplierComp"
      | "Initialized"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SetComptroller"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_grantComp",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setCompSpeeds",
    values: [AddressLike[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_setContributorCompSpeed",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateComp",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimSumer(address[],address[],bool,bool)",
    values: [AddressLike[], AddressLike[], boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "claimSumer(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimSumer(address,address[])",
    values: [AddressLike, AddressLike[]]
  ): string;
  encodeFunctionData(functionFragment: "comp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "compAccrued",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "compBorrowSpeeds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "compBorrowState",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "compBorrowerIndex",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "compContributorSpeeds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "compInitialIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "compSupplierIndex",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "compSupplySpeeds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "compSupplyState",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "comptroller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributeBorrowerComp",
    values: [AddressLike, AddressLike, ExpStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeSupplierComp",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeMarket",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastContributorBlock",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCompSpeed",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setComptroller",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCompBorrowIndex",
    values: [AddressLike, ExpStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCompSupplyIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateContributorRewards",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_grantComp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_setCompSpeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setContributorCompSpeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateComp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimSumer(address[],address[],bool,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimSumer(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimSumer(address,address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "comp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "compAccrued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compBorrowSpeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compBorrowState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compBorrowerIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compContributorSpeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compInitialIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compSupplierIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compSupplySpeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compSupplyState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "comptroller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeBorrowerComp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeSupplierComp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastContributorBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCompSpeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setComptroller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCompBorrowIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCompSupplyIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateContributorRewards",
    data: BytesLike
  ): Result;
}

export namespace CompBorrowSpeedUpdatedEvent {
  export type InputTuple = [cToken: AddressLike, newSpeed: BigNumberish];
  export type OutputTuple = [cToken: string, newSpeed: bigint];
  export interface OutputObject {
    cToken: string;
    newSpeed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CompGrantedEvent {
  export type InputTuple = [recipient: AddressLike, amount: BigNumberish];
  export type OutputTuple = [recipient: string, amount: bigint];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CompSupplySpeedUpdatedEvent {
  export type InputTuple = [cToken: AddressLike, newSpeed: BigNumberish];
  export type OutputTuple = [cToken: string, newSpeed: bigint];
  export interface OutputObject {
    cToken: string;
    newSpeed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContributorCompSpeedUpdatedEvent {
  export type InputTuple = [contributor: AddressLike, newSpeed: BigNumberish];
  export type OutputTuple = [contributor: string, newSpeed: bigint];
  export interface OutputObject {
    contributor: string;
    newSpeed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DistributedBorrowerCompEvent {
  export type InputTuple = [
    cToken: AddressLike,
    borrower: AddressLike,
    compDelta: BigNumberish,
    compBorrowIndex: BigNumberish
  ];
  export type OutputTuple = [
    cToken: string,
    borrower: string,
    compDelta: bigint,
    compBorrowIndex: bigint
  ];
  export interface OutputObject {
    cToken: string;
    borrower: string;
    compDelta: bigint;
    compBorrowIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DistributedSupplierCompEvent {
  export type InputTuple = [
    cToken: AddressLike,
    supplier: AddressLike,
    compDelta: BigNumberish,
    compSupplyIndex: BigNumberish
  ];
  export type OutputTuple = [
    cToken: string,
    supplier: string,
    compDelta: bigint,
    compSupplyIndex: bigint
  ];
  export interface OutputObject {
    cToken: string;
    supplier: string;
    compDelta: bigint;
    compSupplyIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetComptrollerEvent {
  export type InputTuple = [comptroller: AddressLike];
  export type OutputTuple = [comptroller: string];
  export interface OutputObject {
    comptroller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CompLogic extends BaseContract {
  connect(runner?: ContractRunner | null): CompLogic;
  waitForDeployment(): Promise<this>;

  interface: CompLogicInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  _grantComp: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  _setCompSpeeds: TypedContractMethod<
    [
      cTokens: AddressLike[],
      supplySpeeds: BigNumberish[],
      borrowSpeeds: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  _setContributorCompSpeed: TypedContractMethod<
    [contributor: AddressLike, compSpeed: BigNumberish],
    [void],
    "nonpayable"
  >;

  calculateComp: TypedContractMethod<[holder: AddressLike], [bigint], "view">;

  "claimSumer(address[],address[],bool,bool)": TypedContractMethod<
    [
      holders: AddressLike[],
      cTokens: AddressLike[],
      borrowers: boolean,
      suppliers: boolean
    ],
    [void],
    "nonpayable"
  >;

  "claimSumer(address)": TypedContractMethod<
    [holder: AddressLike],
    [void],
    "nonpayable"
  >;

  "claimSumer(address,address[])": TypedContractMethod<
    [holder: AddressLike, cTokens: AddressLike[]],
    [void],
    "nonpayable"
  >;

  comp: TypedContractMethod<[], [string], "view">;

  compAccrued: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  compBorrowSpeeds: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  compBorrowState: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { index: bigint; block: bigint }],
    "view"
  >;

  compBorrowerIndex: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  compContributorSpeeds: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  compInitialIndex: TypedContractMethod<[], [bigint], "view">;

  compSupplierIndex: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  compSupplySpeeds: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  compSupplyState: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { index: bigint; block: bigint }],
    "view"
  >;

  comptroller: TypedContractMethod<[], [string], "view">;

  distributeBorrowerComp: TypedContractMethod<
    [cToken: AddressLike, borrower: AddressLike, marketBorrowIndex: ExpStruct],
    [void],
    "nonpayable"
  >;

  distributeSupplierComp: TypedContractMethod<
    [cToken: AddressLike, supplier: AddressLike],
    [void],
    "nonpayable"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getRoleMember: TypedContractMethod<
    [role: BytesLike, index: BigNumberish],
    [string],
    "view"
  >;

  getRoleMemberCount: TypedContractMethod<[role: BytesLike], [bigint], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [_admin: AddressLike, _comp: AddressLike],
    [void],
    "nonpayable"
  >;

  initializeMarket: TypedContractMethod<
    [cToken: AddressLike, blockNumber: BigNumberish],
    [void],
    "nonpayable"
  >;

  lastContributorBlock: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setCompSpeed: TypedContractMethod<
    [cToken: AddressLike, supplySpeed: BigNumberish, borrowSpeed: BigNumberish],
    [void],
    "nonpayable"
  >;

  setComptroller: TypedContractMethod<
    [_comptroller: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  updateCompBorrowIndex: TypedContractMethod<
    [cToken: AddressLike, marketBorrowIndex: ExpStruct],
    [void],
    "nonpayable"
  >;

  updateCompSupplyIndex: TypedContractMethod<
    [cToken: AddressLike],
    [void],
    "nonpayable"
  >;

  updateContributorRewards: TypedContractMethod<
    [contributor: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_grantComp"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_setCompSpeeds"
  ): TypedContractMethod<
    [
      cTokens: AddressLike[],
      supplySpeeds: BigNumberish[],
      borrowSpeeds: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_setContributorCompSpeed"
  ): TypedContractMethod<
    [contributor: AddressLike, compSpeed: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calculateComp"
  ): TypedContractMethod<[holder: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimSumer(address[],address[],bool,bool)"
  ): TypedContractMethod<
    [
      holders: AddressLike[],
      cTokens: AddressLike[],
      borrowers: boolean,
      suppliers: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimSumer(address)"
  ): TypedContractMethod<[holder: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimSumer(address,address[])"
  ): TypedContractMethod<
    [holder: AddressLike, cTokens: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "comp"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "compAccrued"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "compBorrowSpeeds"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "compBorrowState"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { index: bigint; block: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "compBorrowerIndex"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "compContributorSpeeds"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "compInitialIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "compSupplierIndex"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "compSupplySpeeds"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "compSupplyState"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { index: bigint; block: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "comptroller"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "distributeBorrowerComp"
  ): TypedContractMethod<
    [cToken: AddressLike, borrower: AddressLike, marketBorrowIndex: ExpStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "distributeSupplierComp"
  ): TypedContractMethod<
    [cToken: AddressLike, supplier: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleMember"
  ): TypedContractMethod<
    [role: BytesLike, index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleMemberCount"
  ): TypedContractMethod<[role: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_admin: AddressLike, _comp: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initializeMarket"
  ): TypedContractMethod<
    [cToken: AddressLike, blockNumber: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lastContributorBlock"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCompSpeed"
  ): TypedContractMethod<
    [cToken: AddressLike, supplySpeed: BigNumberish, borrowSpeed: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setComptroller"
  ): TypedContractMethod<[_comptroller: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "updateCompBorrowIndex"
  ): TypedContractMethod<
    [cToken: AddressLike, marketBorrowIndex: ExpStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateCompSupplyIndex"
  ): TypedContractMethod<[cToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateContributorRewards"
  ): TypedContractMethod<[contributor: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "CompBorrowSpeedUpdated"
  ): TypedContractEvent<
    CompBorrowSpeedUpdatedEvent.InputTuple,
    CompBorrowSpeedUpdatedEvent.OutputTuple,
    CompBorrowSpeedUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "CompGranted"
  ): TypedContractEvent<
    CompGrantedEvent.InputTuple,
    CompGrantedEvent.OutputTuple,
    CompGrantedEvent.OutputObject
  >;
  getEvent(
    key: "CompSupplySpeedUpdated"
  ): TypedContractEvent<
    CompSupplySpeedUpdatedEvent.InputTuple,
    CompSupplySpeedUpdatedEvent.OutputTuple,
    CompSupplySpeedUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ContributorCompSpeedUpdated"
  ): TypedContractEvent<
    ContributorCompSpeedUpdatedEvent.InputTuple,
    ContributorCompSpeedUpdatedEvent.OutputTuple,
    ContributorCompSpeedUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DistributedBorrowerComp"
  ): TypedContractEvent<
    DistributedBorrowerCompEvent.InputTuple,
    DistributedBorrowerCompEvent.OutputTuple,
    DistributedBorrowerCompEvent.OutputObject
  >;
  getEvent(
    key: "DistributedSupplierComp"
  ): TypedContractEvent<
    DistributedSupplierCompEvent.InputTuple,
    DistributedSupplierCompEvent.OutputTuple,
    DistributedSupplierCompEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SetComptroller"
  ): TypedContractEvent<
    SetComptrollerEvent.InputTuple,
    SetComptrollerEvent.OutputTuple,
    SetComptrollerEvent.OutputObject
  >;

  filters: {
    "CompBorrowSpeedUpdated(address,uint256)": TypedContractEvent<
      CompBorrowSpeedUpdatedEvent.InputTuple,
      CompBorrowSpeedUpdatedEvent.OutputTuple,
      CompBorrowSpeedUpdatedEvent.OutputObject
    >;
    CompBorrowSpeedUpdated: TypedContractEvent<
      CompBorrowSpeedUpdatedEvent.InputTuple,
      CompBorrowSpeedUpdatedEvent.OutputTuple,
      CompBorrowSpeedUpdatedEvent.OutputObject
    >;

    "CompGranted(address,uint256)": TypedContractEvent<
      CompGrantedEvent.InputTuple,
      CompGrantedEvent.OutputTuple,
      CompGrantedEvent.OutputObject
    >;
    CompGranted: TypedContractEvent<
      CompGrantedEvent.InputTuple,
      CompGrantedEvent.OutputTuple,
      CompGrantedEvent.OutputObject
    >;

    "CompSupplySpeedUpdated(address,uint256)": TypedContractEvent<
      CompSupplySpeedUpdatedEvent.InputTuple,
      CompSupplySpeedUpdatedEvent.OutputTuple,
      CompSupplySpeedUpdatedEvent.OutputObject
    >;
    CompSupplySpeedUpdated: TypedContractEvent<
      CompSupplySpeedUpdatedEvent.InputTuple,
      CompSupplySpeedUpdatedEvent.OutputTuple,
      CompSupplySpeedUpdatedEvent.OutputObject
    >;

    "ContributorCompSpeedUpdated(address,uint256)": TypedContractEvent<
      ContributorCompSpeedUpdatedEvent.InputTuple,
      ContributorCompSpeedUpdatedEvent.OutputTuple,
      ContributorCompSpeedUpdatedEvent.OutputObject
    >;
    ContributorCompSpeedUpdated: TypedContractEvent<
      ContributorCompSpeedUpdatedEvent.InputTuple,
      ContributorCompSpeedUpdatedEvent.OutputTuple,
      ContributorCompSpeedUpdatedEvent.OutputObject
    >;

    "DistributedBorrowerComp(address,address,uint256,uint256)": TypedContractEvent<
      DistributedBorrowerCompEvent.InputTuple,
      DistributedBorrowerCompEvent.OutputTuple,
      DistributedBorrowerCompEvent.OutputObject
    >;
    DistributedBorrowerComp: TypedContractEvent<
      DistributedBorrowerCompEvent.InputTuple,
      DistributedBorrowerCompEvent.OutputTuple,
      DistributedBorrowerCompEvent.OutputObject
    >;

    "DistributedSupplierComp(address,address,uint256,uint256)": TypedContractEvent<
      DistributedSupplierCompEvent.InputTuple,
      DistributedSupplierCompEvent.OutputTuple,
      DistributedSupplierCompEvent.OutputObject
    >;
    DistributedSupplierComp: TypedContractEvent<
      DistributedSupplierCompEvent.InputTuple,
      DistributedSupplierCompEvent.OutputTuple,
      DistributedSupplierCompEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SetComptroller(address)": TypedContractEvent<
      SetComptrollerEvent.InputTuple,
      SetComptrollerEvent.OutputTuple,
      SetComptrollerEvent.OutputObject
    >;
    SetComptroller: TypedContractEvent<
      SetComptrollerEvent.InputTuple,
      SetComptrollerEvent.OutputTuple,
      SetComptrollerEvent.OutputObject
    >;
  };
}
