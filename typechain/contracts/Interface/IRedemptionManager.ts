/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IRedemptionManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "calcActualRepayAndSeize"
      | "getFirstProvider"
      | "getNextProvider"
      | "getRedemptionRate"
      | "hasNoProvider"
      | "updateBaseRateFromRedemption"
      | "updateSortedBorrows"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calcActualRepayAndSeize",
    values: [BigNumberish, AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFirstProvider",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextProvider",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRedemptionRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasNoProvider",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBaseRateFromRedemption",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSortedBorrows",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "calcActualRepayAndSeize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFirstProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedemptionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasNoProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBaseRateFromRedemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSortedBorrows",
    data: BytesLike
  ): Result;
}

export interface IRedemptionManager extends BaseContract {
  connect(runner?: ContractRunner | null): IRedemptionManager;
  waitForDeployment(): Promise<this>;

  interface: IRedemptionManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  calcActualRepayAndSeize: TypedContractMethod<
    [
      redeemAmount: BigNumberish,
      provider: AddressLike,
      cToken: AddressLike,
      suToken: AddressLike,
      oracle: AddressLike
    ],
    [[bigint, bigint]],
    "nonpayable"
  >;

  getFirstProvider: TypedContractMethod<
    [_asset: AddressLike],
    [string],
    "view"
  >;

  getNextProvider: TypedContractMethod<
    [_asset: AddressLike, _id: AddressLike],
    [string],
    "view"
  >;

  getRedemptionRate: TypedContractMethod<[], [bigint], "view">;

  hasNoProvider: TypedContractMethod<[_asset: AddressLike], [boolean], "view">;

  updateBaseRateFromRedemption: TypedContractMethod<
    [redeemAmount: BigNumberish, _totalSupply: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  updateSortedBorrows: TypedContractMethod<
    [csuToken: AddressLike, borrower: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "calcActualRepayAndSeize"
  ): TypedContractMethod<
    [
      redeemAmount: BigNumberish,
      provider: AddressLike,
      cToken: AddressLike,
      suToken: AddressLike,
      oracle: AddressLike
    ],
    [[bigint, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getFirstProvider"
  ): TypedContractMethod<[_asset: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getNextProvider"
  ): TypedContractMethod<
    [_asset: AddressLike, _id: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRedemptionRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasNoProvider"
  ): TypedContractMethod<[_asset: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "updateBaseRateFromRedemption"
  ): TypedContractMethod<
    [redeemAmount: BigNumberish, _totalSupply: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateSortedBorrows"
  ): TypedContractMethod<
    [csuToken: AddressLike, borrower: AddressLike],
    [void],
    "nonpayable"
  >;

  filters: {};
}
