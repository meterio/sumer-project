/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IStdReference {
  export type ReferenceDataStruct = {
    rate: BigNumberish;
    lastUpdatedBase: BigNumberish;
    lastUpdatedQuote: BigNumberish;
  };

  export type ReferenceDataStructOutput = [
    rate: bigint,
    lastUpdatedBase: bigint,
    lastUpdatedQuote: bigint
  ] & { rate: bigint; lastUpdatedBase: bigint; lastUpdatedQuote: bigint };
}

export interface IStdReferenceInterface extends Interface {
  getFunction(
    nameOrSignature: "getReferenceData" | "getReferenceDataBulk"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getReferenceData",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferenceDataBulk",
    values: [string[], string[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "getReferenceData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferenceDataBulk",
    data: BytesLike
  ): Result;
}

export interface IStdReference extends BaseContract {
  connect(runner?: ContractRunner | null): IStdReference;
  waitForDeployment(): Promise<this>;

  interface: IStdReferenceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getReferenceData: TypedContractMethod<
    [_base: string, _quote: string],
    [IStdReference.ReferenceDataStructOutput],
    "view"
  >;

  getReferenceDataBulk: TypedContractMethod<
    [_bases: string[], _quotes: string[]],
    [IStdReference.ReferenceDataStructOutput[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getReferenceData"
  ): TypedContractMethod<
    [_base: string, _quote: string],
    [IStdReference.ReferenceDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReferenceDataBulk"
  ): TypedContractMethod<
    [_bases: string[], _quotes: string[]],
    [IStdReference.ReferenceDataStructOutput[]],
    "view"
  >;

  filters: {};
}
