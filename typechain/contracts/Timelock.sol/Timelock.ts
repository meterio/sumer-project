/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ITimelock {
  export type AgreementStruct = {
    actionType: BigNumberish;
    isFrozen: boolean;
    underlying: AddressLike;
    releaseTime: BigNumberish;
    amount: BigNumberish;
  };

  export type AgreementStructOutput = [
    actionType: bigint,
    isFrozen: boolean,
    underlying: string,
    releaseTime: bigint,
    amount: bigint
  ] & {
    actionType: bigint;
    isFrozen: boolean;
    underlying: string;
    releaseTime: bigint;
    amount: bigint;
  };

  export type UnderlyingStruct = {
    isSupport: boolean;
    cToken: AddressLike;
    lockDuration: BigNumberish;
    totalBalance: BigNumberish;
    threshold: BigNumberish;
  };

  export type UnderlyingStructOutput = [
    isSupport: boolean,
    cToken: string,
    lockDuration: bigint,
    totalBalance: bigint,
    threshold: bigint
  ] & {
    isSupport: boolean;
    cToken: string;
    lockDuration: bigint;
    totalBalance: bigint;
    threshold: bigint;
  };
}

export interface TimelockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "EMERGENCY_ADMIN"
      | "cTokenToUnderlying"
      | "claim"
      | "createAgreement"
      | "freezeAgreement"
      | "freezeAllAgreements"
      | "frozen"
      | "getAllAgreementsFor"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "grantRole"
      | "hasRole"
      | "isSupport"
      | "overThreshold"
      | "renounceRole"
      | "rescueERC20"
      | "revokeRole"
      | "setLockDuration"
      | "setThreshold"
      | "setUnderly"
      | "supportsInterface"
      | "underlyingDetail"
      | "underlyingDetails"
      | "unfreezeAllAgreements"
      | "userAgreements"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AgreementClaimed"
      | "AgreementCreated"
      | "AgreementFrozen"
      | "RescueERC20"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "TimeLockFrozen"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EMERGENCY_ADMIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cTokenToUnderlying",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createAgreement",
    values: [BigNumberish, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "freezeAgreement",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "freezeAllAgreements",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "frozen", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllAgreementsFor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSupport",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "overThreshold",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rescueERC20",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLockDuration",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setThreshold",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnderly",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingDetail",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingDetails",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "unfreezeAllAgreements",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userAgreements",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EMERGENCY_ADMIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cTokenToUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freezeAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freezeAllAgreements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "frozen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllAgreementsFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isSupport", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "overThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLockDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUnderly", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingDetail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unfreezeAllAgreements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userAgreements",
    data: BytesLike
  ): Result;
}

export namespace AgreementClaimedEvent {
  export type InputTuple = [
    beneficiary: AddressLike,
    agreementIndex: BigNumberish,
    asset: AddressLike,
    actionType: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    beneficiary: string,
    agreementIndex: bigint,
    asset: string,
    actionType: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    beneficiary: string;
    agreementIndex: bigint;
    asset: string;
    actionType: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgreementCreatedEvent {
  export type InputTuple = [
    beneficiary: AddressLike,
    agreementIndex: BigNumberish,
    asset: AddressLike,
    actionType: BigNumberish,
    amount: BigNumberish,
    releaseTime: BigNumberish
  ];
  export type OutputTuple = [
    beneficiary: string,
    agreementIndex: bigint,
    asset: string,
    actionType: bigint,
    amount: bigint,
    releaseTime: bigint
  ];
  export interface OutputObject {
    beneficiary: string;
    agreementIndex: bigint;
    asset: string;
    actionType: bigint;
    amount: bigint;
    releaseTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgreementFrozenEvent {
  export type InputTuple = [
    beneficiary: AddressLike,
    agreementIndex: BigNumberish,
    value: boolean
  ];
  export type OutputTuple = [
    beneficiary: string,
    agreementIndex: bigint,
    value: boolean
  ];
  export interface OutputObject {
    beneficiary: string;
    agreementIndex: bigint;
    value: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RescueERC20Event {
  export type InputTuple = [
    token: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [token: string, to: string, amount: bigint];
  export interface OutputObject {
    token: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TimeLockFrozenEvent {
  export type InputTuple = [value: boolean];
  export type OutputTuple = [value: boolean];
  export interface OutputObject {
    value: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Timelock extends BaseContract {
  connect(runner?: ContractRunner | null): Timelock;
  waitForDeployment(): Promise<this>;

  interface: TimelockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  EMERGENCY_ADMIN: TypedContractMethod<[], [string], "view">;

  cTokenToUnderlying: TypedContractMethod<
    [arg0: AddressLike],
    [string],
    "view"
  >;

  claim: TypedContractMethod<
    [agreementIndexes: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  createAgreement: TypedContractMethod<
    [
      actionType: BigNumberish,
      underlying: AddressLike,
      amount: BigNumberish,
      beneficiary: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  freezeAgreement: TypedContractMethod<
    [beneficiary: AddressLike, agreementIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  freezeAllAgreements: TypedContractMethod<[], [void], "nonpayable">;

  frozen: TypedContractMethod<[], [boolean], "view">;

  getAllAgreementsFor: TypedContractMethod<
    [beneficiary: AddressLike],
    [ITimelock.AgreementStructOutput[]],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getRoleMember: TypedContractMethod<
    [role: BytesLike, index: BigNumberish],
    [string],
    "view"
  >;

  getRoleMemberCount: TypedContractMethod<[role: BytesLike], [bigint], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isSupport: TypedContractMethod<[underlying: AddressLike], [boolean], "view">;

  overThreshold: TypedContractMethod<
    [
      underlying: AddressLike,
      oracle: AddressLike,
      amount: BigNumberish,
      decimals: BigNumberish
    ],
    [boolean],
    "view"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  rescueERC20: TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setLockDuration: TypedContractMethod<
    [underlying: AddressLike, lockDuration: BigNumberish],
    [void],
    "nonpayable"
  >;

  setThreshold: TypedContractMethod<
    [underlying: AddressLike, threshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  setUnderly: TypedContractMethod<
    [cToken: AddressLike, underlying: AddressLike, isSupport_: boolean],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  underlyingDetail: TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, string, bigint, bigint, bigint] & {
        isSupport: boolean;
        cToken: string;
        lockDuration: bigint;
        totalBalance: bigint;
        threshold: bigint;
      }
    ],
    "view"
  >;

  underlyingDetails: TypedContractMethod<
    [underlyings: AddressLike[]],
    [ITimelock.UnderlyingStructOutput[]],
    "view"
  >;

  unfreezeAllAgreements: TypedContractMethod<[], [void], "nonpayable">;

  userAgreements: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, boolean, string, bigint, bigint] & {
        actionType: bigint;
        isFrozen: boolean;
        underlying: string;
        releaseTime: bigint;
        amount: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "EMERGENCY_ADMIN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cTokenToUnderlying"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [agreementIndexes: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createAgreement"
  ): TypedContractMethod<
    [
      actionType: BigNumberish,
      underlying: AddressLike,
      amount: BigNumberish,
      beneficiary: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "freezeAgreement"
  ): TypedContractMethod<
    [beneficiary: AddressLike, agreementIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "freezeAllAgreements"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "frozen"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getAllAgreementsFor"
  ): TypedContractMethod<
    [beneficiary: AddressLike],
    [ITimelock.AgreementStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleMember"
  ): TypedContractMethod<
    [role: BytesLike, index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleMemberCount"
  ): TypedContractMethod<[role: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isSupport"
  ): TypedContractMethod<[underlying: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "overThreshold"
  ): TypedContractMethod<
    [
      underlying: AddressLike,
      oracle: AddressLike,
      amount: BigNumberish,
      decimals: BigNumberish
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rescueERC20"
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLockDuration"
  ): TypedContractMethod<
    [underlying: AddressLike, lockDuration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setThreshold"
  ): TypedContractMethod<
    [underlying: AddressLike, threshold: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUnderly"
  ): TypedContractMethod<
    [cToken: AddressLike, underlying: AddressLike, isSupport_: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "underlyingDetail"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, string, bigint, bigint, bigint] & {
        isSupport: boolean;
        cToken: string;
        lockDuration: bigint;
        totalBalance: bigint;
        threshold: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "underlyingDetails"
  ): TypedContractMethod<
    [underlyings: AddressLike[]],
    [ITimelock.UnderlyingStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "unfreezeAllAgreements"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userAgreements"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, boolean, string, bigint, bigint] & {
        actionType: bigint;
        isFrozen: boolean;
        underlying: string;
        releaseTime: bigint;
        amount: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "AgreementClaimed"
  ): TypedContractEvent<
    AgreementClaimedEvent.InputTuple,
    AgreementClaimedEvent.OutputTuple,
    AgreementClaimedEvent.OutputObject
  >;
  getEvent(
    key: "AgreementCreated"
  ): TypedContractEvent<
    AgreementCreatedEvent.InputTuple,
    AgreementCreatedEvent.OutputTuple,
    AgreementCreatedEvent.OutputObject
  >;
  getEvent(
    key: "AgreementFrozen"
  ): TypedContractEvent<
    AgreementFrozenEvent.InputTuple,
    AgreementFrozenEvent.OutputTuple,
    AgreementFrozenEvent.OutputObject
  >;
  getEvent(
    key: "RescueERC20"
  ): TypedContractEvent<
    RescueERC20Event.InputTuple,
    RescueERC20Event.OutputTuple,
    RescueERC20Event.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "TimeLockFrozen"
  ): TypedContractEvent<
    TimeLockFrozenEvent.InputTuple,
    TimeLockFrozenEvent.OutputTuple,
    TimeLockFrozenEvent.OutputObject
  >;

  filters: {
    "AgreementClaimed(address,uint256,address,uint8,uint256)": TypedContractEvent<
      AgreementClaimedEvent.InputTuple,
      AgreementClaimedEvent.OutputTuple,
      AgreementClaimedEvent.OutputObject
    >;
    AgreementClaimed: TypedContractEvent<
      AgreementClaimedEvent.InputTuple,
      AgreementClaimedEvent.OutputTuple,
      AgreementClaimedEvent.OutputObject
    >;

    "AgreementCreated(address,uint256,address,uint8,uint256,uint256)": TypedContractEvent<
      AgreementCreatedEvent.InputTuple,
      AgreementCreatedEvent.OutputTuple,
      AgreementCreatedEvent.OutputObject
    >;
    AgreementCreated: TypedContractEvent<
      AgreementCreatedEvent.InputTuple,
      AgreementCreatedEvent.OutputTuple,
      AgreementCreatedEvent.OutputObject
    >;

    "AgreementFrozen(address,uint256,bool)": TypedContractEvent<
      AgreementFrozenEvent.InputTuple,
      AgreementFrozenEvent.OutputTuple,
      AgreementFrozenEvent.OutputObject
    >;
    AgreementFrozen: TypedContractEvent<
      AgreementFrozenEvent.InputTuple,
      AgreementFrozenEvent.OutputTuple,
      AgreementFrozenEvent.OutputObject
    >;

    "RescueERC20(address,address,uint256)": TypedContractEvent<
      RescueERC20Event.InputTuple,
      RescueERC20Event.OutputTuple,
      RescueERC20Event.OutputObject
    >;
    RescueERC20: TypedContractEvent<
      RescueERC20Event.InputTuple,
      RescueERC20Event.OutputTuple,
      RescueERC20Event.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "TimeLockFrozen(bool)": TypedContractEvent<
      TimeLockFrozenEvent.InputTuple,
      TimeLockFrozenEvent.OutputTuple,
      TimeLockFrozenEvent.OutputObject
    >;
    TimeLockFrozen: TypedContractEvent<
      TimeLockFrozenEvent.InputTuple,
      TimeLockFrozenEvent.OutputTuple,
      TimeLockFrozenEvent.OutputObject
    >;
  };
}
