/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace PythOracle {
  export type FeedDataStruct = {
    feedId: BytesLike;
    tokenDecimals: BigNumberish;
    addr: AddressLike;
    name: string;
  };

  export type FeedDataStructOutput = [
    feedId: string,
    tokenDecimals: bigint,
    addr: string,
    name: string
  ] & { feedId: string; tokenDecimals: bigint; addr: string; name: string };
}

export interface PythOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "changeOwner"
      | "feeds"
      | "fixedPrices"
      | "getFeed"
      | "getFixedPrice"
      | "getUnderlyingPrice"
      | "getUnderlyingPrices"
      | "isPriceOracle"
      | "owner"
      | "removeFeed"
      | "removeFixedPrice"
      | "setFeedId"
      | "setFixedPrice"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "SetFeed"): EventFragment;

  encodeFunctionData(
    functionFragment: "changeOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "feeds", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "fixedPrices",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFixedPrice",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingPrice",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingPrices",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isPriceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeFeed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFixedPrice",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeedId",
    values: [AddressLike, BytesLike, AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFixedPrice",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "changeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fixedPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFixedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFixedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeedId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFixedPrice",
    data: BytesLike
  ): Result;
}

export namespace SetFeedEvent {
  export type InputTuple = [
    cToken_: AddressLike,
    feedId: BytesLike,
    addr: AddressLike,
    name: string
  ];
  export type OutputTuple = [
    cToken_: string,
    feedId: string,
    addr: string,
    name: string
  ];
  export interface OutputObject {
    cToken_: string;
    feedId: string;
    addr: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PythOracle extends BaseContract {
  connect(runner?: ContractRunner | null): PythOracle;
  waitForDeployment(): Promise<this>;

  interface: PythOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  changeOwner: TypedContractMethod<[owner_: AddressLike], [void], "nonpayable">;

  feeds: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, string, string] & {
        feedId: string;
        tokenDecimals: bigint;
        addr: string;
        name: string;
      }
    ],
    "view"
  >;

  fixedPrices: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFeed: TypedContractMethod<
    [cToken_: AddressLike],
    [PythOracle.FeedDataStructOutput],
    "view"
  >;

  getFixedPrice: TypedContractMethod<[cToken_: AddressLike], [bigint], "view">;

  getUnderlyingPrice: TypedContractMethod<
    [cToken_: AddressLike],
    [bigint],
    "view"
  >;

  getUnderlyingPrices: TypedContractMethod<
    [cTokens: AddressLike[]],
    [bigint[]],
    "view"
  >;

  isPriceOracle: TypedContractMethod<[], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  removeFeed: TypedContractMethod<[cToken_: AddressLike], [void], "nonpayable">;

  removeFixedPrice: TypedContractMethod<
    [cToken_: AddressLike],
    [void],
    "nonpayable"
  >;

  setFeedId: TypedContractMethod<
    [
      cToken_: AddressLike,
      feedId: BytesLike,
      addr: AddressLike,
      tokenDecimals: BigNumberish,
      name: string
    ],
    [void],
    "nonpayable"
  >;

  setFixedPrice: TypedContractMethod<
    [cToken_: AddressLike, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "changeOwner"
  ): TypedContractMethod<[owner_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "feeds"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, string, string] & {
        feedId: string;
        tokenDecimals: bigint;
        addr: string;
        name: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "fixedPrices"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFeed"
  ): TypedContractMethod<
    [cToken_: AddressLike],
    [PythOracle.FeedDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFixedPrice"
  ): TypedContractMethod<[cToken_: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUnderlyingPrice"
  ): TypedContractMethod<[cToken_: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUnderlyingPrices"
  ): TypedContractMethod<[cTokens: AddressLike[]], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "isPriceOracle"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeFeed"
  ): TypedContractMethod<[cToken_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeFixedPrice"
  ): TypedContractMethod<[cToken_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeedId"
  ): TypedContractMethod<
    [
      cToken_: AddressLike,
      feedId: BytesLike,
      addr: AddressLike,
      tokenDecimals: BigNumberish,
      name: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFixedPrice"
  ): TypedContractMethod<
    [cToken_: AddressLike, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "SetFeed"
  ): TypedContractEvent<
    SetFeedEvent.InputTuple,
    SetFeedEvent.OutputTuple,
    SetFeedEvent.OutputObject
  >;

  filters: {
    "SetFeed(address,bytes32,address,string)": TypedContractEvent<
      SetFeedEvent.InputTuple,
      SetFeedEvent.OutputTuple,
      SetFeedEvent.OutputObject
    >;
    SetFeed: TypedContractEvent<
      SetFeedEvent.InputTuple,
      SetFeedEvent.OutputTuple,
      SetFeedEvent.OutputObject
    >;
  };
}
