/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface VeSumerInterface extends ethers.utils.Interface {
  functions: {
    "CHECKPOINT_ONLY()": FunctionFragment;
    "CREATE_LOCK_TYPE()": FunctionFragment;
    "DEPOSIT_FOR_TYPE()": FunctionFragment;
    "INCREASE_LOCK_AMOUNT()": FunctionFragment;
    "INCREASE_UNLOCK_TIME()": FunctionFragment;
    "MAXTIME()": FunctionFragment;
    "MAXTIME_I128()": FunctionFragment;
    "MULTIPLIER()": FunctionFragment;
    "PROXY_ADD()": FunctionFragment;
    "PROXY_SLASH()": FunctionFragment;
    "TRANSFER_FROM_APP()": FunctionFragment;
    "TRANSFER_TO_APP()": FunctionFragment;
    "USER_WITHDRAW()": FunctionFragment;
    "VOTE_WEIGHT_MULTIPLIER()": FunctionFragment;
    "VOTE_WEIGHT_MULTIPLIER_I128()": FunctionFragment;
    "WEEK()": FunctionFragment;
    "ZERO_ADDRESS()": FunctionFragment;
    "accept_transfer_ownership()": FunctionFragment;
    "admin()": FunctionFragment;
    "appIncreaseAmountForsEnabled()": FunctionFragment;
    "appTransferFromsEnabled()": FunctionFragment;
    "appTransferTosEnabled()": FunctionFragment;
    "apply_smart_wallet_checker()": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfAt(address,uint256)": FunctionFragment;
    "checkpoint()": FunctionFragment;
    "checkpoint_user(address)": FunctionFragment;
    "commit_smart_wallet_checker(address)": FunctionFragment;
    "create_lock(uint256,uint256)": FunctionFragment;
    "curr_period_start()": FunctionFragment;
    "current_proxy()": FunctionFragment;
    "decimals()": FunctionFragment;
    "deposit_for(address,uint256)": FunctionFragment;
    "emergencyUnlockActive()": FunctionFragment;
    "epoch()": FunctionFragment;
    "future_admin()": FunctionFragment;
    "future_smart_wallet_checker()": FunctionFragment;
    "get_last_point()": FunctionFragment;
    "get_last_user_bias(address)": FunctionFragment;
    "get_last_user_point(address)": FunctionFragment;
    "get_last_user_slope(address)": FunctionFragment;
    "historical_proxies(address)": FunctionFragment;
    "increase_amount(uint256)": FunctionFragment;
    "increase_amount_for(address,uint256)": FunctionFragment;
    "increase_unlock_time(uint256)": FunctionFragment;
    "locked(address)": FunctionFragment;
    "locked__amount(address)": FunctionFragment;
    "locked__end(address)": FunctionFragment;
    "name()": FunctionFragment;
    "next_period_start()": FunctionFragment;
    "nominate_ownership(address)": FunctionFragment;
    "point_history(uint256)": FunctionFragment;
    "proxyAddsEnabled()": FunctionFragment;
    "proxySlashesEnabled()": FunctionFragment;
    "proxy_add(address,uint256)": FunctionFragment;
    "proxy_slash(address,uint256)": FunctionFragment;
    "recoverERC20(address,uint256)": FunctionFragment;
    "slope_changes(uint256)": FunctionFragment;
    "smart_wallet_checker()": FunctionFragment;
    "staker_whitelisted_proxy(address)": FunctionFragment;
    "supply()": FunctionFragment;
    "symbol()": FunctionFragment;
    "token()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalSupplyAt(uint256)": FunctionFragment;
    "transfer_from_app(address,address,int128)": FunctionFragment;
    "user_point_epoch(address)": FunctionFragment;
    "user_point_history(address,uint256)": FunctionFragment;
    "user_point_history__ts(address,uint256)": FunctionFragment;
    "user_proxy_balance(address)": FunctionFragment;
    "version()": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CHECKPOINT_ONLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CREATE_LOCK_TYPE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEPOSIT_FOR_TYPE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INCREASE_LOCK_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INCREASE_UNLOCK_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAXTIME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAXTIME_I128",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PROXY_ADD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PROXY_SLASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRANSFER_FROM_APP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRANSFER_TO_APP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USER_WITHDRAW",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTE_WEIGHT_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTE_WEIGHT_MULTIPLIER_I128",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WEEK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ZERO_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accept_transfer_ownership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "appIncreaseAmountForsEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "appTransferFromsEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "appTransferTosEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "apply_smart_wallet_checker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkpoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkpoint_user",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "commit_smart_wallet_checker",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "create_lock",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "curr_period_start",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "current_proxy",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit_for",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyUnlockActive",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "epoch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "future_admin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "future_smart_wallet_checker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get_last_point",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get_last_user_bias",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "get_last_user_point",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "get_last_user_slope",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "historical_proxies",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "increase_amount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increase_amount_for",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increase_unlock_time",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "locked", values: [string]): string;
  encodeFunctionData(
    functionFragment: "locked__amount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "locked__end", values: [string]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "next_period_start",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nominate_ownership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "point_history",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proxyAddsEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxySlashesEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxy_add",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proxy_slash",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slope_changes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "smart_wallet_checker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "staker_whitelisted_proxy",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "supply", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer_from_app",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "user_point_epoch",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "user_point_history",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "user_point_history__ts",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "user_proxy_balance",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "CHECKPOINT_ONLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CREATE_LOCK_TYPE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEPOSIT_FOR_TYPE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INCREASE_LOCK_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INCREASE_UNLOCK_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAXTIME", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAXTIME_I128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MULTIPLIER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PROXY_ADD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PROXY_SLASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRANSFER_FROM_APP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRANSFER_TO_APP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "USER_WITHDRAW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTE_WEIGHT_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTE_WEIGHT_MULTIPLIER_I128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WEEK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ZERO_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accept_transfer_ownership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "appIncreaseAmountForsEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "appTransferFromsEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "appTransferTosEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "apply_smart_wallet_checker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkpoint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkpoint_user",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commit_smart_wallet_checker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "create_lock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "curr_period_start",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "current_proxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deposit_for",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyUnlockActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epoch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "future_admin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "future_smart_wallet_checker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_last_point",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_last_user_bias",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_last_user_point",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_last_user_slope",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "historical_proxies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increase_amount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increase_amount_for",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increase_unlock_time",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "locked__amount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "locked__end",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "next_period_start",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominate_ownership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "point_history",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxyAddsEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxySlashesEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proxy_add", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxy_slash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slope_changes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "smart_wallet_checker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "staker_whitelisted_proxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "supply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transfer_from_app",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "user_point_epoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "user_point_history",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "user_point_history__ts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "user_proxy_balance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AcceptOwnership(address)": EventFragment;
    "AppIncreaseAmountForsToggled(bool)": EventFragment;
    "Deposit(address,address,uint256,uint256,int128,uint256)": EventFragment;
    "EmergencyUnlockToggled(bool)": EventFragment;
    "HistoricalProxyToggled(address,bool)": EventFragment;
    "LendingProxySet(address)": EventFragment;
    "NominateOwnership(address)": EventFragment;
    "ProxyAdd(address,address,uint256)": EventFragment;
    "ProxyAddsToggled(bool)": EventFragment;
    "ProxySlash(address,address,uint256)": EventFragment;
    "ProxySlashesToggled(bool)": EventFragment;
    "ProxyTransferFromsToggled(bool)": EventFragment;
    "ProxyTransferTosToggled(bool)": EventFragment;
    "SmartWalletCheckerApplied(address)": EventFragment;
    "SmartWalletCheckerComitted(address)": EventFragment;
    "StakerProxySet(address)": EventFragment;
    "Supply(uint256,uint256)": EventFragment;
    "TransferFromApp(address,address,uint256)": EventFragment;
    "TransferToApp(address,address,uint256)": EventFragment;
    "Withdraw(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AcceptOwnership"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AppIncreaseAmountForsToggled"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyUnlockToggled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HistoricalProxyToggled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LendingProxySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NominateOwnership"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyAdd"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyAddsToggled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxySlash"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxySlashesToggled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyTransferFromsToggled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyTransferTosToggled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SmartWalletCheckerApplied"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SmartWalletCheckerComitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakerProxySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Supply"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferFromApp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferToApp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type AcceptOwnershipEvent = TypedEvent<[string] & { admin: string }>;

export type AppIncreaseAmountForsToggledEvent = TypedEvent<
  [boolean] & { appIncreaseAmountForsEnabled: boolean }
>;

export type DepositEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    provider: string;
    payer_addr: string;
    value: BigNumber;
    locktime: BigNumber;
    _type: BigNumber;
    ts: BigNumber;
  }
>;

export type EmergencyUnlockToggledEvent = TypedEvent<
  [boolean] & { emergencyUnlockActive: boolean }
>;

export type HistoricalProxyToggledEvent = TypedEvent<
  [string, boolean] & { proxy_address: string; enabled: boolean }
>;

export type LendingProxySetEvent = TypedEvent<
  [string] & { proxy_address: string }
>;

export type NominateOwnershipEvent = TypedEvent<[string] & { admin: string }>;

export type ProxyAddEvent = TypedEvent<
  [string, string, BigNumber] & {
    staker_addr: string;
    proxy_addr: string;
    add_amt: BigNumber;
  }
>;

export type ProxyAddsToggledEvent = TypedEvent<
  [boolean] & { proxyAddsEnabled: boolean }
>;

export type ProxySlashEvent = TypedEvent<
  [string, string, BigNumber] & {
    staker_addr: string;
    proxy_addr: string;
    slash_amt: BigNumber;
  }
>;

export type ProxySlashesToggledEvent = TypedEvent<
  [boolean] & { proxySlashesEnabled: boolean }
>;

export type ProxyTransferFromsToggledEvent = TypedEvent<
  [boolean] & { appTransferFromsEnabled: boolean }
>;

export type ProxyTransferTosToggledEvent = TypedEvent<
  [boolean] & { appTransferTosEnabled: boolean }
>;

export type SmartWalletCheckerAppliedEvent = TypedEvent<
  [string] & { smart_wallet_checker: string }
>;

export type SmartWalletCheckerComittedEvent = TypedEvent<
  [string] & { future_smart_wallet_checker: string }
>;

export type StakerProxySetEvent = TypedEvent<
  [string] & { proxy_address: string }
>;

export type SupplyEvent = TypedEvent<
  [BigNumber, BigNumber] & { prevSupply: BigNumber; supply: BigNumber }
>;

export type TransferFromAppEvent = TypedEvent<
  [string, string, BigNumber] & {
    app_addr: string;
    staker_addr: string;
    transfer_amt: BigNumber;
  }
>;

export type TransferToAppEvent = TypedEvent<
  [string, string, BigNumber] & {
    staker_addr: string;
    app_addr: string;
    transfer_amt: BigNumber;
  }
>;

export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    provider: string;
    to_addr: string;
    value: BigNumber;
    ts: BigNumber;
  }
>;

export class VeSumer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VeSumerInterface;

  functions: {
    CHECKPOINT_ONLY(overrides?: CallOverrides): Promise<[BigNumber]>;

    CREATE_LOCK_TYPE(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEPOSIT_FOR_TYPE(overrides?: CallOverrides): Promise<[BigNumber]>;

    INCREASE_LOCK_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    INCREASE_UNLOCK_TIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAXTIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAXTIME_I128(overrides?: CallOverrides): Promise<[BigNumber]>;

    MULTIPLIER(overrides?: CallOverrides): Promise<[BigNumber]>;

    PROXY_ADD(overrides?: CallOverrides): Promise<[BigNumber]>;

    PROXY_SLASH(overrides?: CallOverrides): Promise<[BigNumber]>;

    TRANSFER_FROM_APP(overrides?: CallOverrides): Promise<[BigNumber]>;

    TRANSFER_TO_APP(overrides?: CallOverrides): Promise<[BigNumber]>;

    USER_WITHDRAW(overrides?: CallOverrides): Promise<[BigNumber]>;

    VOTE_WEIGHT_MULTIPLIER(overrides?: CallOverrides): Promise<[BigNumber]>;

    VOTE_WEIGHT_MULTIPLIER_I128(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    WEEK(overrides?: CallOverrides): Promise<[BigNumber]>;

    ZERO_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    accept_transfer_ownership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    appIncreaseAmountForsEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    appTransferFromsEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    appTransferTosEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    apply_smart_wallet_checker(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "balanceOf(address,uint256)"(
      addr: string,
      _t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOf(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfAt(
      addr: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    checkpoint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkpoint_user(
      _staker_addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    commit_smart_wallet_checker(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    create_lock(
      _value: BigNumberish,
      _unlock_time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    curr_period_start(overrides?: CallOverrides): Promise<[BigNumber]>;

    current_proxy(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit_for(
      _addr: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyUnlockActive(overrides?: CallOverrides): Promise<[boolean]>;

    epoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    future_admin(overrides?: CallOverrides): Promise<[string]>;

    future_smart_wallet_checker(overrides?: CallOverrides): Promise<[string]>;

    get_last_point(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          bias: BigNumber;
          slope: BigNumber;
          ts: BigNumber;
          blk: BigNumber;
          sumer_amt: BigNumber;
        }
      ]
    >;

    get_last_user_bias(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    get_last_user_point(
      addr: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          bias: BigNumber;
          slope: BigNumber;
          ts: BigNumber;
          blk: BigNumber;
          sumer_amt: BigNumber;
        }
      ]
    >;

    get_last_user_slope(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    historical_proxies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    increase_amount(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increase_amount_for(
      _staker_addr: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increase_unlock_time(
      _unlock_time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    locked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; end: BigNumber }>;

    locked__amount(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    locked__end(_addr: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    next_period_start(overrides?: CallOverrides): Promise<[BigNumber]>;

    nominate_ownership(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    point_history(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        bias: BigNumber;
        slope: BigNumber;
        ts: BigNumber;
        blk: BigNumber;
        sumer_amt: BigNumber;
      }
    >;

    proxyAddsEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    proxySlashesEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    proxy_add(
      _staker_addr: string,
      _add_amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proxy_slash(
      _staker_addr: string,
      _slash_amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    recoverERC20(
      token_addr: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    slope_changes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    smart_wallet_checker(overrides?: CallOverrides): Promise<[string]>;

    staker_whitelisted_proxy(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    supply(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply(uint256)"(
      t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalSupplyAt(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transfer_from_app(
      _staker_addr: string,
      _app_addr: string,
      _transfer_amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    user_point_epoch(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    user_point_history(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        bias: BigNumber;
        slope: BigNumber;
        ts: BigNumber;
        blk: BigNumber;
        sumer_amt: BigNumber;
      }
    >;

    user_point_history__ts(
      _addr: string,
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    user_proxy_balance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    version(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  CHECKPOINT_ONLY(overrides?: CallOverrides): Promise<BigNumber>;

  CREATE_LOCK_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

  DEPOSIT_FOR_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

  INCREASE_LOCK_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  INCREASE_UNLOCK_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  MAXTIME(overrides?: CallOverrides): Promise<BigNumber>;

  MAXTIME_I128(overrides?: CallOverrides): Promise<BigNumber>;

  MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

  PROXY_ADD(overrides?: CallOverrides): Promise<BigNumber>;

  PROXY_SLASH(overrides?: CallOverrides): Promise<BigNumber>;

  TRANSFER_FROM_APP(overrides?: CallOverrides): Promise<BigNumber>;

  TRANSFER_TO_APP(overrides?: CallOverrides): Promise<BigNumber>;

  USER_WITHDRAW(overrides?: CallOverrides): Promise<BigNumber>;

  VOTE_WEIGHT_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

  VOTE_WEIGHT_MULTIPLIER_I128(overrides?: CallOverrides): Promise<BigNumber>;

  WEEK(overrides?: CallOverrides): Promise<BigNumber>;

  ZERO_ADDRESS(overrides?: CallOverrides): Promise<string>;

  accept_transfer_ownership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  appIncreaseAmountForsEnabled(overrides?: CallOverrides): Promise<boolean>;

  appTransferFromsEnabled(overrides?: CallOverrides): Promise<boolean>;

  appTransferTosEnabled(overrides?: CallOverrides): Promise<boolean>;

  apply_smart_wallet_checker(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "balanceOf(address,uint256)"(
    addr: string,
    _t: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOf(address)"(
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfAt(
    addr: string,
    _block: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  checkpoint(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkpoint_user(
    _staker_addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  commit_smart_wallet_checker(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  create_lock(
    _value: BigNumberish,
    _unlock_time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  curr_period_start(overrides?: CallOverrides): Promise<BigNumber>;

  current_proxy(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<BigNumber>;

  deposit_for(
    _addr: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyUnlockActive(overrides?: CallOverrides): Promise<boolean>;

  epoch(overrides?: CallOverrides): Promise<BigNumber>;

  future_admin(overrides?: CallOverrides): Promise<string>;

  future_smart_wallet_checker(overrides?: CallOverrides): Promise<string>;

  get_last_point(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      bias: BigNumber;
      slope: BigNumber;
      ts: BigNumber;
      blk: BigNumber;
      sumer_amt: BigNumber;
    }
  >;

  get_last_user_bias(
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  get_last_user_point(
    addr: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      bias: BigNumber;
      slope: BigNumber;
      ts: BigNumber;
      blk: BigNumber;
      sumer_amt: BigNumber;
    }
  >;

  get_last_user_slope(
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  historical_proxies(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  increase_amount(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increase_amount_for(
    _staker_addr: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increase_unlock_time(
    _unlock_time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  locked(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; end: BigNumber }>;

  locked__amount(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

  locked__end(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  next_period_start(overrides?: CallOverrides): Promise<BigNumber>;

  nominate_ownership(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  point_history(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      bias: BigNumber;
      slope: BigNumber;
      ts: BigNumber;
      blk: BigNumber;
      sumer_amt: BigNumber;
    }
  >;

  proxyAddsEnabled(overrides?: CallOverrides): Promise<boolean>;

  proxySlashesEnabled(overrides?: CallOverrides): Promise<boolean>;

  proxy_add(
    _staker_addr: string,
    _add_amt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proxy_slash(
    _staker_addr: string,
    _slash_amt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  recoverERC20(
    token_addr: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  slope_changes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  smart_wallet_checker(overrides?: CallOverrides): Promise<string>;

  staker_whitelisted_proxy(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  supply(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply(uint256)"(
    t: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalSupplyAt(
    _block: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transfer_from_app(
    _staker_addr: string,
    _app_addr: string,
    _transfer_amt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  user_point_epoch(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  user_point_history(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      bias: BigNumber;
      slope: BigNumber;
      ts: BigNumber;
      blk: BigNumber;
      sumer_amt: BigNumber;
    }
  >;

  user_point_history__ts(
    _addr: string,
    _idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  user_proxy_balance(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  version(overrides?: CallOverrides): Promise<string>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CHECKPOINT_ONLY(overrides?: CallOverrides): Promise<BigNumber>;

    CREATE_LOCK_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    DEPOSIT_FOR_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    INCREASE_LOCK_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    INCREASE_UNLOCK_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    MAXTIME(overrides?: CallOverrides): Promise<BigNumber>;

    MAXTIME_I128(overrides?: CallOverrides): Promise<BigNumber>;

    MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    PROXY_ADD(overrides?: CallOverrides): Promise<BigNumber>;

    PROXY_SLASH(overrides?: CallOverrides): Promise<BigNumber>;

    TRANSFER_FROM_APP(overrides?: CallOverrides): Promise<BigNumber>;

    TRANSFER_TO_APP(overrides?: CallOverrides): Promise<BigNumber>;

    USER_WITHDRAW(overrides?: CallOverrides): Promise<BigNumber>;

    VOTE_WEIGHT_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    VOTE_WEIGHT_MULTIPLIER_I128(overrides?: CallOverrides): Promise<BigNumber>;

    WEEK(overrides?: CallOverrides): Promise<BigNumber>;

    ZERO_ADDRESS(overrides?: CallOverrides): Promise<string>;

    accept_transfer_ownership(overrides?: CallOverrides): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    appIncreaseAmountForsEnabled(overrides?: CallOverrides): Promise<boolean>;

    appTransferFromsEnabled(overrides?: CallOverrides): Promise<boolean>;

    appTransferTosEnabled(overrides?: CallOverrides): Promise<boolean>;

    apply_smart_wallet_checker(overrides?: CallOverrides): Promise<void>;

    "balanceOf(address,uint256)"(
      addr: string,
      _t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfAt(
      addr: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkpoint(overrides?: CallOverrides): Promise<void>;

    checkpoint_user(
      _staker_addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    commit_smart_wallet_checker(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    create_lock(
      _value: BigNumberish,
      _unlock_time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    curr_period_start(overrides?: CallOverrides): Promise<BigNumber>;

    current_proxy(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    deposit_for(
      _addr: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyUnlockActive(overrides?: CallOverrides): Promise<boolean>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    future_admin(overrides?: CallOverrides): Promise<string>;

    future_smart_wallet_checker(overrides?: CallOverrides): Promise<string>;

    get_last_point(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        bias: BigNumber;
        slope: BigNumber;
        ts: BigNumber;
        blk: BigNumber;
        sumer_amt: BigNumber;
      }
    >;

    get_last_user_bias(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_last_user_point(
      addr: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        bias: BigNumber;
        slope: BigNumber;
        ts: BigNumber;
        blk: BigNumber;
        sumer_amt: BigNumber;
      }
    >;

    get_last_user_slope(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    historical_proxies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increase_amount(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    increase_amount_for(
      _staker_addr: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    increase_unlock_time(
      _unlock_time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    locked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; end: BigNumber }>;

    locked__amount(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    locked__end(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    next_period_start(overrides?: CallOverrides): Promise<BigNumber>;

    nominate_ownership(addr: string, overrides?: CallOverrides): Promise<void>;

    point_history(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        bias: BigNumber;
        slope: BigNumber;
        ts: BigNumber;
        blk: BigNumber;
        sumer_amt: BigNumber;
      }
    >;

    proxyAddsEnabled(overrides?: CallOverrides): Promise<boolean>;

    proxySlashesEnabled(overrides?: CallOverrides): Promise<boolean>;

    proxy_add(
      _staker_addr: string,
      _add_amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    proxy_slash(
      _staker_addr: string,
      _slash_amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    recoverERC20(
      token_addr: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    slope_changes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    smart_wallet_checker(overrides?: CallOverrides): Promise<string>;

    staker_whitelisted_proxy(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    supply(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply(uint256)"(
      t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupplyAt(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer_from_app(
      _staker_addr: string,
      _app_addr: string,
      _transfer_amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    user_point_epoch(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    user_point_history(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        bias: BigNumber;
        slope: BigNumber;
        ts: BigNumber;
        blk: BigNumber;
        sumer_amt: BigNumber;
      }
    >;

    user_point_history__ts(
      _addr: string,
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    user_proxy_balance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<string>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AcceptOwnership(address)"(
      admin?: null
    ): TypedEventFilter<[string], { admin: string }>;

    AcceptOwnership(
      admin?: null
    ): TypedEventFilter<[string], { admin: string }>;

    "AppIncreaseAmountForsToggled(bool)"(
      appIncreaseAmountForsEnabled?: null
    ): TypedEventFilter<[boolean], { appIncreaseAmountForsEnabled: boolean }>;

    AppIncreaseAmountForsToggled(
      appIncreaseAmountForsEnabled?: null
    ): TypedEventFilter<[boolean], { appIncreaseAmountForsEnabled: boolean }>;

    "Deposit(address,address,uint256,uint256,int128,uint256)"(
      provider?: string | null,
      payer_addr?: string | null,
      value?: null,
      locktime?: BigNumberish | null,
      _type?: null,
      ts?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        provider: string;
        payer_addr: string;
        value: BigNumber;
        locktime: BigNumber;
        _type: BigNumber;
        ts: BigNumber;
      }
    >;

    Deposit(
      provider?: string | null,
      payer_addr?: string | null,
      value?: null,
      locktime?: BigNumberish | null,
      _type?: null,
      ts?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        provider: string;
        payer_addr: string;
        value: BigNumber;
        locktime: BigNumber;
        _type: BigNumber;
        ts: BigNumber;
      }
    >;

    "EmergencyUnlockToggled(bool)"(
      emergencyUnlockActive?: null
    ): TypedEventFilter<[boolean], { emergencyUnlockActive: boolean }>;

    EmergencyUnlockToggled(
      emergencyUnlockActive?: null
    ): TypedEventFilter<[boolean], { emergencyUnlockActive: boolean }>;

    "HistoricalProxyToggled(address,bool)"(
      proxy_address?: null,
      enabled?: null
    ): TypedEventFilter<
      [string, boolean],
      { proxy_address: string; enabled: boolean }
    >;

    HistoricalProxyToggled(
      proxy_address?: null,
      enabled?: null
    ): TypedEventFilter<
      [string, boolean],
      { proxy_address: string; enabled: boolean }
    >;

    "LendingProxySet(address)"(
      proxy_address?: null
    ): TypedEventFilter<[string], { proxy_address: string }>;

    LendingProxySet(
      proxy_address?: null
    ): TypedEventFilter<[string], { proxy_address: string }>;

    "NominateOwnership(address)"(
      admin?: null
    ): TypedEventFilter<[string], { admin: string }>;

    NominateOwnership(
      admin?: null
    ): TypedEventFilter<[string], { admin: string }>;

    "ProxyAdd(address,address,uint256)"(
      staker_addr?: string | null,
      proxy_addr?: string | null,
      add_amt?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { staker_addr: string; proxy_addr: string; add_amt: BigNumber }
    >;

    ProxyAdd(
      staker_addr?: string | null,
      proxy_addr?: string | null,
      add_amt?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { staker_addr: string; proxy_addr: string; add_amt: BigNumber }
    >;

    "ProxyAddsToggled(bool)"(
      proxyAddsEnabled?: null
    ): TypedEventFilter<[boolean], { proxyAddsEnabled: boolean }>;

    ProxyAddsToggled(
      proxyAddsEnabled?: null
    ): TypedEventFilter<[boolean], { proxyAddsEnabled: boolean }>;

    "ProxySlash(address,address,uint256)"(
      staker_addr?: string | null,
      proxy_addr?: string | null,
      slash_amt?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { staker_addr: string; proxy_addr: string; slash_amt: BigNumber }
    >;

    ProxySlash(
      staker_addr?: string | null,
      proxy_addr?: string | null,
      slash_amt?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { staker_addr: string; proxy_addr: string; slash_amt: BigNumber }
    >;

    "ProxySlashesToggled(bool)"(
      proxySlashesEnabled?: null
    ): TypedEventFilter<[boolean], { proxySlashesEnabled: boolean }>;

    ProxySlashesToggled(
      proxySlashesEnabled?: null
    ): TypedEventFilter<[boolean], { proxySlashesEnabled: boolean }>;

    "ProxyTransferFromsToggled(bool)"(
      appTransferFromsEnabled?: null
    ): TypedEventFilter<[boolean], { appTransferFromsEnabled: boolean }>;

    ProxyTransferFromsToggled(
      appTransferFromsEnabled?: null
    ): TypedEventFilter<[boolean], { appTransferFromsEnabled: boolean }>;

    "ProxyTransferTosToggled(bool)"(
      appTransferTosEnabled?: null
    ): TypedEventFilter<[boolean], { appTransferTosEnabled: boolean }>;

    ProxyTransferTosToggled(
      appTransferTosEnabled?: null
    ): TypedEventFilter<[boolean], { appTransferTosEnabled: boolean }>;

    "SmartWalletCheckerApplied(address)"(
      smart_wallet_checker?: null
    ): TypedEventFilter<[string], { smart_wallet_checker: string }>;

    SmartWalletCheckerApplied(
      smart_wallet_checker?: null
    ): TypedEventFilter<[string], { smart_wallet_checker: string }>;

    "SmartWalletCheckerComitted(address)"(
      future_smart_wallet_checker?: null
    ): TypedEventFilter<[string], { future_smart_wallet_checker: string }>;

    SmartWalletCheckerComitted(
      future_smart_wallet_checker?: null
    ): TypedEventFilter<[string], { future_smart_wallet_checker: string }>;

    "StakerProxySet(address)"(
      proxy_address?: null
    ): TypedEventFilter<[string], { proxy_address: string }>;

    StakerProxySet(
      proxy_address?: null
    ): TypedEventFilter<[string], { proxy_address: string }>;

    "Supply(uint256,uint256)"(
      prevSupply?: null,
      supply?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { prevSupply: BigNumber; supply: BigNumber }
    >;

    Supply(
      prevSupply?: null,
      supply?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { prevSupply: BigNumber; supply: BigNumber }
    >;

    "TransferFromApp(address,address,uint256)"(
      app_addr?: string | null,
      staker_addr?: string | null,
      transfer_amt?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { app_addr: string; staker_addr: string; transfer_amt: BigNumber }
    >;

    TransferFromApp(
      app_addr?: string | null,
      staker_addr?: string | null,
      transfer_amt?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { app_addr: string; staker_addr: string; transfer_amt: BigNumber }
    >;

    "TransferToApp(address,address,uint256)"(
      staker_addr?: string | null,
      app_addr?: string | null,
      transfer_amt?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { staker_addr: string; app_addr: string; transfer_amt: BigNumber }
    >;

    TransferToApp(
      staker_addr?: string | null,
      app_addr?: string | null,
      transfer_amt?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { staker_addr: string; app_addr: string; transfer_amt: BigNumber }
    >;

    "Withdraw(address,address,uint256,uint256)"(
      provider?: string | null,
      to_addr?: string | null,
      value?: null,
      ts?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { provider: string; to_addr: string; value: BigNumber; ts: BigNumber }
    >;

    Withdraw(
      provider?: string | null,
      to_addr?: string | null,
      value?: null,
      ts?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { provider: string; to_addr: string; value: BigNumber; ts: BigNumber }
    >;
  };

  estimateGas: {
    CHECKPOINT_ONLY(overrides?: CallOverrides): Promise<BigNumber>;

    CREATE_LOCK_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    DEPOSIT_FOR_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    INCREASE_LOCK_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    INCREASE_UNLOCK_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    MAXTIME(overrides?: CallOverrides): Promise<BigNumber>;

    MAXTIME_I128(overrides?: CallOverrides): Promise<BigNumber>;

    MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    PROXY_ADD(overrides?: CallOverrides): Promise<BigNumber>;

    PROXY_SLASH(overrides?: CallOverrides): Promise<BigNumber>;

    TRANSFER_FROM_APP(overrides?: CallOverrides): Promise<BigNumber>;

    TRANSFER_TO_APP(overrides?: CallOverrides): Promise<BigNumber>;

    USER_WITHDRAW(overrides?: CallOverrides): Promise<BigNumber>;

    VOTE_WEIGHT_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    VOTE_WEIGHT_MULTIPLIER_I128(overrides?: CallOverrides): Promise<BigNumber>;

    WEEK(overrides?: CallOverrides): Promise<BigNumber>;

    ZERO_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    accept_transfer_ownership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    appIncreaseAmountForsEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    appTransferFromsEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    appTransferTosEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    apply_smart_wallet_checker(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "balanceOf(address,uint256)"(
      addr: string,
      _t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfAt(
      addr: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkpoint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkpoint_user(
      _staker_addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    commit_smart_wallet_checker(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    create_lock(
      _value: BigNumberish,
      _unlock_time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    curr_period_start(overrides?: CallOverrides): Promise<BigNumber>;

    current_proxy(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    deposit_for(
      _addr: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyUnlockActive(overrides?: CallOverrides): Promise<BigNumber>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    future_admin(overrides?: CallOverrides): Promise<BigNumber>;

    future_smart_wallet_checker(overrides?: CallOverrides): Promise<BigNumber>;

    get_last_point(overrides?: CallOverrides): Promise<BigNumber>;

    get_last_user_bias(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_last_user_point(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_last_user_slope(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    historical_proxies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increase_amount(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increase_amount_for(
      _staker_addr: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increase_unlock_time(
      _unlock_time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    locked(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    locked__amount(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    locked__end(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    next_period_start(overrides?: CallOverrides): Promise<BigNumber>;

    nominate_ownership(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    point_history(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxyAddsEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    proxySlashesEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    proxy_add(
      _staker_addr: string,
      _add_amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proxy_slash(
      _staker_addr: string,
      _slash_amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    recoverERC20(
      token_addr: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    slope_changes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    smart_wallet_checker(overrides?: CallOverrides): Promise<BigNumber>;

    staker_whitelisted_proxy(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supply(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply(uint256)"(
      t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupplyAt(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer_from_app(
      _staker_addr: string,
      _app_addr: string,
      _transfer_amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    user_point_epoch(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    user_point_history(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    user_point_history__ts(
      _addr: string,
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    user_proxy_balance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CHECKPOINT_ONLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CREATE_LOCK_TYPE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEPOSIT_FOR_TYPE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INCREASE_LOCK_AMOUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INCREASE_UNLOCK_TIME(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAXTIME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAXTIME_I128(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MULTIPLIER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PROXY_ADD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PROXY_SLASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TRANSFER_FROM_APP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TRANSFER_TO_APP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USER_WITHDRAW(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VOTE_WEIGHT_MULTIPLIER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VOTE_WEIGHT_MULTIPLIER_I128(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WEEK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ZERO_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accept_transfer_ownership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    appIncreaseAmountForsEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    appTransferFromsEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    appTransferTosEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    apply_smart_wallet_checker(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "balanceOf(address,uint256)"(
      addr: string,
      _t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfAt(
      addr: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkpoint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkpoint_user(
      _staker_addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    commit_smart_wallet_checker(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    create_lock(
      _value: BigNumberish,
      _unlock_time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    curr_period_start(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    current_proxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit_for(
      _addr: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyUnlockActive(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    future_admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    future_smart_wallet_checker(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_last_point(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get_last_user_bias(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_last_user_point(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_last_user_slope(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    historical_proxies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increase_amount(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increase_amount_for(
      _staker_addr: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increase_unlock_time(
      _unlock_time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    locked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    locked__amount(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    locked__end(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    next_period_start(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nominate_ownership(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    point_history(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxyAddsEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxySlashesEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxy_add(
      _staker_addr: string,
      _add_amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proxy_slash(
      _staker_addr: string,
      _slash_amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    recoverERC20(
      token_addr: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    slope_changes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    smart_wallet_checker(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    staker_whitelisted_proxy(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply(uint256)"(
      t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupplyAt(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transfer_from_app(
      _staker_addr: string,
      _app_addr: string,
      _transfer_amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    user_point_epoch(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    user_point_history(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    user_point_history__ts(
      _addr: string,
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    user_proxy_balance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
