/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Multicall2, Multicall2Interface } from "../Multicall2";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes[]",
        name: "returnData",
        type: "bytes[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "blockAndAggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    name: "getBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBlockNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockCoinbase",
    outputs: [
      {
        internalType: "address",
        name: "coinbase",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockDifficulty",
    outputs: [
      {
        internalType: "uint256",
        name: "difficulty",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockGasLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "gaslimit",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getEthBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "requireSuccess",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "tryAggregate",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "requireSuccess",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "tryBlockAndAggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608080604052346100165761095b908161001c8239f35b600080fdfe608060408181526004908136101561001657600080fd5b600092833560e01c9081630f28c97d146104e557508063252dba421461036857806327e86d6e1461032a578063399542e91461030557806342cbb15c146102ea5780634d2301cc146102ba57806372425d9d1461029f57806386d516e814610284578063a8b0574e14610269578063bce38bd714610235578063c3077fa9146100c95763ee82ac5e146100a857600080fd5b346100c55760203660031901126100c55760209250519035408152f35b8280fd5b50346100c5576020908160031936011261023157823567ffffffffffffffff811161022d576100fb903690850161058f565b9283519461011061010b8761055b565b610535565b95808752610120601f199161055b565b0184825b82811061020e57505050805b85518110156101f95781806001600160a01b0361014d848a6107aa565b5151168761015b858b6107aa565b51015190828983519301915af16101706107d4565b90156101ac57906101a7916101836104ff565b906001825287820152610196828a6107aa565b526101a181896107aa565b50610785565b610130565b845162461bcd60e51b8152808501879052602160248201527f4d756c746963616c6c32206167677265676174653a2063616c6c206661696c656044820152601960fa1b6064820152608490fd5b83518061020a894380409084610769565b0390f35b6102166104ff565b84815260608382015282828b010152018590610124565b8480fd5b8380fd5b8382346102655761020a9061025261024c366106bd565b906107fa565b90519182916020835260208301906106f9565b5080fd5b83823461026557816003193601126102655760209051418152f35b83823461026557816003193601126102655760209051458152f35b83823461026557816003193601126102655760209051448152f35b5090346100c55760203660031901126100c557356001600160a01b03811681036100c55760209250319051908152f35b83823461026557816003193601126102655760209051438152f35b8382346102655761020a9061031c61024c366106bd565b905191829143404384610769565b5082903461026557816003193601126102655760001943019143831161035557602083835190408152f35b634e487b7160e01b815260118452602490fd5b5091346104e25760208060031936011261026557823567ffffffffffffffff81116100c55761039a903690850161058f565b928351926103aa61010b8561055b565b938085526103ba601f199161055b565b0183825b8281106104d257505050805b85518110156104705781806001600160a01b036103e7848a6107aa565b515116866103f5858b6107aa565b51015190828883519301915af161040a6107d4565b901561042f579061042a9161041f82886107aa565b526101a181876107aa565b6103ca565b60648486808b519262461bcd60e51b845283015260248201527f4d756c746963616c6c206167677265676174653a2063616c6c206661696c65646044820152fd5b50855143815283810187905284518188018190526060600582901b830181019187870191879085015b8287106104a65785850386f35b9091929382806104c2600193605f198a8203018652885161067d565b9601920196019592919092610499565b60608282890101520184906103be565b80fd5b849034610265578160031936011261026557602090428152f35b604051906040820182811067ffffffffffffffff82111761051f57604052565b634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f1916820167ffffffffffffffff81118382101761051f57604052565b67ffffffffffffffff811161051f5760051b60200190565b67ffffffffffffffff811161051f57601f01601f191660200190565b81601f82011215610678578035916105a961010b8461055b565b9182938084526020808095019160051b8301019280841161067857848301915b8483106105d95750505050505090565b67ffffffffffffffff9083358281116106785785019060409283601f198487030112610678576106076104ff565b92898101356001600160a01b03811681036106785784528481013591821161067857019184603f8401121561067857888301359261064761010b85610573565b9084825286868683010111610678578a858197968297600094018386013783010152838201528152019201916105c9565b600080fd5b919082519283825260005b8481106106a9575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610688565b90604060031983011261067857600435801515810361067857916024359067ffffffffffffffff8211610678576106f69160040161058f565b90565b908082519081815260208091019281808460051b8301019501936000915b8483106107275750505050505090565b9091929394958480610759600193601f19868203018752828b518051151583520151906040908185820152019061067d565b9801930193019194939290610717565b6106f693926060928252602082015281604082015201906106f9565b60001981146107945760010190565b634e487b7160e01b600052601160045260246000fd5b80518210156107be5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b3d156107f5573d906107e861010b83610573565b9182523d6000602084013e565b606090565b91909182519061080c61010b8361055b565b9180835261081c601f199161055b565b0160005b8181106109045750508160005b85518110156108fd576001600160a01b0361084882886107aa565b515116836000806020938461085d878d6107aa565b51015190828683519301915af1916108736107d4565b916108aa575b906108a59392916108886104ff565b921515835282015261089a82876107aa565b526101a181866107aa565b61082d565b82610879576084906040519062461bcd60e51b82526004820152602160248201527f4d756c746963616c6c32206167677265676174653a2063616c6c206661696c656044820152601960fa1b6064820152fd5b5093505050565b60209061090f6104ff565b600081528260608183015282870101520161082056fea26469706673582212204325905a51a850de230aac42e90dd87d7be08584c9ecdf1b3cf7532843b60a4764736f6c63430008130033";

export class Multicall2__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Multicall2> {
    return super.deploy(overrides || {}) as Promise<Multicall2>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Multicall2 {
    return super.attach(address) as Multicall2;
  }
  connect(signer: Signer): Multicall2__factory {
    return super.connect(signer) as Multicall2__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Multicall2Interface {
    return new utils.Interface(_abi) as Multicall2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Multicall2 {
    return new Contract(address, _abi, signerOrProvider) as Multicall2;
  }
}
