/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Multicall2, Multicall2Interface } from "../Multicall2";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes[]",
        name: "returnData",
        type: "bytes[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "blockAndAggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    name: "getBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBlockNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockCoinbase",
    outputs: [
      {
        internalType: "address",
        name: "coinbase",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockDifficulty",
    outputs: [
      {
        internalType: "uint256",
        name: "difficulty",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockGasLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "gaslimit",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getEthBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "requireSuccess",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "tryAggregate",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "requireSuccess",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "tryBlockAndAggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610908806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a45760003560e01c80630f28c97d146100a9578063252dba42146100c757806327e86d6e146100e8578063399542e9146100f057806342cbb15c146101125780634d2301cc1461011a57806372425d9d1461012d57806386d516e814610135578063a8b0574e1461013d578063bce38bd714610152578063c3077fa914610172578063ee82ac5e14610185575b600080fd5b6100b1610198565b6040516100be9190610770565b60405180910390f35b6100da6100d53660046105f2565b61019c565b6040516100be9291906107ef565b6100b16102d9565b6101036100fe36600461062c565b6102e2565b6040516100be93929190610857565b6100b16102fa565b6100b16101283660046105d1565b6102fe565b6100b161030b565b6100b161030f565b610145610313565b6040516100be9190610749565b61016561016036600461062c565b610317565b6040516100be919061075d565b6101036101803660046105f2565b61046b565b6100b161019336600461067d565b610488565b4290565b805143906060906001600160401b03811180156101b857600080fd5b506040519080825280602002602001820160405280156101ec57816020015b60608152602001906001900390816101d75790505b50905060005b83518110156102d35760008085838151811061020a57fe5b6020026020010151600001516001600160a01b031686848151811061022b57fe5b602002602001015160200151604051610244919061072d565b6000604051808303816000865af19150503d8060008114610281576040519150601f19603f3d011682016040523d82523d6000602084013e610286565b606091505b5091509150816102b15760405162461bcd60e51b81526004016102a8906107ba565b60405180910390fd5b808484815181106102be57fe5b602090810291909101015250506001016101f2565b50915091565b60001943014090565b43804060606102f18585610317565b90509250925092565b4390565b6001600160a01b03163190565b4490565b4590565b4190565b606081516001600160401b038111801561033057600080fd5b5060405190808252806020026020018201604052801561036a57816020015b61035761048c565b81526020019060019003908161034f5790505b50905060005b82518110156104645760008084838151811061038857fe5b6020026020010151600001516001600160a01b03168584815181106103a957fe5b6020026020010151602001516040516103c2919061072d565b6000604051808303816000865af19150503d80600081146103ff576040519150601f19603f3d011682016040523d82523d6000602084013e610404565b606091505b5091509150851561042c578161042c5760405162461bcd60e51b81526004016102a890610779565b604051806040016040528083151581526020018281525084848151811061044f57fe5b60209081029190910101525050600101610370565b5092915050565b600080606061047b6001856102e2565b9196909550909350915050565b4090565b60408051808201909152600081526060602082015290565b80356001600160a01b03811681146104bb57600080fd5b919050565b600082601f8301126104d0578081fd5b813560206001600160401b03808311156104e657fe5b6104f3828385020161087f565b83815282810190868401865b868110156105c357813589016040601f198181848f03011215610520578a8bfd5b81518281018181108a8211171561053357fe5b8352610540848b016104a4565b81528284013589811115610552578c8dfd5b8085019450508d603f850112610566578b8cfd5b898401358981111561057457fe5b6105848b84601f8401160161087f565b92508083528e84828701011115610599578c8dfd5b808486018c85013782018a018c9052808a01919091528652505092850192908501906001016104ff565b509098975050505050505050565b6000602082840312156105e2578081fd5b6105eb826104a4565b9392505050565b600060208284031215610603578081fd5b81356001600160401b03811115610618578182fd5b610624848285016104c0565b949350505050565b6000806040838503121561063e578081fd5b8235801515811461064d578182fd5b915060208301356001600160401b03811115610667578182fd5b610673858286016104c0565b9150509250929050565b60006020828403121561068e578081fd5b5035919050565b60008282518085526020808601955080818302840101818601855b848110156106f457858303601f19018952815180511515845284015160408585018190526106e081860183610701565b9a86019a94505050908301906001016106b0565b5090979650505050505050565b600081518084526107198160208601602086016108a2565b601f01601f19169290920160200192915050565b6000825161073f8184602087016108a2565b9190910192915050565b6001600160a01b0391909116815260200190565b6000602082526105eb6020830184610695565b90815260200190565b60208082526021908201527f4d756c746963616c6c32206167677265676174653a2063616c6c206661696c656040820152601960fa1b606082015260800190565b6020808252818101527f4d756c746963616c6c206167677265676174653a2063616c6c206661696c6564604082015260600190565b600060408201848352602060408185015281855180845260608601915060608382028701019350828701855b8281101561084957605f19888703018452610837868351610701565b9550928401929084019060010161081b565b509398975050505050505050565b6000848252836020830152606060408301526108766060830184610695565b95945050505050565b6040518181016001600160401b038111828210171561089a57fe5b604052919050565b60005b838110156108bd5781810151838201526020016108a5565b838111156108cc576000848401525b5050505056fea2646970667358221220ef236ea1f6a027ec0a8723cb828a5010a8849c03b2e153af5989d7d4b9b05dbd64736f6c63430007060033";

export class Multicall2__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Multicall2> {
    return super.deploy(overrides || {}) as Promise<Multicall2>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Multicall2 {
    return super.attach(address) as Multicall2;
  }
  connect(signer: Signer): Multicall2__factory {
    return super.connect(signer) as Multicall2__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Multicall2Interface {
    return new utils.Interface(_abi) as Multicall2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Multicall2 {
    return new Contract(address, _abi, signerOrProvider) as Multicall2;
  }
}
