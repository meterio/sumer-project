/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  JumpRateModelV2,
  JumpRateModelV2Interface,
} from "../JumpRateModelV2";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blocksPerYearOnChain",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "baseRatePerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "multiplierPerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "jumpMultiplierPerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "kink_",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "owner_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "baseRatePerBlock",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "multiplierPerBlock",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "jumpMultiplierPerBlock",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "kink",
        type: "uint256",
      },
    ],
    name: "NewInterestParams",
    type: "event",
  },
  {
    inputs: [],
    name: "baseRatePerBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "blocksPerYear",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "cash",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "borrows",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserves",
        type: "uint256",
      },
    ],
    name: "getBorrowRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "cash",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "borrows",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserves",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserveFactorMantissa",
        type: "uint256",
      },
    ],
    name: "getSupplyRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isInterestRateModel",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "jumpMultiplierPerBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "kink",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "multiplierPerBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "baseRatePerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "multiplierPerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "jumpMultiplierPerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "kink_",
        type: "uint256",
      },
    ],
    name: "updateJumpRateModel",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "cash",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "borrows",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserves",
        type: "uint256",
      },
    ],
    name: "utilizationRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610a59380380610a59833981810160405260c081101561003357600080fd5b50805160208201516040830151606084015160808086015160a090960151600080546001600160a01b0319166001600160a01b03831617905590859052939492939192909185858585858561008b868686868661009c565b5050505050505050505050506102c3565b6100b3858561017760201b6103581790919060201c565b6002556100ff6100ce86836101c8602090811b6103a017901c565b6100ed670de0b6b3a7640000866101c860201b6103a01790919060201c565b61017760201b6103581790919060201c565b6001556101178286610177602090811b61035817901c565b60038190556004829055600254600154604080519283526020830191909152818101929092526060810183905290517f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d9181900360800190a15050505050565b60006101bf83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061022160201b60201c565b90505b92915050565b6000826101d7575060006101c2565b828202828482816101e457fe5b04146101bf5760405162461bcd60e51b8152600401808060200182810382526021815260200180610a386021913960400191505060405180910390fd5b600081836102ad5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561027257818101518382015260200161025a565b50505050905090810190601f16801561029f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816102b957fe5b0495945050505050565b6080516107566102e26000398061022f52806102b752506107566000f3fe608060405234801561001057600080fd5b50600436106100995760003560e01c806315f240531461009e5780632037f3e7146100d95780632191f92a1461010a5780636e71e2d8146101265780638726bb891461014f5780638da5cb5b14610157578063a385fb961461017b578063b816881614610183578063b9f9850a146101b2578063f14039de146101ba578063fd2da339146101c2575b600080fd5b6100c7600480360360608110156100b457600080fd5b50803590602081013590604001356101ca565b60408051918252519081900360200190f35b610108600480360360808110156100ef57600080fd5b50803590602081013590604081013590606001356101e1565b005b61011261025d565b604080519115158252519081900360200190f35b6100c76004803603606081101561013c57600080fd5b5080359060208101359060400135610262565b6100c76102a0565b61015f6102a6565b604080516001600160a01b039092168252519081900360200190f35b6100c76102b5565b6100c76004803603608081101561019957600080fd5b50803590602081013590604081013590606001356102d9565b6100c7610346565b6100c761034c565b6100c7610352565b60006101d78484846103f9565b90505b9392505050565b6000546001600160a01b0316331461022a5760405162461bcd60e51b81526004018080602001828103825260268152602001806106fb6026913960400191505060405180910390fd5b6102577f0000000000000000000000000000000000000000000000000000000000000000858585856104bc565b50505050565b600181565b600082610271575060006101da565b6101d7610288836102828787610543565b9061059b565b61029a85670de0b6b3a76400006103a0565b90610358565b60015481565b6000546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806102ee670de0b6b3a76400008461059b565b905060006102fd8787876103f9565b90506000610317670de0b6b3a764000061029a84866103a0565b905061033a670de0b6b3a764000061029a836103348c8c8c610262565b906103a0565b98975050505050505050565b60035481565b60025481565b60045481565b600061039783836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b8152506105dd565b90505b92915050565b6000826103af5750600061039a565b828202828482816103bc57fe5b04146103975760405162461bcd60e51b81526004018080602001828103825260218152602001806106da6021913960400191505060405180910390fd5b600080610407858585610262565b905060045481116104475761043f600254610439670de0b6b3a764000061029a600154866103a090919063ffffffff16565b90610543565b9150506101da565b6000610472600254610439670de0b6b3a764000061029a6001546004546103a090919063ffffffff16565b9050600061048b6004548461059b90919063ffffffff16565b90506104b282610439670de0b6b3a764000061029a600354866103a090919063ffffffff16565b93505050506101da565b6104c68486610358565b6002556104d661028886836103a0565b6001556104e38286610358565b60038190556004829055600254600154604080519283526020830191909152818101929092526060810183905290517f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d9181900360800190a15050505050565b600082820183811015610397576040805162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604482015290519081900360640190fd5b600061039783836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f770081525061067f565b600081836106695760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561062e578181015183820152602001610616565b50505050905090810190601f16801561065b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161067557fe5b0495945050505050565b600081848411156106d15760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561062e578181015183820152602001610616565b50505090039056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f776f6e6c7920746865206f776e6572206d61792063616c6c20746869732066756e6374696f6e2ea26469706673582212207cb420537ed8555cca852caf62824e2d7f6892df1c62d4e7adee1aa3ff85e68364736f6c63430007060033536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77";

export class JumpRateModelV2__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    blocksPerYearOnChain: BigNumberish,
    baseRatePerYear: BigNumberish,
    multiplierPerYear: BigNumberish,
    jumpMultiplierPerYear: BigNumberish,
    kink_: BigNumberish,
    owner_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<JumpRateModelV2> {
    return super.deploy(
      blocksPerYearOnChain,
      baseRatePerYear,
      multiplierPerYear,
      jumpMultiplierPerYear,
      kink_,
      owner_,
      overrides || {}
    ) as Promise<JumpRateModelV2>;
  }
  getDeployTransaction(
    blocksPerYearOnChain: BigNumberish,
    baseRatePerYear: BigNumberish,
    multiplierPerYear: BigNumberish,
    jumpMultiplierPerYear: BigNumberish,
    kink_: BigNumberish,
    owner_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      blocksPerYearOnChain,
      baseRatePerYear,
      multiplierPerYear,
      jumpMultiplierPerYear,
      kink_,
      owner_,
      overrides || {}
    );
  }
  attach(address: string): JumpRateModelV2 {
    return super.attach(address) as JumpRateModelV2;
  }
  connect(signer: Signer): JumpRateModelV2__factory {
    return super.connect(signer) as JumpRateModelV2__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): JumpRateModelV2Interface {
    return new utils.Interface(_abi) as JumpRateModelV2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): JumpRateModelV2 {
    return new Contract(address, _abi, signerOrProvider) as JumpRateModelV2;
  }
}
