/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ChainlinkFeedAdaptor_ETHToUSD,
  ChainlinkFeedAdaptor_ETHToUSDInterface,
} from "../../../contracts/Oracle/ChainlinkFeedAdaptor_ETHToUSD";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenFeed",
        type: "address",
      },
      {
        internalType: "address",
        name: "_ethFeed",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_decimals",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ethFeed",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundDataETH",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundDataToken",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenFeed",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60e0346100b657601f61093638819003918201601f19168301916001600160401b038311848410176100bb578084926060946040528339810103126100b657610047816100d1565b906040610056602083016100d1565b9101519160805260a05260c05260405161085090816100e6823960805181818160810152818161042e0152610557015260a051818181610153015281816101a80152818161048301526105f2015260c05181818161024301526106370152f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100b65756fe608080604052600436101561001357600080fd5b60003560e01c908163313ce56714610621575080635e19d05c146105dc578063b608f4ad14610531578063f6c631a61461045d578063f8ef7825146104185763feaf968c1461006157600080fd5b346104135760003660031901126104135760405163313ce56760e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316602082600481845afa90811561038c576004926000926103ef575b5060a09060405193848092633fabe5a360e21b82525afa90811561038c576000916000936000946000916000936103c7575b506101156001600160501b0386166001600160501b03851610156106f4565b6101216000821361072e565b620151808201821161032c5761013e620151808301421115610778565b60405163313ce56760e01b81526020816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa801561038c5760ff91600091610398575b50604051633fabe5a360e21b81529116919060a0816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa801561038c57600090600090600092600091610342575b610204929394506001600160501b03809116911610156107ae565b6102106000821361072e565b62015180820180921161032c5760ff9261022f61023493421115610778565b6107ec565b9416610240818361076b565b917f00000000000000000000000000000000000000000000000000000000000000008093116000146102e0579161027d610282926102879461076b565b6107ff565b61080c565b80156102ca576102c69304945b604080516001600160501b039687168152602081019790975286015260608501529091166080830152819060a0820190565b0390f35b634e487b7160e01b600052601260045260246000fd5b9091806102f0848499989961076b565b10610304575b5050506102c6929394610294565b6102826103239361027d6102c698999461031d946107ff565b906107ec565b939238806102f6565b634e487b7160e01b600052601160045260246000fd5b505050506001600160501b03610204610373829360a03d60a011610385575b61036b818361065a565b8101906106bf565b909650869550919350909190506101e9565b503d610361565b6040513d6000823e3d90fd5b6103ba915060203d6020116103c0575b6103b2818361065a565b810190610692565b3861018e565b503d6103a8565b9395505050506103e6915060a03d60a0116103855761036b818361065a565b919492386100f6565b60a091925061040c9060203d6020116103c0576103b2818361065a565b91906100c4565b600080fd5b34610413576000366003190112610413576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b3461041357600036600319011261041357604051633fabe5a360e21b815260a0816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561038c5760009060009260009160009060009261050a575b506104e16001600160501b0380861690841610156107ae565b6104ed6000861361072e565b6201518081019283821161032c576102946102c694421115610778565b9350505050610527915060a03d81116103855761036b818361065a565b92939290856104c8565b3461041357600036600319011261041357604051633fabe5a360e21b815260a0816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561038c576000906000926000916000906000926105b5575b506104e16001600160501b0380861690841610156106f4565b93505050506105d2915060a03d81116103855761036b818361065a565b929392908561059c565b34610413576000366003190112610413576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b34610413576000366003190112610413576020907f00000000000000000000000000000000000000000000000000000000000000008152f35b90601f8019910116810190811067ffffffffffffffff82111761067c57604052565b634e487b7160e01b600052604160045260246000fd5b90816020910312610413575160ff811681036104135790565b51906001600160501b038216820361041357565b908160a0910312610413576106d3816106ab565b916020820151916040810151916106f16080606084015193016106ab565b90565b156106fb57565b60405162461bcd60e51b815260206004820152600b60248201526a7374616c6520707269636560a81b6044820152606490fd5b1561073557565b60405162461bcd60e51b815260206004820152600e60248201526d6e6567617469766520707269636560901b6044820152606490fd5b9190820180921161032c57565b1561077f57565b60405162461bcd60e51b81526020600482015260076024820152661d1a5b595bdd5d60ca1b6044820152606490fd5b156107b557565b60405162461bcd60e51b815260206004820152600f60248201526e455448207374616c6520707269636560881b6044820152606490fd5b8181029291811591840414171561032c57565b9190820391821161032c57565b604d811161032c57600a0a9056fea2646970667358221220a4b007ca70ae2c6c8a9294906e3ff450e9db0d34ac4d01187d077affbcad558064736f6c63430008130033";

type ChainlinkFeedAdaptor_ETHToUSDConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ChainlinkFeedAdaptor_ETHToUSDConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ChainlinkFeedAdaptor_ETHToUSD__factory extends ContractFactory {
  constructor(...args: ChainlinkFeedAdaptor_ETHToUSDConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _tokenFeed: AddressLike,
    _ethFeed: AddressLike,
    _decimals: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _tokenFeed,
      _ethFeed,
      _decimals,
      overrides || {}
    );
  }
  override deploy(
    _tokenFeed: AddressLike,
    _ethFeed: AddressLike,
    _decimals: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _tokenFeed,
      _ethFeed,
      _decimals,
      overrides || {}
    ) as Promise<
      ChainlinkFeedAdaptor_ETHToUSD & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): ChainlinkFeedAdaptor_ETHToUSD__factory {
    return super.connect(runner) as ChainlinkFeedAdaptor_ETHToUSD__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ChainlinkFeedAdaptor_ETHToUSDInterface {
    return new Interface(_abi) as ChainlinkFeedAdaptor_ETHToUSDInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ChainlinkFeedAdaptor_ETHToUSD {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as ChainlinkFeedAdaptor_ETHToUSD;
  }
}
