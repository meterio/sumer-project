/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  TimeBasedJumpRateModel,
  TimeBasedJumpRateModelInterface,
} from "../../../contracts/InterestRateModel/TimeBasedJumpRateModel";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "baseRatePerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "multiplierPerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "jumpMultiplierPerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "kink_",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "baseRatePerTimestamp",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "multiplierPerTimestamp",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "jumpMultiplierPerTimestamp",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "kink",
        type: "uint256",
      },
    ],
    name: "NewInterestParams",
    type: "event",
  },
  {
    inputs: [],
    name: "baseRatePerTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "cash",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "borrows",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserves",
        type: "uint256",
      },
    ],
    name: "getBorrowRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "cash",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "borrows",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserves",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserveFactorMantissa",
        type: "uint256",
      },
    ],
    name: "getSupplyRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isInterestRateModel",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "jumpMultiplierPerTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "kink",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "multiplierPerTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "timestampsPerYear",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "cash",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "borrows",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserves",
        type: "uint256",
      },
    ],
    name: "utilizationRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60803461011057601f61048638819003918201601f19168301916001600160401b038311848410176101155780849260809460405283398101031261011057805190602081015160606040830151920151670de0b6b3a7640000808502948086048214901517156100fa57806301e13380809604049283600155818102908082048314901517156100fa5785829104049081600055808502948086048214901517156100fa577f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d956080950404908160025582600355604051938452602084015260408301526060820152a160405161035a908161012c8239f35b634e487b7160e01b600052601160045260246000fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe60806040818152600436101561001457600080fd5b600091823560e01c9081630c574861146101ce5750806315f24053146101b35780632191f92a1461019857806326c394f71461017a57806340bc0af41461015c5780636c2df6a7146101405780636e71e2d81461011e578063b8168816146100a65763fd2da3391461008557600080fd5b346100a257816003193601126100a2576020906003549051908152f35b5080fd5b50346100a25760803660031901126100a2576004359160243560443590670de0b6b3a76400009260643584039084821161010a57508282856100fb6100f6946100f6610102988c9860209d6102ae565b61029b565b049361020b565b049051908152f35b634e487b7160e01b81526011600452602490fd5b50346100a257602090610139610133366101ec565b9161020b565b9051908152f35b50346100a257816003193601126100a257602091549051908152f35b50346100a257816003193601126100a2576020906001549051908152f35b50346100a257816003193601126100a2576020906002549051908152f35b50346100a257816003193601126100a2576020905160018152f35b50346100a2576020906101396101c8366101ec565b916102ae565b8390346100a257816003193601126100a257806301e1338060209252f35b606090600319011261020657600435906024359060443590565b600080fd5b91811561027957670de0b6b3a7640000820292670de0b6b3a763ffff1983850401610263576102429261023d91610281565b61028e565b90811561024d570490565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b505050600090565b9190820180921161026357565b9190820391821161026357565b8181029291811591840414171561026357565b906102b9929161020b565b6003548082116102ea5750670de0b6b3a76400006102dd6102e7926000549061029b565b0460015490610281565b90565b906102e79161031e610315670de0b6b3a76400009261030f846102dd6000548461029b565b9461028e565b6002549061029b565b0461028156fea2646970667358221220c404b2d92b9229e40010972d96d057b18959ab83d42ec959d008a5c038498d4564736f6c63430008130033";

type TimeBasedJumpRateModelConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TimeBasedJumpRateModelConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TimeBasedJumpRateModel__factory extends ContractFactory {
  constructor(...args: TimeBasedJumpRateModelConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    baseRatePerYear: BigNumberish,
    multiplierPerYear: BigNumberish,
    jumpMultiplierPerYear: BigNumberish,
    kink_: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      baseRatePerYear,
      multiplierPerYear,
      jumpMultiplierPerYear,
      kink_,
      overrides || {}
    );
  }
  override deploy(
    baseRatePerYear: BigNumberish,
    multiplierPerYear: BigNumberish,
    jumpMultiplierPerYear: BigNumberish,
    kink_: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      baseRatePerYear,
      multiplierPerYear,
      jumpMultiplierPerYear,
      kink_,
      overrides || {}
    ) as Promise<
      TimeBasedJumpRateModel & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): TimeBasedJumpRateModel__factory {
    return super.connect(runner) as TimeBasedJumpRateModel__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TimeBasedJumpRateModelInterface {
    return new Interface(_abi) as TimeBasedJumpRateModelInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TimeBasedJumpRateModel {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as TimeBasedJumpRateModel;
  }
}
