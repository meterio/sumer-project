/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  TokenErrorReporter,
  TokenErrorReporterInterface,
} from "../../../contracts/CToken/TokenErrorReporter";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "errorCode",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "infoCode",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "detailCode",
        type: "uint256",
      },
    ],
    name: "TokenError",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "error",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "info",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "detail",
        type: "uint256",
      },
    ],
    name: "Failure",
    type: "event",
  },
] as const;

const _bytecode =
  "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220edadee7ffe2eb5c25d5caedceb5d91ee8b087a7493e1daa8541201c460d2e24b64736f6c63430008130033";

type TokenErrorReporterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenErrorReporterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenErrorReporter__factory extends ContractFactory {
  constructor(...args: TokenErrorReporterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TokenErrorReporter & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TokenErrorReporter__factory {
    return super.connect(runner) as TokenErrorReporter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenErrorReporterInterface {
    return new Interface(_abi) as TokenErrorReporterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TokenErrorReporter {
    return new Contract(address, _abi, runner) as unknown as TokenErrorReporter;
  }
}
