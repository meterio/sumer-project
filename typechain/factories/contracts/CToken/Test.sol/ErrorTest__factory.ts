/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  ErrorTest,
  ErrorTestInterface,
} from "../../../../contracts/CToken/Test.sol/ErrorTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "errorCode",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "infoCode",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "detailCode",
        type: "uint256",
      },
    ],
    name: "TokenError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "err",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "info",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "num",
        type: "uint256",
      },
    ],
    name: "test",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "err",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "info",
        type: "uint256",
      },
    ],
    name: "test",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610125908161001c8239f35b600080fdfe608080604052600480361015601357600080fd5b600091823560e01c90816361805cc3146091575063eb8ac92114603557600080fd5b34608d576040366003190112608d578035916024356012841015607a57605d811015607a5760649360405193634190a51760e11b855284015260248301526044820152fd5b506021602492634e487b7160e01b835252fd5b5080fd5b9050823460ec57606036600319011260ec57823560243591601282101560d957605d83101560d95750606493634190a51760e11b845283015260248201526044356044820152fd5b634e487b7160e01b815260218552602490fd5b80fdfea26469706673582212203a97357c9aa2222d2c69d459023436f01784ebead114e6a6b73f341cf6a6161664736f6c63430008130033";

type ErrorTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ErrorTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ErrorTest__factory extends ContractFactory {
  constructor(...args: ErrorTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ErrorTest & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ErrorTest__factory {
    return super.connect(runner) as ErrorTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ErrorTestInterface {
    return new Interface(_abi) as ErrorTestInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ErrorTest {
    return new Contract(address, _abi, runner) as unknown as ErrorTest;
  }
}
