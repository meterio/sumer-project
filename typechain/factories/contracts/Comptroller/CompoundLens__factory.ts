/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  CompoundLens,
  CompoundLensInterface,
} from "../../../contracts/Comptroller/CompoundLens";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ICToken",
        name: "cToken",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "account",
        type: "address",
      },
    ],
    name: "cTokenBalances",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "cToken",
            type: "address",
          },
          {
            internalType: "bool",
            name: "isCToken",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isCEther",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "balanceOf",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "borrowBalanceCurrent",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "balanceOfUnderlying",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tokenBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tokenAllowance",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.CTokenBalances",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ICToken[]",
        name: "cTokens",
        type: "address[]",
      },
      {
        internalType: "address payable",
        name: "account",
        type: "address",
      },
    ],
    name: "cTokenBalancesAll",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "cToken",
            type: "address",
          },
          {
            internalType: "bool",
            name: "isCToken",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isCEther",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "balanceOf",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "borrowBalanceCurrent",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "balanceOfUnderlying",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tokenBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tokenAllowance",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.CTokenBalances[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ICToken",
        name: "cToken",
        type: "address",
      },
    ],
    name: "cTokenMetadata",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "cToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "exchangeRateCurrent",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "supplyRatePerBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "borrowRatePerBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "reserveFactorMantissa",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalBorrows",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalReserves",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalCash",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isListed",
            type: "bool",
          },
          {
            internalType: "address",
            name: "underlyingAssetAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "cTokenDecimals",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "underlyingDecimals",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isCToken",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isCEther",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "borrowCap",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "depositCap",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "heteroLiquidationIncentive",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "homoLiquidationIncentive",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "sutokenLiquidationIncentive",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "groupId",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "intraRate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "mintRate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "interRate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "discountRate",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.CTokenMetadata",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ICToken[]",
        name: "cTokens",
        type: "address[]",
      },
    ],
    name: "cTokenMetadataAll",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "cToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "exchangeRateCurrent",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "supplyRatePerBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "borrowRatePerBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "reserveFactorMantissa",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalBorrows",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalReserves",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalCash",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isListed",
            type: "bool",
          },
          {
            internalType: "address",
            name: "underlyingAssetAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "cTokenDecimals",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "underlyingDecimals",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isCToken",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isCEther",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "borrowCap",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "depositCap",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "heteroLiquidationIncentive",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "homoLiquidationIncentive",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "sutokenLiquidationIncentive",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "groupId",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "intraRate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "mintRate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "interRate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "discountRate",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.CTokenMetadata[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ICToken",
        name: "cToken",
        type: "address",
      },
    ],
    name: "cTokenUnderlyingPrice",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "cToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "underlyingPrice",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.CTokenUnderlyingPrice",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ICToken[]",
        name: "cTokens",
        type: "address[]",
      },
    ],
    name: "cTokenUnderlyingPriceAll",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "cToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "underlyingPrice",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.CTokenUnderlyingPrice[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IComptroller",
        name: "comptroller",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getAccountLimits",
    outputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "markets",
            type: "address[]",
          },
          {
            internalType: "uint256",
            name: "liquidity",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "shortfall",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.AccountLimits",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ICToken",
        name: "comp",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getCompBalanceMetadata",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "votes",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "delegate",
            type: "address",
          },
        ],
        internalType: "struct CompoundLens.CompBalanceMetadata",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ICToken",
        name: "comp",
        type: "address",
      },
      {
        internalType: "contract IComptroller",
        name: "comptroller",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getCompBalanceMetadataExt",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "votes",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "delegate",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "allocated",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.CompBalanceMetadataExt",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ICToken",
        name: "comp",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint32[]",
        name: "blockNumbers",
        type: "uint32[]",
      },
    ],
    name: "getCompVotes",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "blockNumber",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "votes",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.CompVotes[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IGovernorBravo",
        name: "governor",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "proposalIds",
        type: "uint256[]",
      },
    ],
    name: "getGovBravoProposals",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "proposalId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "proposer",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "eta",
            type: "uint256",
          },
          {
            internalType: "address[]",
            name: "targets",
            type: "address[]",
          },
          {
            internalType: "uint256[]",
            name: "values",
            type: "uint256[]",
          },
          {
            internalType: "string[]",
            name: "signatures",
            type: "string[]",
          },
          {
            internalType: "bytes[]",
            name: "calldatas",
            type: "bytes[]",
          },
          {
            internalType: "uint256",
            name: "startBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "forVotes",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "againstVotes",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "abstainVotes",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "canceled",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "executed",
            type: "bool",
          },
        ],
        internalType: "struct CompoundLens.GovBravoProposal[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IGovernorBravo",
        name: "governor",
        type: "address",
      },
      {
        internalType: "address",
        name: "voter",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "proposalIds",
        type: "uint256[]",
      },
    ],
    name: "getGovBravoReceipts",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "proposalId",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "hasVoted",
            type: "bool",
          },
          {
            internalType: "uint8",
            name: "support",
            type: "uint8",
          },
          {
            internalType: "uint96",
            name: "votes",
            type: "uint96",
          },
        ],
        internalType: "struct CompoundLens.GovBravoReceipt[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IGovernorAlpha",
        name: "governor",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "proposalIds",
        type: "uint256[]",
      },
    ],
    name: "getGovProposals",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "proposalId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "proposer",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "eta",
            type: "uint256",
          },
          {
            internalType: "address[]",
            name: "targets",
            type: "address[]",
          },
          {
            internalType: "uint256[]",
            name: "values",
            type: "uint256[]",
          },
          {
            internalType: "string[]",
            name: "signatures",
            type: "string[]",
          },
          {
            internalType: "bytes[]",
            name: "calldatas",
            type: "bytes[]",
          },
          {
            internalType: "uint256",
            name: "startBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "forVotes",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "againstVotes",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "canceled",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "executed",
            type: "bool",
          },
        ],
        internalType: "struct CompoundLens.GovProposal[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IGovernorAlpha",
        name: "governor",
        type: "address",
      },
      {
        internalType: "address",
        name: "voter",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "proposalIds",
        type: "uint256[]",
      },
    ],
    name: "getGovReceipts",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "proposalId",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "hasVoted",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "support",
            type: "bool",
          },
          {
            internalType: "uint96",
            name: "votes",
            type: "uint96",
          },
        ],
        internalType: "struct CompoundLens.GovReceipt[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234610016576134d7908161001c8239f35b600080fdfe610280604052600436101561001357600080fd5b6000803560e01c80630972bf8b1461193a578063158eca8b1461190d5780631ea637411461158c5780632b2d5ed614611476578063416405d7146112c457806343c811cc146110a35780634b70d84b14610f985780635956421914610daf57806375d80e901461094a5780637dd8f6d9146107b9578063969948691461038f578063995ed99f14610139578063bdf950c9146100fe5763c5ae5934146100b857600080fd5b346100fb5760203660031901126100fb5760406100db6100d6611acf565b6130ae565b815181516001600160a01b0316815260209182015191810191909152f35bf35b80fd5b50346100fb5760403660031901126100fb5761010061012c61011e611acf565b610126611a62565b90612cce565b6100f96040518092611a78565b50346100fb57606090816003193601126100fb57610155611acf565b61015d611a62565b906044356001600160401b03811161038b5761017d903690600401611cf8565b9081519161018a83611ce1565b936101986040519586611cc0565b838552601f196101a785611ce1565b01865b81811061036e5750506001600160a01b0390921691855b8481106102315787878760405191602080840190808552835180925280604086019401925b8281106101f35785850386f35b835180518652808301511515868401526040808201511515908701528701516001600160601b031687860152608090940193928101926001016101e6565b61027b9061023d611fb2565b89846102498488612c7c565b5160405163711d4d2960e11b815260048101919091526001600160a01b03909116602482015293849081906044820190565b0381895afa801561036357898a908b92610308575b61030395506020928385019160408601936001600160601b03809316855215158352151585526102c0868a612c7c565b51945115159151151592511692604051946102da86611bff565b855284015260408301528a8201526102f28289612c7c565b526102fd8188612c7c565b50612c1d565b6101c1565b50505090918981813d831161035c575b6103228183611cc0565b810103126103585790816103396103039493611f34565b610351604061034a60208501611f34565b93016132a3565b9190610290565b8880fd5b503d610318565b6040513d8b823e3d90fd5b60209061037c96959661327e565b82828a010152019493946101aa565b8380fd5b50346100fb5760403660031901126100fb576103a9611acf565b6024356001600160401b0381116107b5576103c8903690600401611a32565b6103d481939293611ce1565b926103e26040519485611cc0565b818452601f196103f183611ce1565b01855b81811061074b575050845b82811061051b5760408051602080825287518183018190528993600582901b8401810192808b01929185015b8287106104385785850386f35b909192938280600192603f1989820301855287519081518152848060a01b03838301511683820152604082015160408201526104c66104b36104a061048d606080870151906101a08091880152860190611d56565b6080808701519086830390870152611d93565b60a0808601519085830390860152611e0f565b60c0808501519084830390850152611e0f565b9160e081015160e083015261010080820151908301526101208082015190830152610140808201519083015261016080820151151590830152610180809101511515910152960192019601959291909261042b565b610526818484612c42565b604051631946ecc160e11b81529035600482015286816024816001600160a01b0389165afa80156107405787918889918a93610719575b506040519361056b85611c6c565b8a85528a60208601528a60408601526060850152608084015260a083015260c08201528660e082015286610100820152866101208201528661014082015286610160820152866101808201526105c18287612c7c565b526105cc8186612c7c565b506105d78186612c7c565b51906105e4818585612c42565b60405163013cf08b60e01b8152903560048201819052929088610120826024816001600160a01b038c165afa91821561070c578182838491859386958798610679575b5090610180979695949392916106749b8a5260018060a01b031660208a0152604089015260e088015261010087015261012086015261014085015215156101608401521515910152612c1d565b6103ff565b975050505050505050610120813d61012011610704575b8161069e6101209383611cc0565b810103126103585761067493816106ba60206101809401611f20565b9060408101516060820151608083015160a08401519160c0850151936106ef6101006106e860e08901611f34565b9701611f34565b979b9798509496939592949193909290610627565b3d9150610690565b50604051903d90823e3d90fd5b9250505061073991503d8089833e6107318183611cc0565b8101906132b7565b913861055d565b6040513d89823e3d90fd5b60209060405161075a81611c6c565b888152828981830152896040830152606080808401528060808401528060a084015260c08301528960e083015289610100830152896101208301528961014083015289610160830152896101808301528289010152016103f4565b8280fd5b50346100fb5760403660031901126100fb576107d3611acf565b906107dc611a62565b6040516107e881611c1a565b826040606092838152826020820152015260018060a01b038094169360405192635ec88c7960e01b8452168060048401528183602481885afa90811561093f57848594869361090a575b50610906578490602460405180988193632aff3bff60e21b835260048301525afa9384156108fa5780946108af575b5061089f94506040519361087485611c1a565b8452602084019283526040840190815260405194859460208652518360208701526080860190611d56565b9251604085015251908301520390f35b9093503d8082873e6108c18187611cc0565b8501946020818703126108f6578051916001600160401b0383116100fb5750946108ef9161089f9601613218565b9238610861565b5080fd5b604051903d90823e3d90fd5b8480fd5b9194505061092e9150823d8411610938575b6109268183611cc0565b810190611fd1565b9390939138610832565b503d61091c565b6040513d86823e3d90fd5b50346100fb5760403660031901126100fb57610964611acf565b6024356001600160401b0381116107b557610983903690600401611a32565b61098f81939293611ce1565b9261099d6040519485611cc0565b818452601f196109ac83611ce1565b01855b818110610d3e575050845b828110610aa85760408051602080825287518183018190528993600582901b8401810192808b01929185015b8287106109f35785850386f35b909192938280600192603f1989820301855287519081518152848060a01b0383830151168382015260408201516040820152610a486104b36104a061048d606080870151906101c08091880152860190611d56565b9160e081015160e08301526101008082015190830152610120808201519083015261014080820151908301526101608082015190830152610180808201511515908301526101a080910151151591015296019201960195929190926109e6565b610ab3818484612c42565b604051631946ecc160e11b81529035600482015286816024816001600160a01b0389165afa80156107405787918889918a93610d1f575b5060405193610af885611c50565b8a85528a60208601528a60408601526060850152608084015260a083015260c08201528660e08201528661010082015286610120820152866101408201528661016082015286610180820152866101a0820152610b558287612c7c565b52610b608186612c7c565b50610b6b8186612c7c565b5190610b78818585612c42565b60405163013cf08b60e01b81529035600482018190529290610140816024816001600160a01b038b165afa908115610363578991610c2e575b506101206101a091610c2995845260018060a01b03602082015116602085015260408101516040850152606081015160e0850152608081015161010085015260a08101518285015260c081015161014085015260e0810151610160850152610100810151151561018085015201511515910152612c1d565b6109ba565b9050610140813d61014011610d17575b81610c4c6101409383611cc0565b810103126103585760405190816101408101106001600160401b0361014084011117610d0157610c299482610cf461012080946101406101a0970160405280518452610c9a60208201611f20565b602085015260408101516040850152606081015160608501526080810151608085015260a081015160a085015260c081015160c085015260e081015160e0850152610ce86101008201611f34565b61010085015201611f34565b8382015292509450610bb1565b634e487b7160e01b600052604160045260246000fd5b3d9150610c3e565b92505050610d3791503d8089833e6107318183611cc0565b9138610aea565b602090604051610d4d81611c50565b888152828981830152896040830152606080808401528060808401528060a084015260c08301528960e08301528961010083015289610120830152896101408301528961016083015289610180830152896101a08301528289010152016109af565b50346100fb5760603660031901126100fb57610dc9611acf565b90610dd2611a62565b91604480356001600160401b03811161038b57610df3903690600401611a32565b9091610dfe82611ce1565b95610e0c6040519788611cc0565b828752601f19610e1b84611ce1565b01865b818110610f735750506001600160a01b039081169416855b838110610e83576040805160208082528a51818301819052818c01938301918b5b828110610e645784840385f35b8551805185528201518483015294810194604090930192600101610e57565b63ffffffff80610e9c610e9784888a612c42565b613460565b1690610eac610e9784888a612c42565b60405163782d6fe160e01b8152600481018a90529116602482015260209081818781885afa908115610f68578a91610f1d575b50906001600160601b03610f1894939260405193610efc85611c35565b84521690820152610f0d828b612c7c565b526102fd818a612c7c565b610e36565b90508181813d8311610f61575b610f348183611cc0565b81010312610f5d57906001600160601b03610f53610f189594936132a3565b9192939450610edf565b8980fd5b503d610f2a565b6040513d8c823e3d90fd5b602090604051610f8281611c35565b6000815282600081830152828c01015201610e1e565b50346100fb576020806003193601126108f6576004356001600160401b0381116107b557610fca903690600401611a32565b90610fd482611ce1565b91610fe26040519384611cc0565b808352601f19610ff182611ce1565b01855b818110611087575050845b818110611053575050506040519180830190808452825180925280604085019301945b82811061102f5784840385f35b90919282610320826110446001948a51611ae5565b01960191019492919094611022565b8061107561107061106b61107f9486889b999b612c42565b612c68565b611fec565b6102f28289612c7c565b949294610fff565b8590611094979597611e6b565b82828a01015201959395610ff4565b50346100fb57606090816003193601126100fb576110bf611acf565b6110c7611a62565b906044356001600160401b03811161038b576110ea909291923690600401611cf8565b8051916110f683611ce1565b936111046040519586611cc0565b838552601f1961111385611ce1565b01865b8181106112a75750506001600160a01b0316855b84811061119b5787878760405191602080840190808552835180925280604086019401925b82811061115c5785850386f35b8351805186528083015115158684015260408082015160ff16908701528701516001600160601b0316878601526080909401939281019260010161114f565b8088846111ab6111dd9488612c7c565b5160405163711d4d2960e11b815260048101919091526001600160a01b03909116602482015292839081906044820190565b0381865afa801561129c578890611230575b61122b92506111fe8287612c7c565b519080511515906020916001600160601b03604060ff85850151169301511692604051946102da86611bff565b61112a565b50908881813d8311611295575b6112478183611cc0565b81010312611291579061122b91611287604080519261126584611c1a565b61126e81611f34565b8452602061127d818301611f41565b90850152016132a3565b60408201526111ef565b8780fd5b503d61123d565b6040513d8a823e3d90fd5b6020906112b596939661327e565b82828a01015201949194611116565b50346100fb5760403660031901126100fb576112de611acf565b6112e6611a62565b906112ef611fb2565b506040516370a0823160e01b81526001600160a01b0392831660048201819052918316939092916020908185602481895afa94851561146b578395611437575b5060405163b4b5ea5760e01b8152600481018290529082826024818a5afa91821561093f5790839185936113ff575b50602460405180998193632c3e6f0f60e11b835260048301525afa9283156108fa5780936113c5575b5060609550836040805161139a81611c1a565b8781526001600160601b03858201941684520193168352604051948552519084015251166040820152f35b9092508186813d83116113f8575b6113dd8183611cc0565b810103126100fb57506113f1606095611f20565b9138611387565b503d6113d3565b8281939294503d8311611430575b6114178183611cc0565b8101031261038b5761142983916132a3565b913861135e565b503d61140d565b9094508181813d8311611464575b61144f8183611cc0565b8101031261145f5751933861132f565b600080fd5b503d611445565b6040513d85823e3d90fd5b50346100fb576020806003193601126108f6576004356001600160401b0381116107b5576114a8903690600401611a32565b906114b282611ce1565b916114c06040519384611cc0565b808352601f196114cf82611ce1565b01855b818110611562575050845b818110611542575050506040519180830190808452825180925280604085019301945b82811061150d5784840385f35b909192826040826115336001948a516020809160018060a01b0381511684520151910152565b01960191019492919094611500565b806110756100d661106b61155a9486889b999b612c42565b9492946114dd565b859060409795975161157381611c35565b6000815260008382015282828a010152019593956114d2565b50346100fb5760603660031901126100fb576115a6611acf565b6115ae611a62565b6001600160a01b0360443581811693908490036109065781906115cf61327e565b501693604051936370a0823160e01b90818652806004870152602091602495838888818c5afa9788156118135785986118de575b508516803b15610906576040516374d7814960e11b8152600481018490528581898183865af180156118d3576118a5575b50604051918252826004830152838288818c5afa918215611813578793929185918793611873575b506040519889809263331faf7160e21b82528660048301525afa968715611813578597611844575b506040519061169282611c35565b600e82526d1cdd5b4818dbdb5c081d1bdd185b60921b8583015287019687811161183157906116c391881015613471565b6116f46040516116d281611c35565b600d81526c1cdd5888185b1b1bd8d85d1959609a1b8582015287891115613471565b86860395861161181e5760405163b4b5ea5760e01b81526004810182905291838382818c5afa928315611813579084929186946117d9575b50604051809a8193632c3e6f0f60e11b835260048301525afa9283156108fa57809361179f575b5060809650606060405161176681611bff565b8781526001600160601b038482019316835285604082019516855201948552604051958652519085015251166040830152516060820152f35b9092508187813d83116117d2575b6117b78183611cc0565b810103126100fb57506117cb608096611f20565b9138611753565b503d6117ad565b838193949295503d831161180c575b6117f28183611cc0565b81010312610906579061180584926132a3565b923861172c565b503d6117e8565b6040513d87823e3d90fd5b50634e487b7160e01b8352601160045282fd5b634e487b7160e01b865260116004528386fd5b9096508381813d831161186c575b61185c8183611cc0565b8101031261145f57519538611684565b503d611852565b9450915083813d831161189e575b61188b8183611cc0565b8101031261145f5783879351913861165c565b503d611881565b6001600160401b0381969296116118c0576040529338611634565b634e487b7160e01b825260416004528782fd5b6040513d88823e3d90fd5b9097508381813d8311611906575b6118f68183611cc0565b8101031261090657519685611603565b503d6118ec565b50346100fb5760203660031901126100fb5761032061192d611070611acf565b6100f96040518092611ae5565b50346100fb5760403660031901126100fb576004356001600160401b0381116108f65761196b903690600401611a32565b9190611975611a62565b61197e84611ce1565b9361198c6040519586611cc0565b808552601f1961199b82611ce1565b01845b818110611a1b575050835b8181106119fb576040805160208082528851818301819052818a0193830191895b8281106119d75784840385f35b90919282610100826119ec6001948a51611a78565b019601910194929190946119ca565b8061107584611a1161106b611a1695878a612c42565b612cce565b6119a9565b602090611a26612c90565b82828a0101520161199e565b9181601f8401121561145f578235916001600160401b03831161145f576020808501948460051b01011161145f57565b602435906001600160a01b038216820361145f57565b60e0809160018060a01b038151168452602081015115156020850152604081015115156040850152606081015160608501526080810151608085015260a081015160a085015260c081015160c08501520151910152565b600435906001600160a01b038216820361145f57565b60018060a01b038082511683526020820151602084015260408201516040840152606082015160608401526080820151608084015260a082015160a084015260c082015160c084015260e082015160e084015261010080830151908401526101208083015115159084015261014090818301511690830152610160808201519083015261018080820151908301526101a0808201511515908301526101c0808201511515908301526101e08082015190830152610200808201519083015261022080820151908301526102408082015190830152610260808201519083015261028060ff8183015116908301526102a080820151908301526102c080820151908301526102e0808201519083015261030080910151910152565b608081019081106001600160401b03821117610d0157604052565b606081019081106001600160401b03821117610d0157604052565b604081019081106001600160401b03821117610d0157604052565b6101c081019081106001600160401b03821117610d0157604052565b6101a081019081106001600160401b03821117610d0157604052565b61032081019081106001600160401b03821117610d0157604052565b61010081019081106001600160401b03821117610d0157604052565b90601f801991011681019081106001600160401b03821117610d0157604052565b6001600160401b038111610d015760051b60200190565b81601f8201121561145f57803591611d0f83611ce1565b92611d1d6040519485611cc0565b808452602092838086019260051b82010192831161145f578301905b828210611d47575050505090565b81358152908301908301611d39565b90815180825260208080930193019160005b828110611d76575050505090565b83516001600160a01b031685529381019392810192600101611d68565b90815180825260208080930193019160005b828110611db3575050505090565b835185529381019392810192600101611da5565b60005b838110611dda5750506000910152565b8181015183820152602001611dca565b90602091611e0381518092818552858086019101611dc7565b601f01601f1916010190565b908082519081815260208091019281808460051b8301019501936000915b848310611e3d5750505050505090565b9091929394958480611e5b600193601f198682030187528a51611dea565b9801930193019194939290611e2d565b60405190611e7882611c88565b816103006000918281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e08201528261010082015282610120820152826101408201528261016082015282610180820152826101a0820152826101c0820152826101e08201528261020082015282610220820152826102408201528261026082015282610280820152826102a0820152826102c0820152826102e08201520152565b51906001600160a01b038216820361145f57565b5190811515820361145f57565b519060ff8216820361145f57565b909291926001600160401b038111610d015760405191611f79601f8301601f191660200184611cc0565b82948284528282011161145f576020611f93930190611dc7565b565b9080601f8301121561145f578151611faf92602001611f4f565b90565b60405190611fbf82611c1a565b60006040838281528260208201520152565b9081606091031261145f578051916040602083015192015190565b90611ff5611e6b565b50604051635fe3b56760e01b81526020816004816001600160a01b0387165afa9081156125c657600091612be3575b50604051632b1e137760e21b81526000906020816004816001600160a01b0389165afa908115612bd8578291612b9e575b5015612a51575060009260125b604051638e8f294b60e01b81526001600160a01b0380841660048301529092906060908490602490829088165afa9283156125c65760009384610160526129f9575b5060405163243cdb5560e01b81526101605160ff1660048201526000816024816001600160a01b0389165afa9081156125c65760009161292a575b506120e8611fb2565b61018052604051637f4e225760e11b81526020816004816001600160a01b0387165afa9081156125c6576000916128f0575b50156128ca578060406060920151610180515260a08101516040610180510152015160206101805101525b604051634ada90af60e01b81526060816004816001600160a01b0389165afa80156125c657600060a05260006101c05260006101a0526128a0575b5060405163bd6d894d60e01b815260208160048160006001600160a01b0387165af180156125c657600061010052612865575b50604051630ae9d70b60e41b81526020816004816001600160a01b0386165afa80156125c657600060e05261282c575b50604051631f1f3b4560e31b81526020816004816001600160a01b0386165afa80156125c657600060c0526127f3575b506040516305cee64160e21b8152926020846004816001600160a01b0386165afa9384156125c6576000946127bf575b506040516308f7a6e360e31b8152966020886004816001600160a01b0387165afa9788156125c65760009861278b575b50604051638f840ddd60e01b8152916020836004816001600160a01b0388165afa9283156125c657600093612757575b506040516318160ddd60e01b81526020816004816001600160a01b0389165afa9081156125c657600091612725575b50604051631d8e90d160e11b8152906020826004816001600160a01b038a165afa9182156125c6576000926126f1575b5060405163313ce56760e01b8152946020866004816001600160a01b038b165afa9586156125c6576000966126b5575b50604051637f4e225760e11b81529b60208d6004816001600160a01b038c165afa998a156125c65760009a61267d575b604051632b1e137760e21b81529d5060208e6004816001600160a01b038d165afa9b8c156125c65760009c612641575b60405163252c221960e11b81526001600160a01b038b811660048301529e9f509d6020908f90602490829085165afa9d8e156125c65760009e61260d575b50604051639cc7becf60e01b81526001600160a01b03808c166004830152909160209183916024918391165afa80156125c6576000610140526125d2575b506101805180516101e052604080820151610200526020918201516102205251610260818152632179928d60e11b909152516004816001600160a01b038d165afa8061024052156125c65760006101205261024051612583575b60ff9861247a60405180608052611c88565b60018060a01b031660805152610100516020608051015260e0516040608051015260c0516060608051015260808051015260a0608051015260c0608051015260e0608051015261010060805101521515610120608051015260018060a01b03166101406080510152166101606080510152610180608051015215156101a0608051015215156101c060805101526101e0608051015261014051610200608051015260a05161022060805101526101c05161024060805101526101a051610260608051015260ff610160511661028060805101526101e0516102a06080510152610220516102c06080510152610200516102e0608051015261012051610300608051015260805190565b6020983d6020116125be575b61259c8a61026051611cc0565b602061026051809b810103126125b757985161012052612468565b6101205180fd5b3d995061258f565b6040513d6000823e3d90fd5b6020813d602011612605575b816125eb60209383611cc0565b810103126125fe5751610140523861240e565b6101405180fd5b3d91506125de565b909d6020823d602011612639575b8161262860209383611cc0565b810103126100fb5750519c386123d0565b3d915061261b565b9b60208f813d8311612676575b6126588183611cc0565b810103126100fb575061266d60209d9e611f34565b9b8e9d50612392565b503d61264e565b9960208e813d83116126ae575b6126948183611cc0565b810103126100fb57506126a860209d611f34565b99612362565b503d61268a565b90956020823d6020116126e9575b816126d060209383611cc0565b810103126100fb57506126e290611f41565b9438612332565b3d91506126c3565b90916020823d60201161271d575b8161270c60209383611cc0565b810103126100fb5750519038612302565b3d91506126ff565b906020823d60201161274f575b8161273f60209383611cc0565b810103126100fb575051386122d2565b3d9150612732565b90926020823d602011612783575b8161277260209383611cc0565b810103126100fb57505191386122a3565b3d9150612765565b90976020823d6020116127b7575b816127a660209383611cc0565b810103126100fb5750519638612273565b3d9150612799565b90936020823d6020116127eb575b816127da60209383611cc0565b810103126100fb5750519238612243565b3d91506127cd565b6020813d602011612824575b8161280c60209383611cc0565b8101031261281e575160c05238612213565b60c05180fd5b3d91506127ff565b6020813d60201161285d575b8161284560209383611cc0565b81010312612857575160e052386121e3565b60e05180fd5b3d9150612838565b6020813d602011612898575b8161287e60209383611cc0565b81010312612891575161010052386121b3565b6101005180fd5b3d9150612871565b6128b89060603d606011610938576109268183611cc0565b9160a0526101c0526101a05238612180565b60c060808201918251610180515201516040610180510152516020610180510152612145565b906020823d602011612922575b8161290a60209383611cc0565b810103126100fb575061291c90611f34565b3861211a565b3d91506128fd565b903d918282823e61293b8382611cc0565b60208184810103126108f6578051916001600160401b0383116100fb5761010083830185840103126100fb576040519361297485611ca4565b61297f848401611f41565b855260208484010151916001600160401b0383116100fb5750916129b06129ee949260e09483019084840101611f95565b60208601520160408181015190850152606080820151908501526080808201519085015260a0808201519085015260c0808201519085015201611f34565b60e0820152386120df565b926060843d606011612a49575b81612a1360609383611cc0565b810103126100fb5750612a2583611f34565b612a3d6040612a3660208701611f41565b9501611f34565b509261016052386120a4565b3d9150612a06565b604051636f307dc360e01b8082529491906020816004816001600160a01b0387165afa9182156108fa578092612b61575b5050604051948552936020816004816001600160a01b0386165afa9081156125c657600091612b22575b5060405163313ce56760e01b815290602090829060049082906001600160a01b03165afa80156125c657600090612ae8575b60ff915016612062565b6020823d602011612b1a575b81612b0160209383611cc0565b810103126100fb5750612b1560ff91611f41565b612ade565b3d9150612af4565b906020823d602011612b59575b81612b3c60209383611cc0565b810103126100fb57506020612b52600492611f20565b9150612aac565b3d9150612b2f565b9091506020823d602011612b96575b81612b7d60209383611cc0565b810103126100fb5750612b8f90611f20565b3880612a82565b3d9150612b70565b90506020813d602011612bd0575b81612bb960209383611cc0565b810103126108f657612bca90611f34565b38612055565b3d9150612bac565b6040513d84823e3d90fd5b906020823d602011612c15575b81612bfd60209383611cc0565b810103126100fb5750612c0f90611f20565b38612024565b3d9150612bf0565b6000198114612c2c5760010190565b634e487b7160e01b600052601160045260246000fd5b9190811015612c525760051b0190565b634e487b7160e01b600052603260045260246000fd5b356001600160a01b038116810361145f5790565b8051821015612c525760209160051b010190565b60405190612c9d82611ca4565b8160e06000918281528260208201528260408201528260608201528260808201528260a08201528260c08201520152565b612cd6612c90565b50604080516370a0823160e01b8082526001600160a01b0394851660048301819052938516946020949390929085826024818a5afa9182156130a357600092613074575b5080516305eff7ef60e21b81526004810186905292868460248160008c5af19384156130695760009461303a575b508151633af9e66960e01b81526004810187905294878660248160008d5af1958615612f4b5790899291600097613006575b5060009084518a81600481632b1e137760e21b988982525afa908115612fc7578391612fd1575b5015612e9e5750505085319531965b8251637f4e225760e11b815281816004818d5afa908115612e5e57600091612e69575b50835192835281836004818d5afa928315612e5e57600093612e27575b50835199612dfd8b611ca4565b8a521515908901521515908701526060860152608085015260a084015260c083015260e082015290565b90928282813d8311612e57575b612e3e8183611cc0565b810103126100fb5750612e5090611f34565b9138612df0565b503d612e34565b84513d6000823e3d90fd5b908282813d8311612e97575b612e7f8183611cc0565b810103126100fb5750612e9190611f34565b38612dd3565b503d612e75565b8451636f307dc360e01b81528a816004818f5afa908115612fc7578391612f92575b50169184519081528860048201528981602481865afa918215612f875790818b93612f56575b5050976044855180948193636eb1769f60e11b835260048301528d60248301525afa908115612f4b57600091612f1e575b5096612db0565b908882813d8311612f44575b612f348183611cc0565b810103126100fb57505138612f17565b503d612f2a565b83513d6000823e3d90fd5b91509182813d8311612f80575b612f6d8183611cc0565b810103126100fb57508890513880612ee6565b503d612f63565b8551903d90823e3d90fd5b90508a81813d8311612fc0575b612fa98183611cc0565b810103126107b557612fba90611f20565b38612ec0565b503d612f9f565b86513d85823e3d90fd5b90508a81813d8311612fff575b612fe88183611cc0565b810103126107b557612ff990611f34565b38612da1565b503d612fde565b919250958882813d8311613033575b61301f8183611cc0565b810103126100fb5750908891519538612d7a565b503d613015565b90938782813d8311613062575b6130518183611cc0565b810103126100fb5750519238612d48565b503d613047565b82513d6000823e3d90fd5b90918682813d831161309c575b61308b8183611cc0565b810103126100fb5750519038612d1a565b503d613081565b50513d6000823e3d90fd5b604080516130bb81611c35565b600080825260209182018190528251635fe3b56760e01b81526001600160a01b0394851694919391908381600481895afa9081156131d7578291859187916131e1575b5060048551809481936307dc0d1d60e41b8352165afa9081156131d75790849186916131a1575b50602484518094819363fc57d4df60e01b83528a6004840152165afa938415613196578094613164575b5050519261315c84611c35565b835282015290565b909193508282813d831161318f575b61317d8183611cc0565b810103126100fb57505191388061314f565b503d613173565b8251903d90823e3d90fd5b82819392503d83116131d0575b6131b88183611cc0565b81010312610906576131ca8491611f20565b38613125565b503d6131ae565b83513d87823e3d90fd5b92505081813d8311613211575b6131f88183611cc0565b81010312610906578361320b8392611f20565b386130fe565b503d6131ee565b81601f8201121561145f5780519161322f83611ce1565b9261323d6040519485611cc0565b808452602092838086019260051b82010192831161145f578301905b828210613267575050505090565b83809161327384611f20565b815201910190613259565b6040519061328b82611bff565b60006060838281528260208201528260408201520152565b51906001600160601b038216820361145f57565b60808183031261145f578051926001600160401b039384811161145f57836132e0918401613218565b9360208084015182811161145f57840185601f8201121561145f5780519061330782611ce1565b9060409261331784519384611cc0565b808352848084019160051b8301019189831161145f5785809101915b8383106134505750505050958186015184811161145f57860181601f8201121561145f57805161336281611ce1565b9161336f85519384611cc0565b818352858084019260051b8201019184831161145f57868201905b83821061342b57505050509560608101519085821161145f57019181601f8401121561145f578251906133bc82611ce1565b956133c982519788611cc0565b828752858088019360051b8601019484861161145f57868101935b8685106133f657505050505050505090565b845183811161145f57820186603f8201121561145f57889161342088838886809601519101611f4f565b8152019401936133e4565b815189811161145f57889161344588848094880101611f95565b81520191019061338a565b8251815291810191869101613333565b3563ffffffff8116810361145f5790565b156134795750565b60405162461bcd60e51b81526020600482015290819061349d906024830190611dea565b0390fdfea264697066735822122035ae836d3c16fb705f76876812896bc9237a158c9a3b1c5024f243714cf4b15c64736f6c63430008130033";

type CompoundLensConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CompoundLensConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CompoundLens__factory extends ContractFactory {
  constructor(...args: CompoundLensConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      CompoundLens & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): CompoundLens__factory {
    return super.connect(runner) as CompoundLens__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CompoundLensInterface {
    return new Interface(_abi) as CompoundLensInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): CompoundLens {
    return new Contract(address, _abi, runner) as unknown as CompoundLens;
  }
}
