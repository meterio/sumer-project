/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TokenErrorReporter,
  TokenErrorReporterInterface,
} from "../TokenErrorReporter";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "errorCode",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "infoCode",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "detailCode",
        type: "uint256",
      },
    ],
    name: "TokenError",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "error",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "info",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "detail",
        type: "uint256",
      },
    ],
    name: "Failure",
    type: "event",
  },
];

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200cc59720b562385b93aa1842c7380c743a03830aebfb50a6b2b82f7bbaf2c0b764736f6c634300080b0033";

export class TokenErrorReporter__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TokenErrorReporter> {
    return super.deploy(overrides || {}) as Promise<TokenErrorReporter>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TokenErrorReporter {
    return super.attach(address) as TokenErrorReporter;
  }
  connect(signer: Signer): TokenErrorReporter__factory {
    return super.connect(signer) as TokenErrorReporter__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenErrorReporterInterface {
    return new utils.Interface(_abi) as TokenErrorReporterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenErrorReporter {
    return new Contract(address, _abi, signerOrProvider) as TokenErrorReporter;
  }
}
