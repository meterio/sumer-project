/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Exponential, ExponentialInterface } from "../Exponential";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "mantissa",
            type: "uint256",
          },
        ],
        internalType: "struct Exp",
        name: "a",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "mantissa",
            type: "uint256",
          },
        ],
        internalType: "struct Exp",
        name: "b",
        type: "tuple",
      },
    ],
    name: "addExp",
    outputs: [
      {
        internalType: "enum MathError",
        name: "",
        type: "MathError",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "mantissa",
            type: "uint256",
          },
        ],
        internalType: "struct Exp",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "mantissa",
            type: "uint256",
          },
        ],
        internalType: "struct Exp",
        name: "a",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "mantissa",
            type: "uint256",
          },
        ],
        internalType: "struct Exp",
        name: "b",
        type: "tuple",
      },
    ],
    name: "divExp",
    outputs: [
      {
        internalType: "enum MathError",
        name: "",
        type: "MathError",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "mantissa",
            type: "uint256",
          },
        ],
        internalType: "struct Exp",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "mantissa",
            type: "uint256",
          },
        ],
        internalType: "struct Exp",
        name: "a",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "scalar",
        type: "uint256",
      },
    ],
    name: "divScalar",
    outputs: [
      {
        internalType: "enum MathError",
        name: "",
        type: "MathError",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "mantissa",
            type: "uint256",
          },
        ],
        internalType: "struct Exp",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "scalar",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "mantissa",
            type: "uint256",
          },
        ],
        internalType: "struct Exp",
        name: "divisor",
        type: "tuple",
      },
    ],
    name: "divScalarByExp",
    outputs: [
      {
        internalType: "enum MathError",
        name: "",
        type: "MathError",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "mantissa",
            type: "uint256",
          },
        ],
        internalType: "struct Exp",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "scalar",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "mantissa",
            type: "uint256",
          },
        ],
        internalType: "struct Exp",
        name: "divisor",
        type: "tuple",
      },
    ],
    name: "divScalarByExpTruncate",
    outputs: [
      {
        internalType: "enum MathError",
        name: "",
        type: "MathError",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "num",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "denom",
        type: "uint256",
      },
    ],
    name: "getExp",
    outputs: [
      {
        internalType: "enum MathError",
        name: "",
        type: "MathError",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "mantissa",
            type: "uint256",
          },
        ],
        internalType: "struct Exp",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "mantissa",
            type: "uint256",
          },
        ],
        internalType: "struct Exp",
        name: "a",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "mantissa",
            type: "uint256",
          },
        ],
        internalType: "struct Exp",
        name: "b",
        type: "tuple",
      },
    ],
    name: "mulExp",
    outputs: [
      {
        internalType: "enum MathError",
        name: "",
        type: "MathError",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "mantissa",
            type: "uint256",
          },
        ],
        internalType: "struct Exp",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "mulExp",
    outputs: [
      {
        internalType: "enum MathError",
        name: "",
        type: "MathError",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "mantissa",
            type: "uint256",
          },
        ],
        internalType: "struct Exp",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "mantissa",
            type: "uint256",
          },
        ],
        internalType: "struct Exp",
        name: "a",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "mantissa",
            type: "uint256",
          },
        ],
        internalType: "struct Exp",
        name: "b",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "mantissa",
            type: "uint256",
          },
        ],
        internalType: "struct Exp",
        name: "c",
        type: "tuple",
      },
    ],
    name: "mulExp3",
    outputs: [
      {
        internalType: "enum MathError",
        name: "",
        type: "MathError",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "mantissa",
            type: "uint256",
          },
        ],
        internalType: "struct Exp",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "mantissa",
            type: "uint256",
          },
        ],
        internalType: "struct Exp",
        name: "a",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "scalar",
        type: "uint256",
      },
    ],
    name: "mulScalar",
    outputs: [
      {
        internalType: "enum MathError",
        name: "",
        type: "MathError",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "mantissa",
            type: "uint256",
          },
        ],
        internalType: "struct Exp",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "mantissa",
            type: "uint256",
          },
        ],
        internalType: "struct Exp",
        name: "a",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "scalar",
        type: "uint256",
      },
    ],
    name: "mulScalarTruncate",
    outputs: [
      {
        internalType: "enum MathError",
        name: "",
        type: "MathError",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "mantissa",
            type: "uint256",
          },
        ],
        internalType: "struct Exp",
        name: "a",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "scalar",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "addend",
        type: "uint256",
      },
    ],
    name: "mulScalarTruncateAddUInt",
    outputs: [
      {
        internalType: "enum MathError",
        name: "",
        type: "MathError",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "mantissa",
            type: "uint256",
          },
        ],
        internalType: "struct Exp",
        name: "a",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "mantissa",
            type: "uint256",
          },
        ],
        internalType: "struct Exp",
        name: "b",
        type: "tuple",
      },
    ],
    name: "subExp",
    outputs: [
      {
        internalType: "enum MathError",
        name: "",
        type: "MathError",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "mantissa",
            type: "uint256",
          },
        ],
        internalType: "struct Exp",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x6080806040523461001a576107919081610020823930815050f35b600080fdfe604060808152600436101561001357600080fd5b6000803560e01c8063100045df146102f4578063185c070f146102d257806369fbe45e146102b0578063943ab3fd1461027b5780639ba9c354146102535780639d70934e14610232578063ba9316b71461021f578063d1c254ae146101ea578063d23e70961461019e578063de32abd11461016b578063e19ccb271461011f578063e6247a38146100e95763fe799fc9146100ad57600080fd5b60603660031901126100e657506100d36100c63661036c565b604435906024359061060e565b6100df83518093610388565b6020820152f35b80fd5b50816003193601126100e6575061010b6101023661036c565b60243590610592565b61011783518093610388565b516020820152f35b50906060366003190112610167576101363661036c565b61013f3661034b565b6020366043190112610163579061010b91610158610315565b916044358352610722565b8380fd5b5080fd5b5061010b90610179366103ab565b91610182610315565b5261018b610315565b908152610196610315565b9182526106a8565b50816003193601126100e6576101d3906101b73661036c565b6101c03661034b565b916101c9610315565b5251905190610570565b6101db610315565b90815261011783518093610388565b50816003193601126100e6576101d3906102033661036c565b61020c3661034b565b91610215610315565b5251905190610558565b8261010b61022c366103ab565b906103c1565b50816003193601126100e6575061010b61024b3661034b565b600435610660565b50816003193601126100e6575061010b61026c3661036c565b6102753661034b565b906106a8565b50816003193601126100e65761010b906102943661036c565b61029d3661034b565b916102a6610315565b52519051906103c1565b50816003193601126100e6575061010b6102c93661036c565b6024359061064a565b50816003193601126100e657506100d36102eb3661036c565b602435906105db565b50816003193601126100e657506100d361030d3661034b565b60043561069e565b604051906020820182811067ffffffffffffffff82111761033557604052565b634e487b7160e01b600052604160045260246000fd5b60209060231901126103675761035f610315565b906024358252565b600080fd5b602090600319011261036757610380610315565b906004358252565b9060048210156103955752565b634e487b7160e01b600052602160045260246000fd5b6040906003190112610367576004359060243590565b91906103d8600093846103d2610315565b5261046f565b6004829392101561043b5782610431576103f29250610514565b9290600481101561041d5780610412575061040b610315565b9283529190565b90925061040b610315565b634e487b7160e01b82526021600452602482fd5b505061040b610315565b634e487b7160e01b85526021600452602485fd5b8115610459570490565b634e487b7160e01b600052601260045260246000fd5b80156104be57670de0b6b3a76400008082029180830482036104a857610495908361044f565b146104a35750600290600090565b600091565b634e487b7160e01b600052601160045260246000fd5b50600090600090565b670de0b6b3a7640000908082029182048082036104a857146104a35750600290600090565b90811561050a578082029180830482036104a857610495908361044f565b5050600090600090565b908015610524576104a39161044f565b5050600190600090565b906706f05b59d3b20000918201918281116104a857821061054f5760009190565b60029150600090565b91908201918281116104a857821061054f5760009190565b91908281116105885782039182116104a85760009190565b5060039150600090565b906105a89160006105a1610315565b52516104ec565b9190600481101561039557806105ca57506105c1610315565b91825260009190565b91506105d4610315565b6000815290565b906105e591610592565b6004821015610395578161060757670de0b6b3a7640000915051049060009190565b5090600090565b9061061891610592565b9190600481101561039557806106415750670de0b6b3a764000061063d925104610558565b9091565b91505090600090565b906105a8916000610659610315565b5251610514565b610677909291926000610671610315565b526104c7565b9092600484101561039557836106945761063d92935051906103c1565b50506105d4610315565b906105e591610660565b600092916106c391846106b9610315565b52519051906104ec565b600482101561070e5781610705576106db915061052e565b9290600481101561041d57806104125750670de0b6b3a76400006106fd610315565b930483529190565b5061040b610315565b634e487b7160e01b84526021600452602484fd5b9061073a919392936000610734610315565b526106a8565b929060048110156103955780610755575061063d91926106a8565b9050919056fea26469706673582212202371a3fa49244a1c277ce7d7a0625538776237f328e4878e6108ea0fc0074b0a64736f6c63430008130033";

export class Exponential__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Exponential> {
    return super.deploy(overrides || {}) as Promise<Exponential>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Exponential {
    return super.attach(address) as Exponential;
  }
  connect(signer: Signer): Exponential__factory {
    return super.connect(signer) as Exponential__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExponentialInterface {
    return new utils.Interface(_abi) as ExponentialInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Exponential {
    return new Contract(address, _abi, signerOrProvider) as Exponential;
  }
}
