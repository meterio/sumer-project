/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { CompoundLens, CompoundLensInterface } from "../CompoundLens";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ICToken",
        name: "cToken",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "account",
        type: "address",
      },
    ],
    name: "cTokenBalances",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "cToken",
            type: "address",
          },
          {
            internalType: "bool",
            name: "isCToken",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isCEther",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "balanceOf",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "borrowBalanceCurrent",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "balanceOfUnderlying",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tokenBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tokenAllowance",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.CTokenBalances",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ICToken[]",
        name: "cTokens",
        type: "address[]",
      },
      {
        internalType: "address payable",
        name: "account",
        type: "address",
      },
    ],
    name: "cTokenBalancesAll",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "cToken",
            type: "address",
          },
          {
            internalType: "bool",
            name: "isCToken",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isCEther",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "balanceOf",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "borrowBalanceCurrent",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "balanceOfUnderlying",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tokenBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tokenAllowance",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.CTokenBalances[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ICToken",
        name: "cToken",
        type: "address",
      },
    ],
    name: "cTokenMetadata",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "cToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "exchangeRateCurrent",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "supplyRatePerBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "borrowRatePerBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "reserveFactorMantissa",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalBorrows",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalReserves",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalCash",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isListed",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "collateralFactorMantissa",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "underlyingAssetAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "cTokenDecimals",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "underlyingDecimals",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isCToken",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isCEther",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "borrowCap",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "depositCap",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "liquidationIncentive",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.CTokenMetadata",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ICToken[]",
        name: "cTokens",
        type: "address[]",
      },
    ],
    name: "cTokenMetadataAll",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "cToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "exchangeRateCurrent",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "supplyRatePerBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "borrowRatePerBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "reserveFactorMantissa",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalBorrows",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalReserves",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalCash",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isListed",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "collateralFactorMantissa",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "underlyingAssetAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "cTokenDecimals",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "underlyingDecimals",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isCToken",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isCEther",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "borrowCap",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "depositCap",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "liquidationIncentive",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.CTokenMetadata[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ICToken",
        name: "cToken",
        type: "address",
      },
    ],
    name: "cTokenUnderlyingPrice",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "cToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "underlyingPrice",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.CTokenUnderlyingPrice",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ICToken[]",
        name: "cTokens",
        type: "address[]",
      },
    ],
    name: "cTokenUnderlyingPriceAll",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "cToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "underlyingPrice",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.CTokenUnderlyingPrice[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IComptroller",
        name: "comptroller",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getAccountLimits",
    outputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "markets",
            type: "address[]",
          },
          {
            internalType: "uint256",
            name: "liquidity",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "shortfall",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.AccountLimits",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ICToken",
        name: "comp",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getCompBalanceMetadata",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "votes",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "delegate",
            type: "address",
          },
        ],
        internalType: "struct CompoundLens.CompBalanceMetadata",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ICToken",
        name: "comp",
        type: "address",
      },
      {
        internalType: "contract IComptroller",
        name: "comptroller",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getCompBalanceMetadataExt",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "votes",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "delegate",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "allocated",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.CompBalanceMetadataExt",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ICToken",
        name: "comp",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint32[]",
        name: "blockNumbers",
        type: "uint32[]",
      },
    ],
    name: "getCompVotes",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "blockNumber",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "votes",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.CompVotes[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IGovernorBravo",
        name: "governor",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "proposalIds",
        type: "uint256[]",
      },
    ],
    name: "getGovBravoProposals",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "proposalId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "proposer",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "eta",
            type: "uint256",
          },
          {
            internalType: "address[]",
            name: "targets",
            type: "address[]",
          },
          {
            internalType: "uint256[]",
            name: "values",
            type: "uint256[]",
          },
          {
            internalType: "string[]",
            name: "signatures",
            type: "string[]",
          },
          {
            internalType: "bytes[]",
            name: "calldatas",
            type: "bytes[]",
          },
          {
            internalType: "uint256",
            name: "startBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "forVotes",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "againstVotes",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "abstainVotes",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "canceled",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "executed",
            type: "bool",
          },
        ],
        internalType: "struct CompoundLens.GovBravoProposal[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IGovernorBravo",
        name: "governor",
        type: "address",
      },
      {
        internalType: "address",
        name: "voter",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "proposalIds",
        type: "uint256[]",
      },
    ],
    name: "getGovBravoReceipts",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "proposalId",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "hasVoted",
            type: "bool",
          },
          {
            internalType: "uint8",
            name: "support",
            type: "uint8",
          },
          {
            internalType: "uint96",
            name: "votes",
            type: "uint96",
          },
        ],
        internalType: "struct CompoundLens.GovBravoReceipt[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IGovernorAlpha",
        name: "governor",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "proposalIds",
        type: "uint256[]",
      },
    ],
    name: "getGovProposals",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "proposalId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "proposer",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "eta",
            type: "uint256",
          },
          {
            internalType: "address[]",
            name: "targets",
            type: "address[]",
          },
          {
            internalType: "uint256[]",
            name: "values",
            type: "uint256[]",
          },
          {
            internalType: "string[]",
            name: "signatures",
            type: "string[]",
          },
          {
            internalType: "bytes[]",
            name: "calldatas",
            type: "bytes[]",
          },
          {
            internalType: "uint256",
            name: "startBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "forVotes",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "againstVotes",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "canceled",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "executed",
            type: "bool",
          },
        ],
        internalType: "struct CompoundLens.GovProposal[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IGovernorAlpha",
        name: "governor",
        type: "address",
      },
      {
        internalType: "address",
        name: "voter",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "proposalIds",
        type: "uint256[]",
      },
    ],
    name: "getGovReceipts",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "proposalId",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "hasVoted",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "support",
            type: "bool",
          },
          {
            internalType: "uint96",
            name: "votes",
            type: "uint96",
          },
        ],
        internalType: "struct CompoundLens.GovReceipt[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "cToken",
        type: "address",
      },
      {
        internalType: "contract IComptroller",
        name: "comptroller",
        type: "address",
      },
    ],
    name: "isDeprecated",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "cTokenBorrowed",
        type: "address",
      },
      {
        internalType: "address",
        name: "cTokenCollateral",
        type: "address",
      },
      {
        internalType: "address",
        name: "liquidator",
        type: "address",
      },
      {
        internalType: "address",
        name: "borrower",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "repayAmount",
        type: "uint256",
      },
      {
        internalType: "contract IComptroller",
        name: "comptroller",
        type: "address",
      },
    ],
    name: "liquidateBorrowAllowed",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "cTokenBorrowed",
        type: "address",
      },
      {
        internalType: "address",
        name: "cTokenCollateral",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "actualRepayAmount",
        type: "uint256",
      },
      {
        internalType: "contract IComptroller",
        name: "comptroller",
        type: "address",
      },
    ],
    name: "liquidateCalculateSeizeTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506146c2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100db5760003560e01c80630972bf8b146100e0578063158eca8b146101095780631bd886b0146101295780631ea637411461014a5780632b2d5ed61461016a5780633394fba51461018a578063416405d7146101aa57806343c811cc146101ca5780634b70d84b146101ea578063595642191461020a5780636dabf94f1461022a57806375d80e901461024a5780637dd8f6d91461026a578063969948691461028a578063995ed99f146102aa578063bdf950c9146102ca578063c5ae5934146102ea575b600080fd5b6100f36100ee3660046138b3565b61030a565b6040516101009190613ff8565b60405180910390f35b61011c61011736600461398e565b6103c2565b604051610100919061455b565b61013c6101373660046136bb565b610d81565b6040516101009291906145f6565b61015d610158366004613a0c565b6110a6565b6040516101009190614578565b61017d610178366004613874565b61142d565b604051610100919061408a565b61019d61019836600461370d565b6114de565b604051610100919061444a565b6101bd6101b836600461370d565b6116dd565b60405161010091906145ac565b6101dd6101d8366004613a4b565b611886565b6040516101009190614253565b6101fd6101f8366004613874565b6119ee565b6040516101009190614047565b61021d6102183660046139aa565b611a94565b60405161010091906140ca565b61023d610238366004613643565b611c00565b60405161010091906145d6565b61025d610258366004613aaa565b611f39565b604051610100919061410c565b61027d61027836600461370d565b612110565b6040516101009190614510565b61029d610298366004613aaa565b61224c565b60405161010091906142b8565b6102bd6102b8366004613a4b565b612413565b60405161010091906143e6565b6102dd6102d836600461370d565b61259f565b604051610100919061454c565b6102fd6102f836600461398e565b612a65565b604051610100919061456a565b6060826000816001600160401b038111801561032557600080fd5b5060405190808252806020026020018201604052801561035f57816020015b61034c6130bd565b8152602001906001900390816103445790505b50905060005b828110156103b65761039787878381811061037c57fe5b9050602002016020810190610391919061398e565b8661259f565b8282815181106103a357fe5b6020908102919091010152600101610365565b509150505b9392505050565b6103ca61310f565b6000826001600160a01b031663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561040757600080fd5b505af115801561041b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043f9190613bfa565b90506000836001600160a01b0316635fe3b5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561047c57600080fd5b505afa158015610490573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b49190613627565b9050600080826001600160a01b0316638e8f294b876040518263ffffffff1660e01b81526004016104e59190613f82565b604080518083038186803b1580156104fc57600080fd5b505afa158015610510573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105349190613963565b91509150600080876001600160a01b031663ac784ddc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561057457600080fd5b505afa158015610588573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ac9190613907565b156105bd5750600090506012610717565b876001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156105f657600080fd5b505afa15801561060a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062e9190613627565b9150876001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561066957600080fd5b505afa15801561067d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a19190613627565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156106d957600080fd5b505afa1580156106ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107119190613ce4565b60ff1690505b604051806102600160405280896001600160a01b03168152602001878152602001896001600160a01b031663ae9d70b06040518163ffffffff1660e01b815260040160206040518083038186803b15801561077157600080fd5b505afa158015610785573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a99190613bfa565b8152602001896001600160a01b031663f8f9da286040518163ffffffff1660e01b815260040160206040518083038186803b1580156107e757600080fd5b505afa1580156107fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081f9190613bfa565b8152602001896001600160a01b031663173b99046040518163ffffffff1660e01b815260040160206040518083038186803b15801561085d57600080fd5b505afa158015610871573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108959190613bfa565b8152602001896001600160a01b03166347bd37186040518163ffffffff1660e01b815260040160206040518083038186803b1580156108d357600080fd5b505afa1580156108e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090b9190613bfa565b8152602001896001600160a01b0316638f840ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561094957600080fd5b505afa15801561095d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109819190613bfa565b8152602001896001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109bf57600080fd5b505afa1580156109d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f79190613bfa565b8152602001896001600160a01b0316633b1d21a26040518163ffffffff1660e01b815260040160206040518083038186803b158015610a3557600080fd5b505afa158015610a49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6d9190613bfa565b81526020018515158152602001848152602001836001600160a01b03168152602001896001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610ac857600080fd5b505afa158015610adc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b009190613ce4565b60ff168152602001828152602001896001600160a01b031663fe9c44ae6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b4757600080fd5b505afa158015610b5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7f9190613907565b15158152602001896001600160a01b031663ac784ddc6040518163ffffffff1660e01b815260040160206040518083038186803b158015610bbf57600080fd5b505afa158015610bd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf79190613907565b15158152602001866001600160a01b031663a7e9613f8b6040518263ffffffff1660e01b8152600401610c2a9190613f82565b60206040518083038186803b158015610c4257600080fd5b505afa158015610c56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7a9190613bfa565b8152602001866001600160a01b0316639cc7becf8b6040518263ffffffff1660e01b8152600401610cab9190613f82565b60206040518083038186803b158015610cc357600080fd5b505afa158015610cd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfb9190613bfa565b8152602001866001600160a01b0316634ada90af6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d3957600080fd5b505afa158015610d4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d719190613bfa565b905296505050505050505b919050565b6000806000836001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b158015610dbf57600080fd5b505afa158015610dd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df79190613627565b90506000816001600160a01b031663fc57d4df896040518263ffffffff1660e01b8152600401610e279190613f82565b60206040518083038186803b158015610e3f57600080fd5b505afa158015610e53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e779190613bfa565b90506000826001600160a01b031663fc57d4df896040518263ffffffff1660e01b8152600401610ea79190613f82565b60206040518083038186803b158015610ebf57600080fd5b505afa158015610ed3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef79190613bfa565b9050600082118015610f095750600081115b610f2e5760405162461bcd60e51b8152600401610f2590614468565b60405180910390fd5b6000886001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b158015610f6957600080fd5b505afa158015610f7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa19190613bfa565b90506000610fad6131b9565b610fb56131b9565b610fbd6131b9565b61105360405180602001604052808981525060405180602001604052808e6001600160a01b0316634ada90af6040518163ffffffff1660e01b815260040160206040518083038186803b15801561101357600080fd5b505afa158015611027573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104b9190613bfa565b905290612bf7565b6040805160208082018352888252825190810190925288825291945061107891612bf7565b91506110848383612c36565b9050611090818d612c72565b60009f909e509c50505050505050505050505050565b6110ae6131cc565b6040516370a0823160e01b81526000906001600160a01b038616906370a08231906110dd908690600401613f82565b60206040518083038186803b1580156110f557600080fd5b505afa158015611109573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112d9190613bfa565b6040516374d7814960e11b81529091506001600160a01b0385169063e9af02929061115c908690600401613f82565b600060405180830381600087803b15801561117657600080fd5b505af115801561118a573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b03881691506370a08231906111bd908790600401613f82565b60206040518083038186803b1580156111d557600080fd5b505afa1580156111e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120d9190613bfa565b90506000856001600160a01b031663cc7ebdc4866040518263ffffffff1660e01b815260040161123d9190613f82565b60206040518083038186803b15801561125557600080fd5b505afa158015611269573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128d9190613bfa565b905060006112c282846040518060400160405280600e81526020016d1cdd5b4818dbdb5c081d1bdd185b60921b815250612c92565b905060006112f682866040518060400160405280600d81526020016c1cdd5888185b1b1bd8d85d1959609a1b815250612cb9565b905060405180608001604052808681526020018a6001600160a01b031663b4b5ea578a6040518263ffffffff1660e01b81526004016113359190613f82565b60206040518083038186803b15801561134d57600080fd5b505afa158015611361573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113859190613cfe565b6001600160601b031681526020018a6001600160a01b031663587cde1e8a6040518263ffffffff1660e01b81526004016113bf9190613f82565b60206040518083038186803b1580156113d757600080fd5b505afa1580156113eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140f9190613627565b6001600160a01b031681526020019190915298975050505050505050565b6060816000816001600160401b038111801561144857600080fd5b5060405190808252806020026020018201604052801561148257816020015b61146f6131fd565b8152602001906001900390816114675790505b50905060005b828110156114d3576114b486868381811061149f57fe5b90506020020160208101906102f8919061398e565b8282815181106114c057fe5b6020908102919091010152600101611488565b509150505b92915050565b6040516302a9bed760e61b81526000906001600160a01b0383169063aa6fb5c09061150d908690600401613f82565b60206040518083038186803b15801561152557600080fd5b505afa158015611539573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155d9190613ce4565b60ff161580156116545750816001600160a01b0316632408d5f06040518163ffffffff1660e01b815260040160206040518083038186803b1580156115a157600080fd5b505afa1580156115b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d99190613627565b6001600160a01b031663715cfdd9846040518263ffffffff1660e01b81526004016116049190613f82565b60206040518083038186803b15801561161c57600080fd5b505afa158015611630573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116549190613907565b80156103bb5750826001600160a01b031663173b99046040518163ffffffff1660e01b815260040160206040518083038186803b15801561169457600080fd5b505afa1580156116a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116cc9190613bfa565b670de0b6b3a7640000149392505050565b6116e5613214565b6040805160608101918290526370a0823160e01b909152806001600160a01b0385166370a082316117198660648501613f82565b60206040518083038186803b15801561173157600080fd5b505afa158015611745573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117699190613bfa565b8152602001846001600160a01b031663b4b5ea57856040518263ffffffff1660e01b815260040161179a9190613f82565b60206040518083038186803b1580156117b257600080fd5b505afa1580156117c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ea9190613cfe565b6001600160601b03168152602001846001600160a01b031663587cde1e856040518263ffffffff1660e01b81526004016118249190613f82565b60206040518083038186803b15801561183c57600080fd5b505afa158015611850573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118749190613627565b6001600160a01b031690529392505050565b80516060906000816001600160401b03811180156118a357600080fd5b506040519080825280602002602001820160405280156118dd57816020015b6118ca61323e565b8152602001906001900390816118c25790505b50905060005b828110156103b6576000876001600160a01b031663e23a9a5287848151811061190857fe5b6020026020010151896040518363ffffffff1660e01b815260040161192e9291906145df565b60606040518083038186803b15801561194657600080fd5b505afa15801561195a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197e9190613b96565b9050604051806080016040528087848151811061199757fe5b60200260200101518152602001826000015115158152602001826020015160ff16815260200182604001516001600160601b03168152508383815181106119da57fe5b6020908102919091010152506001016118e3565b6060816000816001600160401b0381118015611a0957600080fd5b50604051908082528060200260200182016040528015611a4357816020015b611a3061310f565b815260200190600190039081611a285790505b50905060005b828110156114d357611a75868683818110611a6057fe5b9050602002016020810190610117919061398e565b828281518110611a8157fe5b6020908102919091010152600101611a49565b60606000826001600160401b0381118015611aae57600080fd5b50604051908082528060200260200182016040528015611ae857816020015b611ad5613265565b815260200190600190039081611acd5790505b50905060005b83811015611bf6576040518060400160405280868684818110611b0d57fe5b9050602002016020810190611b229190613cc0565b63ffffffff168152602001886001600160a01b031663782d6fe189898987818110611b4957fe5b9050602002016020810190611b5e9190613cc0565b6040518363ffffffff1660e01b8152600401611b7b929190613fd9565b60206040518083038186803b158015611b9357600080fd5b505afa158015611ba7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bcb9190613cfe565b6001600160601b0316815250828281518110611be357fe5b6020908102919091010152600101611aee565b5095945050505050565b604051637bca031760e11b81526000906001600160a01b0383169063f794062e90611c2f908a90600401613f82565b60206040518083038186803b158015611c4757600080fd5b505afa158015611c5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7f9190613907565b8015611d025750604051637bca031760e11b81526001600160a01b0383169063f794062e90611cb2908990600401613f82565b60206040518083038186803b158015611cca57600080fd5b505afa158015611cde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d029190613907565b611d1e5760405162461bcd60e51b8152600401610f25906144e5565b6040516395dd919360e01b81526000906001600160a01b038916906395dd919390611d4d908890600401613f82565b60206040518083038186803b158015611d6557600080fd5b505afa158015611d79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d9d9190613bfa565b9050611da988846114de565b15611dd35783811015611dce5760405162461bcd60e51b8152600401610f25906144bd565b611f2b565b604051634e79238f60e01b81526000906001600160a01b03851690634e79238f90611e089089908d9086908190600401613fb0565b60606040518083038186803b158015611e2057600080fd5b505afa158015611e34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e589190613c93565b9250505060008111611e7c5760405162461bcd60e51b8152600401610f259061448d565b6000611f06836040518060200160405280886001600160a01b031663e87554466040518163ffffffff1660e01b815260040160206040518083038186803b158015611ec657600080fd5b505afa158015611eda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611efe9190613bfa565b905290612c72565b905080861115611f285760405162461bcd60e51b8152600401610f25906144bd565b50505b506000979650505050505050565b60606000826001600160401b0381118015611f5357600080fd5b50604051908082528060200260200182016040528015611f8d57816020015b611f7a61327f565b815260200190600190039081611f725790505b50905060005b8381101561210757600080600080896001600160a01b031663328dd9828a8a88818110611fbc57fe5b905060200201356040518263ffffffff1660e01b8152600401611fdf91906145d6565b60006040518083038186803b158015611ff757600080fd5b505afa15801561200b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120339190810190613777565b9350935093509350604051806101c001604052806000815260200160006001600160a01b03168152602001600081526020018581526020018481526020018381526020018281526020016000815260200160008152602001600081526020016000815260200160008152602001600015158152602001600015158152508686815181106120bc57fe5b60200260200101819052506120f78686815181106120d657fe5b60200260200101518b8b8b898181106120eb57fe5b90506020020135612ce5565b505060019092019150611f939050565b50949350505050565b6121186132fb565b6000806000856001600160a01b0316635ec88c79866040518263ffffffff1660e01b81526004016121499190613f82565b60606040518083038186803b15801561216157600080fd5b505afa158015612175573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121999190613c93565b925092509250826000146121ac57600080fd5b604080516060810191829052632aff3bff60e21b909152806001600160a01b03881663abfceffc6121e08960648501613f82565b60006040518083038186803b1580156121f857600080fd5b505afa15801561220c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526122349190810190613745565b81526020810193909352604090920152949350505050565b60606000826001600160401b038111801561226657600080fd5b506040519080825280602002602001820160405280156122a057816020015b61228d61331c565b8152602001906001900390816122855790505b50905060005b8381101561210757600080600080896001600160a01b031663328dd9828a8a888181106122cf57fe5b905060200201356040518263ffffffff1660e01b81526004016122f291906145d6565b60006040518083038186803b15801561230a57600080fd5b505afa15801561231e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526123469190810190613777565b9350935093509350604051806101a001604052806000815260200160006001600160a01b031681526020016000815260200185815260200184815260200183815260200182815260200160008152602001600081526020016000815260200160008152602001600015158152602001600015158152508686815181106123c857fe5b60200260200101819052506124038686815181106123e257fe5b60200260200101518b8b8b898181106123f757fe5b90506020020135612de3565b5050600190920191506122a69050565b80516060906000816001600160401b038111801561243057600080fd5b5060405190808252806020026020018201604052801561246a57816020015b61245761323e565b81526020019060019003908161244f5790505b50905060005b828110156103b657612480613391565b876001600160a01b031663e23a9a5287848151811061249b57fe5b6020026020010151896040518363ffffffff1660e01b81526004016124c19291906145df565b60606040518083038186803b1580156124d957600080fd5b505afa1580156124ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125119190613921565b6001600160601b0316604080850191909152901515602084015290151582528051608081019091528651819088908590811061254957fe5b6020026020010151815260200182600001511515815260200182602001511515815260200182604001516001600160601b031681525083838151811061258b57fe5b602090810291909101015250600101612470565b6125a76130bd565b6040516370a0823160e01b81526000906001600160a01b038516906370a08231906125d6908690600401613f82565b60206040518083038186803b1580156125ee57600080fd5b505afa158015612602573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126269190613bfa565b90506000846001600160a01b03166317bfdfbc856040518263ffffffff1660e01b81526004016126569190613f82565b602060405180830381600087803b15801561267057600080fd5b505af1158015612684573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126a89190613bfa565b90506000856001600160a01b0316633af9e669866040518263ffffffff1660e01b81526004016126d89190613f82565b602060405180830381600087803b1580156126f257600080fd5b505af1158015612706573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061272a9190613bfa565b9050600080876001600160a01b031663ac784ddc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561276857600080fd5b505afa15801561277c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a09190613907565b156127ba5750506001600160a01b03851680319031612931565b6000886001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156127f557600080fd5b505afa158015612809573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061282d9190613627565b6040516370a0823160e01b81529091506001600160a01b038216906370a082319061285c908b90600401613f82565b60206040518083038186803b15801561287457600080fd5b505afa158015612888573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ac9190613bfa565b604051636eb1769f60e11b81529093506001600160a01b0382169063dd62ed3e906128dd908b908d90600401613f96565b60206040518083038186803b1580156128f557600080fd5b505afa158015612909573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061292d9190613bfa565b9150505b604051806101000160405280896001600160a01b03168152602001896001600160a01b031663fe9c44ae6040518163ffffffff1660e01b815260040160206040518083038186803b15801561298557600080fd5b505afa158015612999573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129bd9190613907565b15158152602001896001600160a01b031663ac784ddc6040518163ffffffff1660e01b815260040160206040518083038186803b1580156129fd57600080fd5b505afa158015612a11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a359190613907565b15158152602001868152602001858152602001848152602001838152602001828152509550505050505092915050565b612a6d6131fd565b6000826001600160a01b0316635fe3b5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612aa857600080fd5b505afa158015612abc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ae09190613627565b90506000816001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b158015612b1d57600080fd5b505afa158015612b31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b559190613627565b90506040518060400160405280856001600160a01b03168152602001826001600160a01b031663fc57d4df876040518263ffffffff1660e01b8152600401612b9d9190613f82565b60206040518083038186803b158015612bb557600080fd5b505afa158015612bc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bed9190613bfa565b9052949350505050565b612bff6131b9565b6040518060200160405280670de0b6b3a7640000612c2586600001518660000151612f09565b81612c2c57fe5b0490529392505050565b612c3e6131b9565b6040518060200160405280612c69612c628660000151670de0b6b3a7640000612f09565b8551612f45565b90529392505050565b600080612c7f8484612f78565b9050612c8a81612f99565b949350505050565b600083830182858210156121075760405162461bcd60e51b8152600401610f259190614455565b60008184841115612cdd5760405162461bcd60e51b8152600401610f259190614455565b505050900390565b60405163013cf08b60e01b81526000906001600160a01b0384169063013cf08b90612d149085906004016145d6565b6101406040518083038186803b158015612d2d57600080fd5b505afa158015612d41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d659190613afc565b918452506020808201516001600160a01b03169084015260408082015190840152606081015160e08085019190915260808201516101008086019190915260a08301516101208087019190915260c0840151610140870152918301516101608601528201511515610180850152015115156101a09092019190915250565b600080600080600080600080896001600160a01b031663013cf08b8a6040518263ffffffff1660e01b8152600401612e1b91906145d6565b6101206040518083038186803b158015612e3457600080fd5b505afa158015612e48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e6c9190613c12565b9850985098509850985098509850985050888b6000018181525050878b602001906001600160a01b031690816001600160a01b031681525050868b6040018181525050858b60e0018181525050848b610100018181525050838b610120018181525050828b610140018181525050818b610160019015159081151581525050808b6101800190151590811515815250505050505050505050505050565b60006103bb8383604051806040016040528060178152602001766d756c7469706c69636174696f6e206f766572666c6f7760481b815250612fa8565b60006103bb83836040518060400160405280600e81526020016d646976696465206279207a65726f60901b81525061305b565b612f806131b9565b6040518060200160405280612c69856000015185612f09565b51670de0b6b3a7640000900490565b6000831580612fb5575082155b15612fc2575060006103bb565b83830283858281612fcf57fe5b041483906121075760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613020578181015183820152602001613008565b50505050905090810190601f16801561304d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b600081836130aa5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315613020578181015183820152602001613008565b508284816130b457fe5b04949350505050565b60405180610100016040528060006001600160a01b0316815260200160001515815260200160001515815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405180610260016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000815260200160006001600160a01b0316815260200160008152602001600081526020016000151581526020016000151581526020016000815260200160008152602001600081525090565b6040518060200160405280600081525090565b6040518060800160405280600081526020016000815260200160006001600160a01b03168152602001600081525090565b604080518082019091526000808252602082015290565b6040518060600160405280600081526020016000815260200160006001600160a01b031681525090565b60408051608081018252600080825260208201819052918101829052606081019190915290565b604051806040016040528060008152602001600081525090565b604051806101c001604052806000815260200160006001600160a01b03168152602001600081526020016060815260200160608152602001606081526020016060815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b60405180606001604052806060815260200160008152602001600081525090565b604051806101a001604052806000815260200160006001600160a01b031681526020016000815260200160608152602001606081526020016060815260200160608152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b604080516060810182526000808252602082018190529181019190915290565b60006001600160401b038311156133c457fe5b6133d7601f8401601f1916602001614604565b90508281528383830111156133eb57600080fd5b6103bb836020830184614644565b8051610d7c81614674565b600082601f830112613414578081fd5b8151602061342961342483614627565b614604565b8281528181019085830183850287018401881015613445578586fd5b855b8581101561346c57815161345a81614674565b84529284019290840190600101613447565b5090979650505050505050565b600082601f830112613489578081fd5b8151602061349961342483614627565b82815281810190858301855b8581101561346c578151880189603f8201126134bf578788fd5b6134d08a87830151604084016133b1565b85525092840192908401906001016134a5565b60008083601f8401126134f4578182fd5b5081356001600160401b0381111561350a578182fd5b602083019150836020808302850101111561352457600080fd5b9250929050565b600082601f83011261353b578081fd5b8151602061354b61342483614627565b82815281810190858301855b8581101561346c578151880189603f820112613571578788fd5b6135828a87830151604084016133b1565b8552509284019290840190600101613557565b600082601f8301126135a5578081fd5b813560206135b561342483614627565b82815281810190858301838502870184018810156135d1578586fd5b855b8581101561346c578135845292840192908401906001016135d3565b80518015158114610d7c57600080fd5b805160ff81168114610d7c57600080fd5b80516001600160601b0381168114610d7c57600080fd5b600060208284031215613638578081fd5b81516103bb81614674565b60008060008060008060c0878903121561365b578182fd5b863561366681614674565b9550602087013561367681614674565b9450604087013561368681614674565b9350606087013561369681614674565b92506080870135915060a08701356136ad81614674565b809150509295509295509295565b600080600080608085870312156136d0578182fd5b84356136db81614674565b935060208501356136eb81614674565b925060408501359150606085013561370281614674565b939692955090935050565b6000806040838503121561371f578182fd5b823561372a81614674565b9150602083013561373a81614674565b809150509250929050565b600060208284031215613756578081fd5b81516001600160401b0381111561376b578182fd5b612c8a84828501613404565b6000806000806080858703121561378c578182fd5b84516001600160401b03808211156137a2578384fd5b6137ae88838901613404565b95506020915081870151818111156137c4578485fd5b8701601f810189136137d4578485fd5b80516137e261342482614627565b81815284810190838601868402850187018d10156137fe578889fd5b8894505b83851015613820578051835260019490940193918601918601613802565b5060408b015190985094505050508082111561383a578384fd5b6138468883890161352b565b9350606087015191508082111561385b578283fd5b5061386887828801613479565b91505092959194509250565b60008060208385031215613886578182fd5b82356001600160401b0381111561389b578283fd5b6138a7858286016134e3565b90969095509350505050565b6000806000604084860312156138c7578081fd5b83356001600160401b038111156138dc578182fd5b6138e8868287016134e3565b90945092505060208401356138fc81614674565b809150509250925092565b600060208284031215613918578081fd5b6103bb826135ef565b600080600060608486031215613935578081fd5b61393e846135ef565b925061394c602085016135ef565b915061395a60408501613610565b90509250925092565b60008060408385031215613975578182fd5b61397e836135ef565b9150602083015190509250929050565b60006020828403121561399f578081fd5b81356103bb81614674565b600080600080606085870312156139bf578182fd5b84356139ca81614674565b935060208501356139da81614674565b925060408501356001600160401b038111156139f4578283fd5b613a00878288016134e3565b95989497509550505050565b600080600060608486031215613a20578081fd5b8335613a2b81614674565b92506020840135613a3b81614674565b915060408401356138fc81614674565b600080600060608486031215613a5f578081fd5b8335613a6a81614674565b92506020840135613a7a81614674565b915060408401356001600160401b03811115613a94578182fd5b613aa086828701613595565b9150509250925092565b600080600060408486031215613abe578081fd5b8335613ac981614674565b925060208401356001600160401b03811115613ae3578182fd5b613aef868287016134e3565b9497909650939450505050565b6000610140808385031215613b0f578182fd5b613b1881614604565b905082518152613b2a602084016133f9565b602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e0820152610100613b798185016135ef565b90820152610120613b8b8482016135ef565b908201529392505050565b600060608284031215613ba7578081fd5b604051606081016001600160401b0381118282101715613bc357fe5b604052613bcf836135ef565b8152613bdd602084016135ff565b6020820152613bee60408401613610565b60408201529392505050565b600060208284031215613c0b578081fd5b5051919050565b60008060008060008060008060006101208a8c031215613c30578687fd5b8951985060208a0151613c4281614674565b8098505060408a0151965060608a0151955060808a0151945060a08a0151935060c08a01519250613c7560e08b016135ef565b9150613c846101008b016135ef565b90509295985092959850929598565b600080600060608486031215613ca7578081fd5b8351925060208401519150604084015190509250925092565b600060208284031215613cd1578081fd5b813563ffffffff811681146103bb578182fd5b600060208284031215613cf5578081fd5b6103bb826135ff565b600060208284031215613d0f578081fd5b6103bb82613610565b6001600160a01b03169052565b6000815180845260208085019450808401835b83811015613d5d5781516001600160a01b031687529582019590820190600101613d38565b509495945050505050565b6000815180845260208085018081965082840281019150828601855b85811015613dae578284038952613d9c848351613df0565b98850198935090840190600101613d84565b5091979650505050505050565b6000815180845260208085019450808401835b83811015613d5d57815187529582019590820190600101613dce565b15159052565b60008151808452613e08816020860160208601614644565b601f01601f19169290920160200192915050565b60018060a01b038151168252602081015115156020830152604081015115156040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301525050565b613e81828251613d18565b6020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e083015261010080820151818401525061012080820151613ee682850182613dea565b5050610140818101519083015261016080820151613f0682850182613d18565b505061018081810151908301526101a080820151908301526101c080820151613f3182850182613dea565b50506101e080820151613f4682850182613dea565b50506102008181015190830152610220808201519083015261024090810151910152565b80516001600160a01b03168252602090810151910152565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b0392909216825263ffffffff16602082015260400190565b6020808252825182820181905260009190848201906040850190845b8181101561403b57614027838551613e1c565b928401926101009290920191600101614014565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561403b57614076838551613e76565b928401926102609290920191600101614063565b602080825282518282018190526000919060409081850190868401855b82811015613dae576140ba848351613f6a565b92840192908501906001016140a7565b602080825282518282018190526000919060409081850190868401855b82811015613dae578151805185528601518685015292840192908501906001016140e7565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561424557603f1989840301855281516101c0815185528882015161415a8a870182613d18565b508782015188860152606080830151828288015261417a83880182613d25565b92505050608080830151868303828801526141958382613dbb565b9250505060a080830151868303828801526141b08382613d68565b9250505060c080830151868303828801526141cb8382613d68565b60e085810151908901526101008086015190890152610120808601519089015261014080860151908901526101608086015190890152610180808601519194509250905061421b82880182613dea565b50506101a0918201519161423186820184613dea565b509588019593505090860190600101614130565b509098975050505050505050565b602080825282518282018190526000919060409081850190868401855b82811015613dae57815180518552868101511515878601528581015160ff16868601526060908101516001600160601b03169085015260809093019290850190600101614270565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561424557603f1989840301855281516101a081518552888201516143068a870182613d18565b508782015188860152606080830151828288015261432683880182613d25565b92505050608080830151868303828801526143418382613dbb565b9250505060a0808301518683038288015261435c8382613d68565b9250505060c080830151868303828801526143778382613d68565b60e0858101519089015261010080860151908901526101208086015190890152610140808601519089015261016080860151919450925090506143bc82880182613dea565b505061018091820151916143d286820184613dea565b5095880195935050908601906001016142dc565b602080825282518282018190526000919060409081850190868401855b82811015613dae5781518051855286810151151587860152858101511515868601526060908101516001600160601b03169085015260809093019290850190600101614403565b901515815260200190565b6000602082526103bb6020830184613df0565b6020808252600b908201526a282924a1a2afa2a92927a960a91b604082015260600190565b6020808252601690820152751a5b9cdd59999a58da595b9d081cda1bdc9d19985b1b60521b604082015260600190565b6020808252600e908201526d746f6f206d75636820726570617960901b604082015260600190565b60208082526011908201527013505492d15517d393d517d31254d51151607a1b604082015260600190565b60006020825282516060602084015261452c6080840182613d25565b905060208401516040840152604084015160608401528091505092915050565b61010081016114d88284613e1c565b61026081016114d88284613e76565b604081016114d88284613f6a565b81518152602080830151908201526040808301516001600160a01b0316908201526060918201519181019190915260800190565b81518152602080830151908201526040918201516001600160a01b03169181019190915260600190565b90815260200190565b9182526001600160a01b0316602082015260400190565b918252602082015260400190565b6040518181016001600160401b038111828210171561461f57fe5b604052919050565b60006001600160401b0382111561463a57fe5b5060209081020190565b60005b8381101561465f578181015183820152602001614647565b8381111561466e576000848401525b50505050565b6001600160a01b038116811461468957600080fd5b5056fea2646970667358221220dc595bb9d4d108d62ebb9a5d39b97edb5f6298c7a303c946692a4b73dca7f42c64736f6c63430007060033";

export class CompoundLens__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CompoundLens> {
    return super.deploy(overrides || {}) as Promise<CompoundLens>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): CompoundLens {
    return super.attach(address) as CompoundLens;
  }
  connect(signer: Signer): CompoundLens__factory {
    return super.connect(signer) as CompoundLens__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CompoundLensInterface {
    return new utils.Interface(_abi) as CompoundLensInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CompoundLens {
    return new Contract(address, _abi, signerOrProvider) as CompoundLens;
  }
}
