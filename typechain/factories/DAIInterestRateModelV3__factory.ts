/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  DAIInterestRateModelV3,
  DAIInterestRateModelV3Interface,
} from "../DAIInterestRateModelV3";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blocksPerYearOnChain",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "jumpMultiplierPerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "kink_",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "pot_",
        type: "address",
      },
      {
        internalType: "address",
        name: "jug_",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "baseRatePerBlock",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "multiplierPerBlock",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "jumpMultiplierPerBlock",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "kink",
        type: "uint256",
      },
    ],
    name: "NewInterestParams",
    type: "event",
  },
  {
    inputs: [],
    name: "assumedOneMinusReserveFactorMantissa",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "baseRatePerBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "blocksPerYear",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "dsrPerBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "gapPerBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "cash",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "borrows",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserves",
        type: "uint256",
      },
    ],
    name: "getBorrowRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "cash",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "borrows",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserves",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserveFactorMantissa",
        type: "uint256",
      },
    ],
    name: "getSupplyRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isInterestRateModel",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "jumpMultiplierPerBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "kink",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "multiplierPerBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "poke",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "baseRatePerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "multiplierPerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "jumpMultiplierPerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "kink_",
        type: "uint256",
      },
    ],
    name: "updateJumpRateModel",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blocksPerYearOnChain",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "baseRatePerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "gapPerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "jumpMultiplierPerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "kink_",
        type: "uint256",
      },
    ],
    name: "updateJumpRateModel",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "cash",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "borrows",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserves",
        type: "uint256",
      },
    ],
    name: "utilizationRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040523480156200001157600080fd5b506040516200137138038062001371833981810160405260c08110156200003757600080fd5b50805160208201516040830151606084015160808086015160a090960151600080546001600160a01b0319166001600160a01b03831617815591869052949593949293919290869080878785858480858585620000988685808686620000ff565b50505050505050505050505085668e1bc9bf04000081620000b557fe5b04600555600680546001600160a01b038086166001600160a01b0319928316179092556007805492851692909116919091179055620000f3620001e9565b5050505050506200076d565b6200011985856200045c60201b620007661790919060201c565b6002556200016e620001388683620004af602090811b620007b117901c565b6200015a670de0b6b3a764000086620004af60201b620007b11790919060201c565b6200045c60201b620007661790919060201c565b6001556200018982866200045c602090811b6200076617901c565b60038190556004829055600254600154604080519283526020830191909152818101929092526060810183905290517f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d9181900360800190a15050505050565b60075460408051636cb1c69b60e11b8152644554482d4160d81b600482015281516000936001600160a01b03169263d9638d369260248082019391829003018186803b1580156200023957600080fd5b505afa1580156200024e573d6000803e3d6000fd5b505050506040513d60408110156200026557600080fd5b505160075460408051635001f3b560e01b815290519293506000926200035092600f926200033c926b033b2e3c9fd0803ce8000000926200015a92670de0b6b3a7640000928692869262000328926001600160a01b0390921691635001f3b591600480820192602092909190829003018186803b158015620002e657600080fd5b505afa158015620002fb573d6000803e3d6000fd5b505050506040513d60208110156200031257600080fd5b50518b906200050d602090811b6200080a17901c565b6200056860201b620008641790919060201c565b620004af60201b620007b11790919060201c565b905062000376670d2f13f7789f00006200015a670de0b6b3a76400006200033c620005b2565b6002819055811115620003d757620003ce6004546200015a670de0b6b3a76400006200033c600554620003ba600254886200056860201b620008641790919060201c565b6200050d60201b6200080a1790919060201c565b60015562000406565b620004026004546200015a670de0b6b3a7640000600554620004af60201b620007b11790919060201c565b6001555b600254600154600354600454604080519485526020850193909352838301919091526060830152517f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d9181900360800190a15050565b6000620004a683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506200066960201b60201c565b90505b92915050565b600082620004c057506000620004a9565b82820282848281620004ce57fe5b0414620004a65760405162461bcd60e51b8152600401808060200182810382526021815260200180620013506021913960400191505060405180910390fd5b600082820183811015620004a6576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000620004a683836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f77008152506200071060201b60201c565b600062000664600f6200033c633b9aca006200015a6b033b2e3c9fd0803ce8000000600660009054906101000a90046001600160a01b03166001600160a01b031663487bf0826040518163ffffffff1660e01b815260040160206040518083038186803b1580156200062357600080fd5b505afa15801562000638573d6000803e3d6000fd5b505050506040513d60208110156200064f57600080fd5b50519062000568602090811b6200086417901c565b905090565b60008183620006f95760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620006bd578181015183820152602001620006a3565b50505050905090810190601f168015620006eb5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816200070657fe5b0495945050505050565b60008184841115620007655760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315620006bd578181015183820152602001620006a3565b505050900390565b608051610bbe620007926000398061050b52806105dc52806106ca5250610bbe6000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806391a30e8d11610097578063b9f9850a11610066578063b9f9850a14610266578063f14039de1461026e578063f52d21f314610276578063fd2da3391461027e57610100565b806391a30e8d146101f257806396456c5c14610227578063a385fb961461022f578063b81688161461023757610100565b80636dac7cd5116100d35780636dac7cd5146101955780636e71e2d81461019d5780638726bb89146101c65780638da5cb5b146101ce57610100565b806315f240531461010557806318178358146101405780632037f3e71461014a5780632191f92a14610179575b600080fd5b61012e6004803603606081101561011b57600080fd5b5080359060208101359060400135610286565b60408051918252519081900360200190f35b61014861029d565b005b6101486004803603608081101561016057600080fd5b50803590602081013590604081013590606001356104bd565b610181610539565b604080519115158252519081900360200190f35b61012e61053e565b61012e600480360360608110156101b357600080fd5b508035906020810135906040013561054a565b61012e61057c565b6101d6610582565b604080516001600160a01b039092168252519081900360200190f35b610148600480360360a081101561020857600080fd5b5080359060208101359060408101359060608101359060800135610591565b61012e610624565b61012e6106c8565b61012e6004803603608081101561024d57600080fd5b50803590602081013590604081013590606001356106ec565b61012e61074e565b61012e610754565b61012e61075a565b61012e610760565b60006102938484846108a6565b90505b9392505050565b60075460408051636cb1c69b60e11b8152644554482d4160d81b600482015281516000936001600160a01b03169263d9638d369260248082019391829003018186803b1580156102ec57600080fd5b505afa158015610300573d6000803e3d6000fd5b505050506040513d604081101561031657600080fd5b505160075460408051635001f3b560e01b815290519293506000926103d792600f926103cb926b033b2e3c9fd0803ce8000000926103d192670de0b6b3a764000092869286926103c5926001600160a01b0390921691635001f3b591600480820192602092909190829003018186803b15801561039257600080fd5b505afa1580156103a6573d6000803e3d6000fd5b505050506040513d60208110156103bc57600080fd5b50518b9061080a565b90610864565b906107b1565b90610766565b90506103f9670d2f13f7789f00006103d1670de0b6b3a76400006103cb610624565b6002819055811115610440576104386004546103d1670de0b6b3a76400006103cb6005546104326002548861086490919063ffffffff16565b9061080a565b600155610467565b6104636004546103d1670de0b6b3a76400006005546107b190919063ffffffff16565b6001555b600254600154600354600454604080519485526020850193909352838301919091526060830152517f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d9181900360800190a15050565b6000546001600160a01b031633146105065760405162461bcd60e51b8152600401808060200182810382526026815260200180610b636026913960400191505060405180910390fd5b6105337f000000000000000000000000000000000000000000000000000000000000000085858585610963565b50505050565b600181565b670d2f13f7789f000081565b60008261055957506000610296565b61029361056a836103c5878761080a565b6103d185670de0b6b3a76400006107b1565b60015481565b6000546001600160a01b031681565b6000546001600160a01b031633146105da5760405162461bcd60e51b8152600401808060200182810382526026815260200180610b636026913960400191505060405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000838161060357fe5b04600555610615856000808585610963565b61061d61029d565b5050505050565b60006106c3600f6103cb633b9aca006103d16b033b2e3c9fd0803ce8000000600660009054906101000a90046001600160a01b03166001600160a01b031663487bf0826040518163ffffffff1660e01b815260040160206040518083038186803b15801561069157600080fd5b505afa1580156106a5573d6000803e3d6000fd5b505050506040513d60208110156106bb57600080fd5b505190610864565b905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806106fb868686866109ea565b9050600061070d856103c5898961080a565b90508061071c57509050610746565b6000610734826103d161072d610624565b8b906107b1565b9050610740818461080a565b93505050505b949350505050565b60035481565b60025481565b60055481565b60045481565b60006107a883836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610a45565b90505b92915050565b6000826107c0575060006107ab565b828202828482816107cd57fe5b04146107a85760405162461bcd60e51b8152600401808060200182810382526021815260200180610b426021913960400191505060405180910390fd5b6000828201838110156107a8576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60006107a883836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250610ae7565b6000806108b485858561054a565b905060045481116108ee576108e6600254610432670de0b6b3a76400006103d1600154866107b190919063ffffffff16565b915050610296565b6000610919600254610432670de0b6b3a76400006103d16001546004546107b190919063ffffffff16565b905060006109326004548461086490919063ffffffff16565b905061095982610432670de0b6b3a76400006103d1600354866107b190919063ffffffff16565b9350505050610296565b61096d8486610766565b60025561097d61056a86836107b1565b60015561098a8286610766565b60038190556004829055600254600154604080519283526020830191909152818101929092526060810183905290517f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d9181900360800190a15050505050565b6000806109ff670de0b6b3a764000084610864565b90506000610a0e8787876108a6565b90506000610a28670de0b6b3a76400006103d184866107b1565b9050610740670de0b6b3a76400006103d1836103cb8c8c8c61054a565b60008183610ad15760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610a96578181015183820152602001610a7e565b50505050905090810190601f168015610ac35780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581610add57fe5b0495945050505050565b60008184841115610b395760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610a96578181015183820152602001610a7e565b50505090039056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f776f6e6c7920746865206f776e6572206d61792063616c6c20746869732066756e6374696f6e2ea2646970667358221220e71a686cbe3669b7b47a1bda60f16e7b86f927702adffe3019260d4700a01e1864736f6c63430007060033536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77";

export class DAIInterestRateModelV3__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    blocksPerYearOnChain: BigNumberish,
    jumpMultiplierPerYear: BigNumberish,
    kink_: BigNumberish,
    pot_: string,
    jug_: string,
    owner_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DAIInterestRateModelV3> {
    return super.deploy(
      blocksPerYearOnChain,
      jumpMultiplierPerYear,
      kink_,
      pot_,
      jug_,
      owner_,
      overrides || {}
    ) as Promise<DAIInterestRateModelV3>;
  }
  getDeployTransaction(
    blocksPerYearOnChain: BigNumberish,
    jumpMultiplierPerYear: BigNumberish,
    kink_: BigNumberish,
    pot_: string,
    jug_: string,
    owner_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      blocksPerYearOnChain,
      jumpMultiplierPerYear,
      kink_,
      pot_,
      jug_,
      owner_,
      overrides || {}
    );
  }
  attach(address: string): DAIInterestRateModelV3 {
    return super.attach(address) as DAIInterestRateModelV3;
  }
  connect(signer: Signer): DAIInterestRateModelV3__factory {
    return super.connect(signer) as DAIInterestRateModelV3__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DAIInterestRateModelV3Interface {
    return new utils.Interface(_abi) as DAIInterestRateModelV3Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DAIInterestRateModelV3 {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as DAIInterestRateModelV3;
  }
}
