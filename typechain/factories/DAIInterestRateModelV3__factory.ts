/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  DAIInterestRateModelV3,
  DAIInterestRateModelV3Interface,
} from "../DAIInterestRateModelV3";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blocksPerYearOnChain",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "jumpMultiplierPerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "kink_",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "pot_",
        type: "address",
      },
      {
        internalType: "address",
        name: "jug_",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "baseRatePerBlock",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "multiplierPerBlock",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "jumpMultiplierPerBlock",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "kink",
        type: "uint256",
      },
    ],
    name: "NewInterestParams",
    type: "event",
  },
  {
    inputs: [],
    name: "assumedOneMinusReserveFactorMantissa",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "baseRatePerBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "blocksPerYear",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "dsrPerBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "gapPerBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "cash",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "borrows",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserves",
        type: "uint256",
      },
    ],
    name: "getBorrowRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "cash",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "borrows",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserves",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserveFactorMantissa",
        type: "uint256",
      },
    ],
    name: "getSupplyRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isInterestRateModel",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "jumpMultiplierPerBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "kink",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "multiplierPerBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "poke",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "baseRatePerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "multiplierPerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "jumpMultiplierPerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "kink_",
        type: "uint256",
      },
    ],
    name: "updateJumpRateModel",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blocksPerYearOnChain",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "baseRatePerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "gapPerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "jumpMultiplierPerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "kink_",
        type: "uint256",
      },
    ],
    name: "updateJumpRateModel",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "cash",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "borrows",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserves",
        type: "uint256",
      },
    ],
    name: "utilizationRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040523480156200001157600080fd5b506040516200133638038062001336833981810160405260c08110156200003757600080fd5b50805160208201516040830151606084015160808086015160a090960151600080546001600160a01b0319166001600160a01b03831617815591869052949593949293919290869080878785858480858585620000988685808686620000ff565b50505050505050505050505085668e1bc9bf04000081620000b557fe5b04600555600680546001600160a01b038086166001600160a01b0319928316179092556007805492851692909116919091179055620000f3620001e9565b5050505050506200076d565b6200011985856200045c60201b620007221790919060201c565b6002556200016e620001388683620004af602090811b6200076a17901c565b6200015a670de0b6b3a764000086620004af60201b6200076a1790919060201c565b6200045c60201b620007221790919060201c565b6001556200018982866200045c602090811b6200072217901c565b60038190556004829055600254600154604080519283526020830191909152818101929092526060810183905290517f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d9181900360800190a15050505050565b60075460408051636cb1c69b60e11b8152644554482d4160d81b600482015281516000936001600160a01b03169263d9638d369260248082019391829003018186803b1580156200023957600080fd5b505afa1580156200024e573d6000803e3d6000fd5b505050506040513d60408110156200026557600080fd5b505160075460408051635001f3b560e01b815290519293506000926200035092600f926200033c926b033b2e3c9fd0803ce8000000926200015a92670de0b6b3a7640000928692869262000328926001600160a01b0390921691635001f3b591600480820192602092909190829003018186803b158015620002e657600080fd5b505afa158015620002fb573d6000803e3d6000fd5b505050506040513d60208110156200031257600080fd5b50518b906200050d602090811b620007c317901c565b6200056860201b6200081b1790919060201c565b620004af60201b6200076a1790919060201c565b905062000376670d2f13f7789f00006200015a670de0b6b3a76400006200033c620005b2565b6002819055811115620003d757620003ce6004546200015a670de0b6b3a76400006200033c600554620003ba600254886200056860201b6200081b1790919060201c565b6200050d60201b620007c31790919060201c565b60015562000406565b620004026004546200015a670de0b6b3a7640000600554620004af60201b6200076a1790919060201c565b6001555b600254600154600354600454604080519485526020850193909352838301919091526060830152517f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d9181900360800190a15050565b6000620004a683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506200066960201b60201c565b90505b92915050565b600082620004c057506000620004a9565b82820282848281620004ce57fe5b0414620004a65760405162461bcd60e51b8152600401808060200182810382526021815260200180620013156021913960400191505060405180910390fd5b600082820183811015620004a6576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000620004a683836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f77008152506200071060201b60201c565b600062000664600f6200033c633b9aca006200015a6b033b2e3c9fd0803ce8000000600660009054906101000a90046001600160a01b03166001600160a01b031663487bf0826040518163ffffffff1660e01b815260040160206040518083038186803b1580156200062357600080fd5b505afa15801562000638573d6000803e3d6000fd5b505050506040513d60208110156200064f57600080fd5b50519062000568602090811b6200081b17901c565b905090565b60008183620006f95760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620006bd578181015183820152602001620006a3565b50505050905090810190601f168015620006eb5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816200070657fe5b0495945050505050565b60008184841115620007655760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315620006bd578181015183820152602001620006a3565b505050900390565b608051610b8362000792600039806104c8528061059952806106865250610b836000f3fe608060405234801561001057600080fd5b50600436106100d05760003560e01c806315f24053146100d557806318178358146101105780632037f3e71461011a5780632191f92a146101495780636dac7cd5146101655780636e71e2d81461016d5780638726bb89146101965780638da5cb5b1461019e57806391a30e8d146101c257806396456c5c146101f7578063a385fb96146101ff578063b816881614610207578063b9f9850a14610236578063f14039de1461023e578063f52d21f314610246578063fd2da3391461024e575b600080fd5b6100fe600480360360608110156100eb57600080fd5b5080359060208101359060400135610256565b60408051918252519081900360200190f35b61011861026d565b005b6101186004803603608081101561013057600080fd5b508035906020810135906040810135906060013561047a565b6101516104f6565b604080519115158252519081900360200190f35b6100fe6104fb565b6100fe6004803603606081101561018357600080fd5b5080359060208101359060400135610507565b6100fe610539565b6101a661053f565b604080516001600160a01b039092168252519081900360200190f35b610118600480360360a08110156101d857600080fd5b508035906020810135906040810135906060810135906080013561054e565b6100fe6105e1565b6100fe610684565b6100fe6004803603608081101561021d57600080fd5b50803590602081013590604081013590606001356106a8565b6100fe61070a565b6100fe610710565b6100fe610716565b6100fe61071c565b600061026384848461085d565b90505b9392505050565b60075460408051636cb1c69b60e11b8152644554482d4160d81b600482015281516000936001600160a01b03169263d9638d369260248082019391829003018186803b1580156102bc57600080fd5b505afa1580156102d0573d6000803e3d6000fd5b505050506040513d60408110156102e657600080fd5b505160075460408051635001f3b560e01b815290519293506000926103a692600f9261039a92676765c793fa10079d601b1b926103a092670de0b6b3a76400009286928692610394926001600160a01b0390921691635001f3b591600480820192602092909190829003018186803b15801561036157600080fd5b505afa158015610375573d6000803e3d6000fd5b505050506040513d602081101561038b57600080fd5b50518b906107c3565b9061081b565b9061076a565b90610722565b90506103c8670d2f13f7789f00006103a0670de0b6b3a764000061039a6105e1565b600281905581111561040f576104076004546103a0670de0b6b3a764000061039a6005546104016002548861081b90919063ffffffff16565b906107c3565b600155610436565b6104326004546103a0670de0b6b3a764000060055461076a90919063ffffffff16565b6001555b60025460015460035460045460408051948552602085019390935283830191909152606083015251600080516020610ae78339815191529181900360800190a15050565b6000546001600160a01b031633146104c35760405162461bcd60e51b8152600401808060200182810382526026815260200180610b286026913960400191505060405180910390fd5b6104f07f00000000000000000000000000000000000000000000000000000000000000008585858561091a565b50505050565b600181565b670d2f13f7789f000081565b60008261051657506000610266565b6102636105278361039487876107c3565b6103a085670de0b6b3a764000061076a565b60015481565b6000546001600160a01b031681565b6000546001600160a01b031633146105975760405162461bcd60e51b8152600401808060200182810382526026815260200180610b286026913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000083816105c057fe5b046005556105d285600080858561091a565b6105da61026d565b5050505050565b600061067f600f61039a633b9aca006103a0676765c793fa10079d601b1b600660009054906101000a90046001600160a01b03166001600160a01b031663487bf0826040518163ffffffff1660e01b815260040160206040518083038186803b15801561064d57600080fd5b505afa158015610661573d6000803e3d6000fd5b505050506040513d602081101561067757600080fd5b50519061081b565b905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806106b78686868661098f565b905060006106c98561039489896107c3565b9050806106d857509050610702565b60006106f0826103a06106e96105e1565b8b9061076a565b90506106fc81846107c3565b93505050505b949350505050565b60035481565b60025481565b60055481565b60045481565b600061076183836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b8152506109ea565b90505b92915050565b60008261077957506000610764565b8282028284828161078657fe5b04146107615760405162461bcd60e51b8152600401808060200182810382526021815260200180610b076021913960400191505060405180910390fd5b600082820183811015610761576040805162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604482015290519081900360640190fd5b600061076183836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250610a8c565b60008061086b858585610507565b905060045481116108a55761089d600254610401670de0b6b3a76400006103a06001548661076a90919063ffffffff16565b915050610266565b60006108d0600254610401670de0b6b3a76400006103a060015460045461076a90919063ffffffff16565b905060006108e96004548461081b90919063ffffffff16565b905061091082610401670de0b6b3a76400006103a06003548661076a90919063ffffffff16565b9350505050610266565b6109248486610722565b600255610934610527868361076a565b6001556109418286610722565b6003819055600482905560025460015460408051928352602083019190915281810192909252606081018390529051600080516020610ae78339815191529181900360800190a15050505050565b6000806109a4670de0b6b3a76400008461081b565b905060006109b387878761085d565b905060006109cd670de0b6b3a76400006103a0848661076a565b90506106fc670de0b6b3a76400006103a08361039a8c8c8c610507565b60008183610a765760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610a3b578181015183820152602001610a23565b50505050905090810190601f168015610a685780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581610a8257fe5b0495945050505050565b60008184841115610ade5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610a3b578181015183820152602001610a23565b50505090039056fe6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f776f6e6c7920746865206f776e6572206d61792063616c6c20746869732066756e6374696f6e2ea2646970667358221220510d870e48a7063bd629df9743bd84fcd1bca2f31a7c7c5643ba90234678882364736f6c63430007060033536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77";

export class DAIInterestRateModelV3__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    blocksPerYearOnChain: BigNumberish,
    jumpMultiplierPerYear: BigNumberish,
    kink_: BigNumberish,
    pot_: string,
    jug_: string,
    owner_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DAIInterestRateModelV3> {
    return super.deploy(
      blocksPerYearOnChain,
      jumpMultiplierPerYear,
      kink_,
      pot_,
      jug_,
      owner_,
      overrides || {}
    ) as Promise<DAIInterestRateModelV3>;
  }
  getDeployTransaction(
    blocksPerYearOnChain: BigNumberish,
    jumpMultiplierPerYear: BigNumberish,
    kink_: BigNumberish,
    pot_: string,
    jug_: string,
    owner_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      blocksPerYearOnChain,
      jumpMultiplierPerYear,
      kink_,
      pot_,
      jug_,
      owner_,
      overrides || {}
    );
  }
  attach(address: string): DAIInterestRateModelV3 {
    return super.attach(address) as DAIInterestRateModelV3;
  }
  connect(signer: Signer): DAIInterestRateModelV3__factory {
    return super.connect(signer) as DAIInterestRateModelV3__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DAIInterestRateModelV3Interface {
    return new utils.Interface(_abi) as DAIInterestRateModelV3Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DAIInterestRateModelV3 {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as DAIInterestRateModelV3;
  }
}
