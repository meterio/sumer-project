/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ITimelockInterface extends ethers.utils.Interface {
  functions: {
    "createAgreement(uint8,address,uint256,address)": FunctionFragment;
    "isSupport(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createAgreement",
    values: [BigNumberish, string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "isSupport", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "createAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isSupport", data: BytesLike): Result;

  events: {
    "AgreementClaimed(uint256,uint8,address,uint256,address)": EventFragment;
    "AgreementCreated(uint256,uint8,address,uint256,address,uint256)": EventFragment;
    "AgreementFrozen(uint256,bool)": EventFragment;
    "RescueERC20(address,address,uint256)": EventFragment;
    "TimeLockFrozen(bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AgreementClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementFrozen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RescueERC20"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TimeLockFrozen"): EventFragment;
}

export type AgreementClaimedEvent = TypedEvent<
  [BigNumber, number, string, BigNumber, string] & {
    agreementId: BigNumber;
    actionType: number;
    asset: string;
    amount: BigNumber;
    beneficiary: string;
  }
>;

export type AgreementCreatedEvent = TypedEvent<
  [BigNumber, number, string, BigNumber, string, BigNumber] & {
    agreementId: BigNumber;
    actionType: number;
    asset: string;
    amount: BigNumber;
    beneficiary: string;
    releaseTime: BigNumber;
  }
>;

export type AgreementFrozenEvent = TypedEvent<
  [BigNumber, boolean] & { agreementId: BigNumber; value: boolean }
>;

export type RescueERC20Event = TypedEvent<
  [string, string, BigNumber] & { token: string; to: string; amount: BigNumber }
>;

export type TimeLockFrozenEvent = TypedEvent<[boolean] & { value: boolean }>;

export class ITimelock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ITimelockInterface;

  functions: {
    createAgreement(
      actionType: BigNumberish,
      underlying: string,
      amount: BigNumberish,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isSupport(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  createAgreement(
    actionType: BigNumberish,
    underlying: string,
    amount: BigNumberish,
    beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isSupport(underlying: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    createAgreement(
      actionType: BigNumberish,
      underlying: string,
      amount: BigNumberish,
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSupport(underlying: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "AgreementClaimed(uint256,uint8,address,uint256,address)"(
      agreementId?: null,
      actionType?: null,
      asset?: string | null,
      amount?: null,
      beneficiary?: string | null
    ): TypedEventFilter<
      [BigNumber, number, string, BigNumber, string],
      {
        agreementId: BigNumber;
        actionType: number;
        asset: string;
        amount: BigNumber;
        beneficiary: string;
      }
    >;

    AgreementClaimed(
      agreementId?: null,
      actionType?: null,
      asset?: string | null,
      amount?: null,
      beneficiary?: string | null
    ): TypedEventFilter<
      [BigNumber, number, string, BigNumber, string],
      {
        agreementId: BigNumber;
        actionType: number;
        asset: string;
        amount: BigNumber;
        beneficiary: string;
      }
    >;

    "AgreementCreated(uint256,uint8,address,uint256,address,uint256)"(
      agreementId?: null,
      actionType?: null,
      asset?: string | null,
      amount?: null,
      beneficiary?: string | null,
      releaseTime?: null
    ): TypedEventFilter<
      [BigNumber, number, string, BigNumber, string, BigNumber],
      {
        agreementId: BigNumber;
        actionType: number;
        asset: string;
        amount: BigNumber;
        beneficiary: string;
        releaseTime: BigNumber;
      }
    >;

    AgreementCreated(
      agreementId?: null,
      actionType?: null,
      asset?: string | null,
      amount?: null,
      beneficiary?: string | null,
      releaseTime?: null
    ): TypedEventFilter<
      [BigNumber, number, string, BigNumber, string, BigNumber],
      {
        agreementId: BigNumber;
        actionType: number;
        asset: string;
        amount: BigNumber;
        beneficiary: string;
        releaseTime: BigNumber;
      }
    >;

    "AgreementFrozen(uint256,bool)"(
      agreementId?: null,
      value?: null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { agreementId: BigNumber; value: boolean }
    >;

    AgreementFrozen(
      agreementId?: null,
      value?: null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { agreementId: BigNumber; value: boolean }
    >;

    "RescueERC20(address,address,uint256)"(
      token?: string | null,
      to?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; to: string; amount: BigNumber }
    >;

    RescueERC20(
      token?: string | null,
      to?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; to: string; amount: BigNumber }
    >;

    "TimeLockFrozen(bool)"(
      value?: null
    ): TypedEventFilter<[boolean], { value: boolean }>;

    TimeLockFrozen(
      value?: null
    ): TypedEventFilter<[boolean], { value: boolean }>;
  };

  estimateGas: {
    createAgreement(
      actionType: BigNumberish,
      underlying: string,
      amount: BigNumberish,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isSupport(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createAgreement(
      actionType: BigNumberish,
      underlying: string,
      amount: BigNumberish,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isSupport(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
