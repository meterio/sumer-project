/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IPythEventsInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "BatchPriceFeedUpdate(uint16,uint64)": EventFragment;
    "PriceFeedUpdate(bytes32,uint64,int64,uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BatchPriceFeedUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceFeedUpdate"): EventFragment;
}

export type BatchPriceFeedUpdateEvent = TypedEvent<
  [number, BigNumber] & { chainId: number; sequenceNumber: BigNumber }
>;

export type PriceFeedUpdateEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    id: string;
    publishTime: BigNumber;
    price: BigNumber;
    conf: BigNumber;
  }
>;

export class IPythEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPythEventsInterface;

  functions: {};

  callStatic: {};

  filters: {
    "BatchPriceFeedUpdate(uint16,uint64)"(
      chainId?: null,
      sequenceNumber?: null
    ): TypedEventFilter<
      [number, BigNumber],
      { chainId: number; sequenceNumber: BigNumber }
    >;

    BatchPriceFeedUpdate(
      chainId?: null,
      sequenceNumber?: null
    ): TypedEventFilter<
      [number, BigNumber],
      { chainId: number; sequenceNumber: BigNumber }
    >;

    "PriceFeedUpdate(bytes32,uint64,int64,uint64)"(
      id?: BytesLike | null,
      publishTime?: null,
      price?: null,
      conf?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      { id: string; publishTime: BigNumber; price: BigNumber; conf: BigNumber }
    >;

    PriceFeedUpdate(
      id?: BytesLike | null,
      publishTime?: null,
      price?: null,
      conf?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      { id: string; publishTime: BigNumber; price: BigNumber; conf: BigNumber }
    >;
  };

  estimateGas: {};

  populateTransaction: {};
}
