/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface CompLogicInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "_grantComp(address,uint256)": FunctionFragment;
    "_setCompSpeeds(address[],uint256[],uint256[])": FunctionFragment;
    "_setContributorCompSpeed(address,uint256)": FunctionFragment;
    "calculateComp(address)": FunctionFragment;
    "claimComp(address,address[])": FunctionFragment;
    "comp()": FunctionFragment;
    "compAccrued(address)": FunctionFragment;
    "compBorrowSpeeds(address)": FunctionFragment;
    "compBorrowState(address)": FunctionFragment;
    "compBorrowerIndex(address,address)": FunctionFragment;
    "compContributorSpeeds(address)": FunctionFragment;
    "compInitialIndex()": FunctionFragment;
    "compSupplierIndex(address,address)": FunctionFragment;
    "compSupplySpeeds(address)": FunctionFragment;
    "compSupplyState(address)": FunctionFragment;
    "comptroller()": FunctionFragment;
    "distributeBorrowerComp(address,address,(uint256))": FunctionFragment;
    "distributeSupplierComp(address,address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "initializeMarket(address,uint32)": FunctionFragment;
    "lastContributorBlock(address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setCompSpeed(address,uint256,uint256)": FunctionFragment;
    "setComptroller(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "updateCompBorrowIndex(address,(uint256))": FunctionFragment;
    "updateCompSupplyIndex(address)": FunctionFragment;
    "updateContributorRewards(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_grantComp",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setCompSpeeds",
    values: [string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_setContributorCompSpeed",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateComp",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimComp",
    values: [string, string[]]
  ): string;
  encodeFunctionData(functionFragment: "comp", values?: undefined): string;
  encodeFunctionData(functionFragment: "compAccrued", values: [string]): string;
  encodeFunctionData(
    functionFragment: "compBorrowSpeeds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "compBorrowState",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "compBorrowerIndex",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "compContributorSpeeds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "compInitialIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "compSupplierIndex",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "compSupplySpeeds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "compSupplyState",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "comptroller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributeBorrowerComp",
    values: [string, string, { mantissa: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeSupplierComp",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeMarket",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastContributorBlock",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCompSpeed",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setComptroller",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCompBorrowIndex",
    values: [string, { mantissa: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCompSupplyIndex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateContributorRewards",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_grantComp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_setCompSpeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setContributorCompSpeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateComp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimComp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "comp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "compAccrued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compBorrowSpeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compBorrowState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compBorrowerIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compContributorSpeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compInitialIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compSupplierIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compSupplySpeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compSupplyState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "comptroller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeBorrowerComp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeSupplierComp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastContributorBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCompSpeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setComptroller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCompBorrowIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCompSupplyIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateContributorRewards",
    data: BytesLike
  ): Result;

  events: {
    "CompBorrowSpeedUpdated(address,uint256)": EventFragment;
    "CompGranted(address,uint256)": EventFragment;
    "CompSupplySpeedUpdated(address,uint256)": EventFragment;
    "ContributorCompSpeedUpdated(address,uint256)": EventFragment;
    "DistributedBorrowerComp(address,address,uint256,uint256)": EventFragment;
    "DistributedSupplierComp(address,address,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SetComptroller(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CompBorrowSpeedUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CompGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CompSupplySpeedUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ContributorCompSpeedUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributedBorrowerComp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributedSupplierComp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetComptroller"): EventFragment;
}

export type CompBorrowSpeedUpdatedEvent = TypedEvent<
  [string, BigNumber] & { cToken: string; newSpeed: BigNumber }
>;

export type CompGrantedEvent = TypedEvent<
  [string, BigNumber] & { recipient: string; amount: BigNumber }
>;

export type CompSupplySpeedUpdatedEvent = TypedEvent<
  [string, BigNumber] & { cToken: string; newSpeed: BigNumber }
>;

export type ContributorCompSpeedUpdatedEvent = TypedEvent<
  [string, BigNumber] & { contributor: string; newSpeed: BigNumber }
>;

export type DistributedBorrowerCompEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    cToken: string;
    borrower: string;
    compDelta: BigNumber;
    compBorrowIndex: BigNumber;
  }
>;

export type DistributedSupplierCompEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    cToken: string;
    supplier: string;
    compDelta: BigNumber;
    compSupplyIndex: BigNumber;
  }
>;

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type SetComptrollerEvent = TypedEvent<
  [string] & { comptroller: string }
>;

export class CompLogic extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CompLogicInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    _grantComp(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _setCompSpeeds(
      cTokens: string[],
      supplySpeeds: BigNumberish[],
      borrowSpeeds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _setContributorCompSpeed(
      contributor: string,
      compSpeed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateComp(
      holder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "claimComp(address,address[])"(
      holder: string,
      cTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimComp(address[],address[],bool,bool)"(
      holders: string[],
      cTokens: string[],
      borrowers: boolean,
      suppliers: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimComp(address)"(
      holder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    comp(overrides?: CallOverrides): Promise<[string]>;

    compAccrued(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    compBorrowSpeeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    compBorrowState(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

    compBorrowerIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    compContributorSpeeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    compInitialIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    compSupplierIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    compSupplySpeeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    compSupplyState(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

    comptroller(overrides?: CallOverrides): Promise<[string]>;

    distributeBorrowerComp(
      cToken: string,
      borrower: string,
      marketBorrowIndex: { mantissa: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distributeSupplierComp(
      cToken: string,
      supplier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _admin: string,
      _comp: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeMarket(
      cToken: string,
      blockNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastContributorBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCompSpeed(
      cToken: string,
      supplySpeed: BigNumberish,
      borrowSpeed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setComptroller(
      _comptroller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updateCompBorrowIndex(
      cToken: string,
      marketBorrowIndex: { mantissa: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCompSupplyIndex(
      cToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateContributorRewards(
      contributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  _grantComp(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _setCompSpeeds(
    cTokens: string[],
    supplySpeeds: BigNumberish[],
    borrowSpeeds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _setContributorCompSpeed(
    contributor: string,
    compSpeed: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateComp(holder: string, overrides?: CallOverrides): Promise<BigNumber>;

  "claimComp(address,address[])"(
    holder: string,
    cTokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimComp(address[],address[],bool,bool)"(
    holders: string[],
    cTokens: string[],
    borrowers: boolean,
    suppliers: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimComp(address)"(
    holder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  comp(overrides?: CallOverrides): Promise<string>;

  compAccrued(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  compBorrowSpeeds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  compBorrowState(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

  compBorrowerIndex(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  compContributorSpeeds(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  compInitialIndex(overrides?: CallOverrides): Promise<BigNumber>;

  compSupplierIndex(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  compSupplySpeeds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  compSupplyState(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

  comptroller(overrides?: CallOverrides): Promise<string>;

  distributeBorrowerComp(
    cToken: string,
    borrower: string,
    marketBorrowIndex: { mantissa: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distributeSupplierComp(
    cToken: string,
    supplier: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _admin: string,
    _comp: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeMarket(
    cToken: string,
    blockNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastContributorBlock(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCompSpeed(
    cToken: string,
    supplySpeed: BigNumberish,
    borrowSpeed: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setComptroller(
    _comptroller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updateCompBorrowIndex(
    cToken: string,
    marketBorrowIndex: { mantissa: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCompSupplyIndex(
    cToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateContributorRewards(
    contributor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    _grantComp(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _setCompSpeeds(
      cTokens: string[],
      supplySpeeds: BigNumberish[],
      borrowSpeeds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    _setContributorCompSpeed(
      contributor: string,
      compSpeed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateComp(
      holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimComp(address,address[])"(
      holder: string,
      cTokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "claimComp(address[],address[],bool,bool)"(
      holders: string[],
      cTokens: string[],
      borrowers: boolean,
      suppliers: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimComp(address)"(
      holder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    comp(overrides?: CallOverrides): Promise<string>;

    compAccrued(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    compBorrowSpeeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compBorrowState(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

    compBorrowerIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compContributorSpeeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compInitialIndex(overrides?: CallOverrides): Promise<BigNumber>;

    compSupplierIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compSupplySpeeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compSupplyState(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

    comptroller(overrides?: CallOverrides): Promise<string>;

    distributeBorrowerComp(
      cToken: string,
      borrower: string,
      marketBorrowIndex: { mantissa: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    distributeSupplierComp(
      cToken: string,
      supplier: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _admin: string,
      _comp: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeMarket(
      cToken: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lastContributorBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCompSpeed(
      cToken: string,
      supplySpeed: BigNumberish,
      borrowSpeed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setComptroller(
      _comptroller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateCompBorrowIndex(
      cToken: string,
      marketBorrowIndex: { mantissa: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    updateCompSupplyIndex(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateContributorRewards(
      contributor: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CompBorrowSpeedUpdated(address,uint256)"(
      cToken?: string | null,
      newSpeed?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { cToken: string; newSpeed: BigNumber }
    >;

    CompBorrowSpeedUpdated(
      cToken?: string | null,
      newSpeed?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { cToken: string; newSpeed: BigNumber }
    >;

    "CompGranted(address,uint256)"(
      recipient?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { recipient: string; amount: BigNumber }
    >;

    CompGranted(
      recipient?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { recipient: string; amount: BigNumber }
    >;

    "CompSupplySpeedUpdated(address,uint256)"(
      cToken?: string | null,
      newSpeed?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { cToken: string; newSpeed: BigNumber }
    >;

    CompSupplySpeedUpdated(
      cToken?: string | null,
      newSpeed?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { cToken: string; newSpeed: BigNumber }
    >;

    "ContributorCompSpeedUpdated(address,uint256)"(
      contributor?: string | null,
      newSpeed?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { contributor: string; newSpeed: BigNumber }
    >;

    ContributorCompSpeedUpdated(
      contributor?: string | null,
      newSpeed?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { contributor: string; newSpeed: BigNumber }
    >;

    "DistributedBorrowerComp(address,address,uint256,uint256)"(
      cToken?: string | null,
      borrower?: string | null,
      compDelta?: null,
      compBorrowIndex?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        cToken: string;
        borrower: string;
        compDelta: BigNumber;
        compBorrowIndex: BigNumber;
      }
    >;

    DistributedBorrowerComp(
      cToken?: string | null,
      borrower?: string | null,
      compDelta?: null,
      compBorrowIndex?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        cToken: string;
        borrower: string;
        compDelta: BigNumber;
        compBorrowIndex: BigNumber;
      }
    >;

    "DistributedSupplierComp(address,address,uint256,uint256)"(
      cToken?: string | null,
      supplier?: string | null,
      compDelta?: null,
      compSupplyIndex?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        cToken: string;
        supplier: string;
        compDelta: BigNumber;
        compSupplyIndex: BigNumber;
      }
    >;

    DistributedSupplierComp(
      cToken?: string | null,
      supplier?: string | null,
      compDelta?: null,
      compSupplyIndex?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        cToken: string;
        supplier: string;
        compDelta: BigNumber;
        compSupplyIndex: BigNumber;
      }
    >;

    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "SetComptroller(address)"(
      comptroller?: null
    ): TypedEventFilter<[string], { comptroller: string }>;

    SetComptroller(
      comptroller?: null
    ): TypedEventFilter<[string], { comptroller: string }>;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    _grantComp(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _setCompSpeeds(
      cTokens: string[],
      supplySpeeds: BigNumberish[],
      borrowSpeeds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _setContributorCompSpeed(
      contributor: string,
      compSpeed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateComp(
      holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimComp(address,address[])"(
      holder: string,
      cTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimComp(address[],address[],bool,bool)"(
      holders: string[],
      cTokens: string[],
      borrowers: boolean,
      suppliers: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimComp(address)"(
      holder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    comp(overrides?: CallOverrides): Promise<BigNumber>;

    compAccrued(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    compBorrowSpeeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compBorrowState(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compBorrowerIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compContributorSpeeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compInitialIndex(overrides?: CallOverrides): Promise<BigNumber>;

    compSupplierIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compSupplySpeeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compSupplyState(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    comptroller(overrides?: CallOverrides): Promise<BigNumber>;

    distributeBorrowerComp(
      cToken: string,
      borrower: string,
      marketBorrowIndex: { mantissa: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distributeSupplierComp(
      cToken: string,
      supplier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _admin: string,
      _comp: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeMarket(
      cToken: string,
      blockNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastContributorBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCompSpeed(
      cToken: string,
      supplySpeed: BigNumberish,
      borrowSpeed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setComptroller(
      _comptroller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateCompBorrowIndex(
      cToken: string,
      marketBorrowIndex: { mantissa: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCompSupplyIndex(
      cToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateContributorRewards(
      contributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _grantComp(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _setCompSpeeds(
      cTokens: string[],
      supplySpeeds: BigNumberish[],
      borrowSpeeds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _setContributorCompSpeed(
      contributor: string,
      compSpeed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateComp(
      holder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimComp(address,address[])"(
      holder: string,
      cTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimComp(address[],address[],bool,bool)"(
      holders: string[],
      cTokens: string[],
      borrowers: boolean,
      suppliers: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimComp(address)"(
      holder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    comp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    compAccrued(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    compBorrowSpeeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    compBorrowState(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    compBorrowerIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    compContributorSpeeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    compInitialIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    compSupplierIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    compSupplySpeeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    compSupplyState(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    comptroller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributeBorrowerComp(
      cToken: string,
      borrower: string,
      marketBorrowIndex: { mantissa: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distributeSupplierComp(
      cToken: string,
      supplier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _admin: string,
      _comp: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeMarket(
      cToken: string,
      blockNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastContributorBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCompSpeed(
      cToken: string,
      supplySpeed: BigNumberish,
      borrowSpeed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setComptroller(
      _comptroller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateCompBorrowIndex(
      cToken: string,
      marketBorrowIndex: { mantissa: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCompSupplyIndex(
      cToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateContributorRewards(
      contributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
