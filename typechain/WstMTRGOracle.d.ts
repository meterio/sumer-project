/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface WstMTRGOracleInterface extends ethers.utils.Interface {
  functions: {
    "feedId()": FunctionFragment;
    "getPriceUnsafe(bytes32)": FunctionFragment;
    "mtrgFeed()": FunctionFragment;
    "wstMTRG()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "feedId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPriceUnsafe",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "mtrgFeed", values?: undefined): string;
  encodeFunctionData(functionFragment: "wstMTRG", values?: undefined): string;

  decodeFunctionResult(functionFragment: "feedId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriceUnsafe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mtrgFeed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wstMTRG", data: BytesLike): Result;

  events: {};
}

export class WstMTRGOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: WstMTRGOracleInterface;

  functions: {
    feedId(overrides?: CallOverrides): Promise<[string]>;

    getPriceUnsafe(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, number, BigNumber] & {
          price: BigNumber;
          conf: BigNumber;
          expo: number;
          publishTime: BigNumber;
        }
      ] & {
        price: [BigNumber, BigNumber, number, BigNumber] & {
          price: BigNumber;
          conf: BigNumber;
          expo: number;
          publishTime: BigNumber;
        };
      }
    >;

    mtrgFeed(overrides?: CallOverrides): Promise<[string]>;

    wstMTRG(overrides?: CallOverrides): Promise<[string]>;
  };

  feedId(overrides?: CallOverrides): Promise<string>;

  getPriceUnsafe(
    id: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number, BigNumber] & {
      price: BigNumber;
      conf: BigNumber;
      expo: number;
      publishTime: BigNumber;
    }
  >;

  mtrgFeed(overrides?: CallOverrides): Promise<string>;

  wstMTRG(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    feedId(overrides?: CallOverrides): Promise<string>;

    getPriceUnsafe(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, BigNumber] & {
        price: BigNumber;
        conf: BigNumber;
        expo: number;
        publishTime: BigNumber;
      }
    >;

    mtrgFeed(overrides?: CallOverrides): Promise<string>;

    wstMTRG(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    feedId(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceUnsafe(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mtrgFeed(overrides?: CallOverrides): Promise<BigNumber>;

    wstMTRG(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    feedId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPriceUnsafe(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mtrgFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wstMTRG(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
