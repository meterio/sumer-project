/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface FeedPriceOracleInterface extends ethers.utils.Interface {
  functions: {
    "changeOwner(address)": FunctionFragment;
    "feeds(address)": FunctionFragment;
    "fixedPrices(address)": FunctionFragment;
    "getFeed(address)": FunctionFragment;
    "getFixedPrice(address)": FunctionFragment;
    "getUnderlyingPrice(address)": FunctionFragment;
    "getUnderlyingPrices(address[])": FunctionFragment;
    "isPriceOracle()": FunctionFragment;
    "owner()": FunctionFragment;
    "removeFeed(address)": FunctionFragment;
    "removeFixedPrice(address)": FunctionFragment;
    "setBandFeed(address,address,uint8,string)": FunctionFragment;
    "setChainlinkFeed(address,address)": FunctionFragment;
    "setFixedPrice(address,uint256)": FunctionFragment;
    "setWitnetFeed(address,address,uint8)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "changeOwner", values: [string]): string;
  encodeFunctionData(functionFragment: "feeds", values: [string]): string;
  encodeFunctionData(functionFragment: "fixedPrices", values: [string]): string;
  encodeFunctionData(functionFragment: "getFeed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getFixedPrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingPrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingPrices",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isPriceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "removeFeed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeFixedPrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBandFeed",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setChainlinkFeed",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFixedPrice",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWitnetFeed",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "changeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fixedPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFixedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFixedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBandFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChainlinkFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFixedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWitnetFeed",
    data: BytesLike
  ): Result;

  events: {
    "SetFeed(address,uint8,address,uint8,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetFeed"): EventFragment;
}

export type SetFeedEvent = TypedEvent<
  [string, number, string, number, string] & {
    cToken_: string;
    source: number;
    addr: string;
    feedDecimals: number;
    name: string;
  }
>;

export class FeedPriceOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FeedPriceOracleInterface;

  functions: {
    changeOwner(
      owner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, string, number, string] & {
        source: number;
        addr: string;
        feedDecimals: number;
        name: string;
      }
    >;

    fixedPrices(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getFeed(
      cToken_: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [number, string, number, string] & {
          source: number;
          addr: string;
          feedDecimals: number;
          name: string;
        }
      ]
    >;

    getFixedPrice(
      cToken_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUnderlyingPrice(
      cToken_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUnderlyingPrices(
      cTokens: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    isPriceOracle(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeFeed(
      cToken_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeFixedPrice(
      cToken_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBandFeed(
      cToken_: string,
      feed_: string,
      feedDecimals_: BigNumberish,
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setChainlinkFeed(
      cToken_: string,
      feed_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFixedPrice(
      cToken_: string,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWitnetFeed(
      cToken_: string,
      feed_: string,
      feedDecimals_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  changeOwner(
    owner_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeds(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [number, string, number, string] & {
      source: number;
      addr: string;
      feedDecimals: number;
      name: string;
    }
  >;

  fixedPrices(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  getFeed(
    cToken_: string,
    overrides?: CallOverrides
  ): Promise<
    [number, string, number, string] & {
      source: number;
      addr: string;
      feedDecimals: number;
      name: string;
    }
  >;

  getFixedPrice(cToken_: string, overrides?: CallOverrides): Promise<BigNumber>;

  getUnderlyingPrice(
    cToken_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUnderlyingPrices(
    cTokens: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  isPriceOracle(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeFeed(
    cToken_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeFixedPrice(
    cToken_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBandFeed(
    cToken_: string,
    feed_: string,
    feedDecimals_: BigNumberish,
    name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setChainlinkFeed(
    cToken_: string,
    feed_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFixedPrice(
    cToken_: string,
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWitnetFeed(
    cToken_: string,
    feed_: string,
    feedDecimals_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    changeOwner(owner_: string, overrides?: CallOverrides): Promise<void>;

    feeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, string, number, string] & {
        source: number;
        addr: string;
        feedDecimals: number;
        name: string;
      }
    >;

    fixedPrices(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getFeed(
      cToken_: string,
      overrides?: CallOverrides
    ): Promise<
      [number, string, number, string] & {
        source: number;
        addr: string;
        feedDecimals: number;
        name: string;
      }
    >;

    getFixedPrice(
      cToken_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnderlyingPrice(
      cToken_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnderlyingPrices(
      cTokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    isPriceOracle(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeFeed(cToken_: string, overrides?: CallOverrides): Promise<void>;

    removeFixedPrice(cToken_: string, overrides?: CallOverrides): Promise<void>;

    setBandFeed(
      cToken_: string,
      feed_: string,
      feedDecimals_: BigNumberish,
      name: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setChainlinkFeed(
      cToken_: string,
      feed_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFixedPrice(
      cToken_: string,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWitnetFeed(
      cToken_: string,
      feed_: string,
      feedDecimals_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "SetFeed(address,uint8,address,uint8,string)"(
      cToken_?: string | null,
      source?: null,
      addr?: null,
      feedDecimals?: null,
      name?: null
    ): TypedEventFilter<
      [string, number, string, number, string],
      {
        cToken_: string;
        source: number;
        addr: string;
        feedDecimals: number;
        name: string;
      }
    >;

    SetFeed(
      cToken_?: string | null,
      source?: null,
      addr?: null,
      feedDecimals?: null,
      name?: null
    ): TypedEventFilter<
      [string, number, string, number, string],
      {
        cToken_: string;
        source: number;
        addr: string;
        feedDecimals: number;
        name: string;
      }
    >;
  };

  estimateGas: {
    changeOwner(
      owner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    fixedPrices(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getFeed(cToken_: string, overrides?: CallOverrides): Promise<BigNumber>;

    getFixedPrice(
      cToken_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnderlyingPrice(
      cToken_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnderlyingPrices(
      cTokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPriceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeFeed(
      cToken_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeFixedPrice(
      cToken_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBandFeed(
      cToken_: string,
      feed_: string,
      feedDecimals_: BigNumberish,
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setChainlinkFeed(
      cToken_: string,
      feed_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFixedPrice(
      cToken_: string,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWitnetFeed(
      cToken_: string,
      feed_: string,
      feedDecimals_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    changeOwner(
      owner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fixedPrices(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeed(
      cToken_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFixedPrice(
      cToken_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnderlyingPrice(
      cToken_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnderlyingPrices(
      cTokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPriceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeFeed(
      cToken_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeFixedPrice(
      cToken_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBandFeed(
      cToken_: string,
      feed_: string,
      feedDecimals_: BigNumberish,
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setChainlinkFeed(
      cToken_: string,
      feed_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFixedPrice(
      cToken_: string,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWitnetFeed(
      cToken_: string,
      feed_: string,
      feedDecimals_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
