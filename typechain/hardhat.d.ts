/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Proxy__factory>;
    getContractFactory(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "ProxyAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyAdmin__factory>;
    getContractFactory(
      name: "TransparentUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransparentUpgradeableProxy__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Multicall2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicall2__factory>;
    getContractFactory(
      name: "SumerProxyAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SumerProxyAdmin__factory>;
    getContractFactory(
      name: "SumerProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SumerProxy__factory>;
    getContractFactory(
      name: "CommunalFarm",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CommunalFarm__factory>;
    getContractFactory(
      name: "FraxGaugeController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FraxGaugeController__factory>;
    getContractFactory(
      name: "VotingEscrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VotingEscrow__factory>;
    getContractFactory(
      name: "FraxGaugeFXSRewardsDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FraxGaugeFXSRewardsDistributor__factory>;
    getContractFactory(
      name: "IFraxGaugeController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFraxGaugeController__factory>;
    getContractFactory(
      name: "IFraxGaugeFXSRewardsDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFraxGaugeFXSRewardsDistributor__factory>;
    getContractFactory(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair__factory>;
    getContractFactory(
      name: "StakingRewardsMultiGauge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingRewardsMultiGauge__factory>;
    getContractFactory(
      name: "SmartWalletChecker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SmartWalletChecker__factory>;
    getContractFactory(
      name: "VeSumer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VeSumer__factory>;
    getContractFactory(
      name: "ICallee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICallee__factory>;
    getContractFactory(
      name: "IFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFactory__factory>;
    getContractFactory(
      name: "IPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPair__factory>;
    getContractFactory(
      name: "IUnderlying",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUnderlying__factory>;
    getContractFactory(
      name: "PairFees",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PairFees__factory>;
    getContractFactory(
      name: "VoltFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VoltFactory__factory>;
    getContractFactory(
      name: "VoltPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VoltPair__factory>;
    getContractFactory(
      name: "Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Token__factory>;

    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1822Proxiable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: "IBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "ERC1967Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Proxy>;
    getContractAt(
      name: "ERC1967Upgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Upgrade>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "ProxyAdmin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyAdmin>;
    getContractAt(
      name: "TransparentUpgradeableProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransparentUpgradeableProxy>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Multicall2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicall2>;
    getContractAt(
      name: "SumerProxyAdmin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SumerProxyAdmin>;
    getContractAt(
      name: "SumerProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SumerProxy>;
    getContractAt(
      name: "CommunalFarm",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CommunalFarm>;
    getContractAt(
      name: "FraxGaugeController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FraxGaugeController>;
    getContractAt(
      name: "VotingEscrow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VotingEscrow>;
    getContractAt(
      name: "FraxGaugeFXSRewardsDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FraxGaugeFXSRewardsDistributor>;
    getContractAt(
      name: "IFraxGaugeController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFraxGaugeController>;
    getContractAt(
      name: "IFraxGaugeFXSRewardsDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFraxGaugeFXSRewardsDistributor>;
    getContractAt(
      name: "IUniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Pair>;
    getContractAt(
      name: "StakingRewardsMultiGauge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingRewardsMultiGauge>;
    getContractAt(
      name: "SmartWalletChecker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SmartWalletChecker>;
    getContractAt(
      name: "VeSumer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VeSumer>;
    getContractAt(
      name: "ICallee",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICallee>;
    getContractAt(
      name: "IFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFactory>;
    getContractAt(
      name: "IPair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPair>;
    getContractAt(
      name: "IUnderlying",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUnderlying>;
    getContractAt(
      name: "PairFees",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PairFees>;
    getContractAt(
      name: "VoltFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VoltFactory>;
    getContractAt(
      name: "VoltPair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VoltPair>;
    getContractAt(
      name: "Token",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Token>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
