/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface FraxGaugeControllerInterface extends ethers.utils.Interface {
  functions: {
    "MULTIPLIER()": FunctionFragment;
    "WEEK()": FunctionFragment;
    "WEIGHT_VOTE_DELAY()": FunctionFragment;
    "add_gauge(address,int128,uint256)": FunctionFragment;
    "add_type(string,uint256)": FunctionFragment;
    "admin()": FunctionFragment;
    "apply_transfer_ownership()": FunctionFragment;
    "change_gauge_weight(address,uint256)": FunctionFragment;
    "change_global_emission_rate(uint256)": FunctionFragment;
    "change_type_weight(int128,uint256)": FunctionFragment;
    "changes_sum(int128,uint256)": FunctionFragment;
    "changes_weight(address,uint256)": FunctionFragment;
    "checkpoint()": FunctionFragment;
    "checkpoint_gauge(address)": FunctionFragment;
    "commit_transfer_ownership(address)": FunctionFragment;
    "future_admin()": FunctionFragment;
    "gauge_relative_weight(address,uint256)": FunctionFragment;
    "gauge_relative_weight_write(address,uint256)": FunctionFragment;
    "gauge_type_names(int128)": FunctionFragment;
    "gauge_types(address)": FunctionFragment;
    "gauge_types_(address)": FunctionFragment;
    "gauges(uint256)": FunctionFragment;
    "get_corrected_info(address)": FunctionFragment;
    "get_gauge_weight(address)": FunctionFragment;
    "get_total_weight()": FunctionFragment;
    "get_type_weight(int128)": FunctionFragment;
    "get_weights_sum_per_type(int128)": FunctionFragment;
    "global_emission_rate()": FunctionFragment;
    "last_user_vote(address,address)": FunctionFragment;
    "n_gauge_types()": FunctionFragment;
    "n_gauges()": FunctionFragment;
    "points_sum(int128,uint256)": FunctionFragment;
    "points_total(uint256)": FunctionFragment;
    "points_type_weight(int128,uint256)": FunctionFragment;
    "points_weight(address,uint256)": FunctionFragment;
    "time_sum(uint256)": FunctionFragment;
    "time_total()": FunctionFragment;
    "time_type_weight(uint256)": FunctionFragment;
    "time_weight(address)": FunctionFragment;
    "token()": FunctionFragment;
    "vote_for_gauge_weights(address,uint256)": FunctionFragment;
    "vote_user_power(address)": FunctionFragment;
    "vote_user_slopes(address,address)": FunctionFragment;
    "voting_escrow()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WEEK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WEIGHT_VOTE_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "add_gauge",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "add_type",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "apply_transfer_ownership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "change_gauge_weight",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "change_global_emission_rate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "change_type_weight",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changes_sum",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changes_weight",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkpoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkpoint_gauge",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "commit_transfer_ownership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "future_admin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gauge_relative_weight",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "gauge_relative_weight_write",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "gauge_type_names",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "gauge_types", values: [string]): string;
  encodeFunctionData(
    functionFragment: "gauge_types_",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "gauges",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get_corrected_info",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "get_gauge_weight",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "get_total_weight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get_type_weight",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get_weights_sum_per_type",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "global_emission_rate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "last_user_vote",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "n_gauge_types",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "n_gauges", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "points_sum",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "points_total",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "points_type_weight",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "points_weight",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "time_sum",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "time_total",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "time_type_weight",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "time_weight", values: [string]): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vote_for_gauge_weights",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vote_user_power",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vote_user_slopes",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "voting_escrow",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "MULTIPLIER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WEEK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WEIGHT_VOTE_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "add_gauge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "add_type", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "apply_transfer_ownership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "change_gauge_weight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "change_global_emission_rate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "change_type_weight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changes_sum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changes_weight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkpoint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkpoint_gauge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commit_transfer_ownership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "future_admin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gauge_relative_weight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gauge_relative_weight_write",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gauge_type_names",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gauge_types",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gauge_types_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gauges", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "get_corrected_info",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_gauge_weight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_total_weight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_type_weight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_weights_sum_per_type",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "global_emission_rate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "last_user_vote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "n_gauge_types",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "n_gauges", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "points_sum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "points_total",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "points_type_weight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "points_weight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "time_sum", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "time_total", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "time_type_weight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "time_weight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vote_for_gauge_weights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vote_user_power",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vote_user_slopes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voting_escrow",
    data: BytesLike
  ): Result;

  events: {
    "AddType(string,int128)": EventFragment;
    "ApplyOwnership(address)": EventFragment;
    "CommitOwnership(address)": EventFragment;
    "NewGauge(address,int128,uint256)": EventFragment;
    "NewGaugeWeight(address,uint256,uint256,uint256)": EventFragment;
    "NewTypeWeight(int128,uint256,uint256,uint256)": EventFragment;
    "VoteForGauge(uint256,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddType"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApplyOwnership"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommitOwnership"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewGauge"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewGaugeWeight"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTypeWeight"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteForGauge"): EventFragment;
}

export type AddTypeEvent = TypedEvent<
  [string, BigNumber] & { name: string; type_id: BigNumber }
>;

export type ApplyOwnershipEvent = TypedEvent<[string] & { admin: string }>;

export type CommitOwnershipEvent = TypedEvent<[string] & { admin: string }>;

export type NewGaugeEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    addr: string;
    gauge_type: BigNumber;
    weight: BigNumber;
  }
>;

export type NewGaugeWeightEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    gauge_address: string;
    time: BigNumber;
    weight: BigNumber;
    total_weight: BigNumber;
  }
>;

export type NewTypeWeightEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber] & {
    type_id: BigNumber;
    time: BigNumber;
    weight: BigNumber;
    total_weight: BigNumber;
  }
>;

export type VoteForGaugeEvent = TypedEvent<
  [BigNumber, string, string, BigNumber] & {
    time: BigNumber;
    user: string;
    gauge_addr: string;
    weight: BigNumber;
  }
>;

export class FraxGaugeController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FraxGaugeControllerInterface;

  functions: {
    MULTIPLIER(overrides?: CallOverrides): Promise<[BigNumber]>;

    WEEK(overrides?: CallOverrides): Promise<[BigNumber]>;

    WEIGHT_VOTE_DELAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    add_gauge(
      addr: string,
      gauge_type: BigNumberish,
      weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    add_type(
      _name: string,
      weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    apply_transfer_ownership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    change_gauge_weight(
      addr: string,
      weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    change_global_emission_rate(
      new_rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    change_type_weight(
      type_id: BigNumberish,
      weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changes_sum(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    changes_weight(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    checkpoint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkpoint_gauge(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    commit_transfer_ownership(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    future_admin(overrides?: CallOverrides): Promise<[string]>;

    gauge_relative_weight(
      addr: string,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gauge_relative_weight_write(
      addr: string,
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gauge_type_names(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    gauge_types(_addr: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    gauge_types_(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    gauges(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    get_corrected_info(
      addr: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          bias: BigNumber;
          slope: BigNumber;
          lock_end: BigNumber;
          fxs_amount: BigNumber;
        }
      ]
    >;

    get_gauge_weight(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    get_total_weight(overrides?: CallOverrides): Promise<[BigNumber]>;

    get_type_weight(
      type_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    get_weights_sum_per_type(
      type_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    global_emission_rate(overrides?: CallOverrides): Promise<[BigNumber]>;

    last_user_vote(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    n_gauge_types(overrides?: CallOverrides): Promise<[BigNumber]>;

    n_gauges(overrides?: CallOverrides): Promise<[BigNumber]>;

    points_sum(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { bias: BigNumber; slope: BigNumber }>;

    points_total(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    points_type_weight(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    points_weight(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { bias: BigNumber; slope: BigNumber }>;

    time_sum(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    time_total(overrides?: CallOverrides): Promise<[BigNumber]>;

    time_type_weight(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    time_weight(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    vote_for_gauge_weights(
      _gauge_addr: string,
      _user_weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vote_user_power(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vote_user_slopes(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        slope: BigNumber;
        power: BigNumber;
        end: BigNumber;
      }
    >;

    voting_escrow(overrides?: CallOverrides): Promise<[string]>;
  };

  MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

  WEEK(overrides?: CallOverrides): Promise<BigNumber>;

  WEIGHT_VOTE_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

  add_gauge(
    addr: string,
    gauge_type: BigNumberish,
    weight: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  add_type(
    _name: string,
    weight: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  apply_transfer_ownership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  change_gauge_weight(
    addr: string,
    weight: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  change_global_emission_rate(
    new_rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  change_type_weight(
    type_id: BigNumberish,
    weight: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changes_sum(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  changes_weight(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  checkpoint(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkpoint_gauge(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  commit_transfer_ownership(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  future_admin(overrides?: CallOverrides): Promise<string>;

  gauge_relative_weight(
    addr: string,
    time: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gauge_relative_weight_write(
    addr: string,
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gauge_type_names(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  gauge_types(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

  gauge_types_(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  gauges(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  get_corrected_info(
    addr: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      bias: BigNumber;
      slope: BigNumber;
      lock_end: BigNumber;
      fxs_amount: BigNumber;
    }
  >;

  get_gauge_weight(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

  get_total_weight(overrides?: CallOverrides): Promise<BigNumber>;

  get_type_weight(
    type_id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  get_weights_sum_per_type(
    type_id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  global_emission_rate(overrides?: CallOverrides): Promise<BigNumber>;

  last_user_vote(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  n_gauge_types(overrides?: CallOverrides): Promise<BigNumber>;

  n_gauges(overrides?: CallOverrides): Promise<BigNumber>;

  points_sum(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { bias: BigNumber; slope: BigNumber }>;

  points_total(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  points_type_weight(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  points_weight(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { bias: BigNumber; slope: BigNumber }>;

  time_sum(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  time_total(overrides?: CallOverrides): Promise<BigNumber>;

  time_type_weight(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  time_weight(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  vote_for_gauge_weights(
    _gauge_addr: string,
    _user_weight: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vote_user_power(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  vote_user_slopes(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      slope: BigNumber;
      power: BigNumber;
      end: BigNumber;
    }
  >;

  voting_escrow(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    WEEK(overrides?: CallOverrides): Promise<BigNumber>;

    WEIGHT_VOTE_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    add_gauge(
      addr: string,
      gauge_type: BigNumberish,
      weight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    add_type(
      _name: string,
      weight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    apply_transfer_ownership(overrides?: CallOverrides): Promise<void>;

    change_gauge_weight(
      addr: string,
      weight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    change_global_emission_rate(
      new_rate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    change_type_weight(
      type_id: BigNumberish,
      weight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changes_sum(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changes_weight(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkpoint(overrides?: CallOverrides): Promise<BigNumber>;

    checkpoint_gauge(addr: string, overrides?: CallOverrides): Promise<void>;

    commit_transfer_ownership(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    future_admin(overrides?: CallOverrides): Promise<string>;

    gauge_relative_weight(
      addr: string,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gauge_relative_weight_write(
      addr: string,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gauge_type_names(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    gauge_types(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    gauge_types_(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    gauges(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    get_corrected_info(
      addr: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bias: BigNumber;
        slope: BigNumber;
        lock_end: BigNumber;
        fxs_amount: BigNumber;
      }
    >;

    get_gauge_weight(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_total_weight(overrides?: CallOverrides): Promise<BigNumber>;

    get_type_weight(
      type_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_weights_sum_per_type(
      type_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    global_emission_rate(overrides?: CallOverrides): Promise<BigNumber>;

    last_user_vote(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    n_gauge_types(overrides?: CallOverrides): Promise<BigNumber>;

    n_gauges(overrides?: CallOverrides): Promise<BigNumber>;

    points_sum(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { bias: BigNumber; slope: BigNumber }>;

    points_total(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    points_type_weight(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    points_weight(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { bias: BigNumber; slope: BigNumber }>;

    time_sum(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    time_total(overrides?: CallOverrides): Promise<BigNumber>;

    time_type_weight(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    time_weight(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    vote_for_gauge_weights(
      _gauge_addr: string,
      _user_weight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    vote_user_power(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vote_user_slopes(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        slope: BigNumber;
        power: BigNumber;
        end: BigNumber;
      }
    >;

    voting_escrow(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AddType(string,int128)"(
      name?: null,
      type_id?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { name: string; type_id: BigNumber }
    >;

    AddType(
      name?: null,
      type_id?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { name: string; type_id: BigNumber }
    >;

    "ApplyOwnership(address)"(
      admin?: null
    ): TypedEventFilter<[string], { admin: string }>;

    ApplyOwnership(admin?: null): TypedEventFilter<[string], { admin: string }>;

    "CommitOwnership(address)"(
      admin?: null
    ): TypedEventFilter<[string], { admin: string }>;

    CommitOwnership(
      admin?: null
    ): TypedEventFilter<[string], { admin: string }>;

    "NewGauge(address,int128,uint256)"(
      addr?: null,
      gauge_type?: null,
      weight?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { addr: string; gauge_type: BigNumber; weight: BigNumber }
    >;

    NewGauge(
      addr?: null,
      gauge_type?: null,
      weight?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { addr: string; gauge_type: BigNumber; weight: BigNumber }
    >;

    "NewGaugeWeight(address,uint256,uint256,uint256)"(
      gauge_address?: null,
      time?: null,
      weight?: null,
      total_weight?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        gauge_address: string;
        time: BigNumber;
        weight: BigNumber;
        total_weight: BigNumber;
      }
    >;

    NewGaugeWeight(
      gauge_address?: null,
      time?: null,
      weight?: null,
      total_weight?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        gauge_address: string;
        time: BigNumber;
        weight: BigNumber;
        total_weight: BigNumber;
      }
    >;

    "NewTypeWeight(int128,uint256,uint256,uint256)"(
      type_id?: null,
      time?: null,
      weight?: null,
      total_weight?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        type_id: BigNumber;
        time: BigNumber;
        weight: BigNumber;
        total_weight: BigNumber;
      }
    >;

    NewTypeWeight(
      type_id?: null,
      time?: null,
      weight?: null,
      total_weight?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        type_id: BigNumber;
        time: BigNumber;
        weight: BigNumber;
        total_weight: BigNumber;
      }
    >;

    "VoteForGauge(uint256,address,address,uint256)"(
      time?: null,
      user?: null,
      gauge_addr?: null,
      weight?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber],
      { time: BigNumber; user: string; gauge_addr: string; weight: BigNumber }
    >;

    VoteForGauge(
      time?: null,
      user?: null,
      gauge_addr?: null,
      weight?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber],
      { time: BigNumber; user: string; gauge_addr: string; weight: BigNumber }
    >;
  };

  estimateGas: {
    MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    WEEK(overrides?: CallOverrides): Promise<BigNumber>;

    WEIGHT_VOTE_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    add_gauge(
      addr: string,
      gauge_type: BigNumberish,
      weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    add_type(
      _name: string,
      weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    apply_transfer_ownership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    change_gauge_weight(
      addr: string,
      weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    change_global_emission_rate(
      new_rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    change_type_weight(
      type_id: BigNumberish,
      weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changes_sum(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changes_weight(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkpoint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkpoint_gauge(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    commit_transfer_ownership(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    future_admin(overrides?: CallOverrides): Promise<BigNumber>;

    gauge_relative_weight(
      addr: string,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gauge_relative_weight_write(
      addr: string,
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gauge_type_names(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gauge_types(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    gauge_types_(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    gauges(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    get_corrected_info(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_gauge_weight(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_total_weight(overrides?: CallOverrides): Promise<BigNumber>;

    get_type_weight(
      type_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_weights_sum_per_type(
      type_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    global_emission_rate(overrides?: CallOverrides): Promise<BigNumber>;

    last_user_vote(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    n_gauge_types(overrides?: CallOverrides): Promise<BigNumber>;

    n_gauges(overrides?: CallOverrides): Promise<BigNumber>;

    points_sum(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    points_total(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    points_type_weight(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    points_weight(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    time_sum(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    time_total(overrides?: CallOverrides): Promise<BigNumber>;

    time_type_weight(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    time_weight(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    vote_for_gauge_weights(
      _gauge_addr: string,
      _user_weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vote_user_power(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vote_user_slopes(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    voting_escrow(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MULTIPLIER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WEEK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WEIGHT_VOTE_DELAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    add_gauge(
      addr: string,
      gauge_type: BigNumberish,
      weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    add_type(
      _name: string,
      weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    apply_transfer_ownership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    change_gauge_weight(
      addr: string,
      weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    change_global_emission_rate(
      new_rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    change_type_weight(
      type_id: BigNumberish,
      weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changes_sum(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changes_weight(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkpoint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkpoint_gauge(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    commit_transfer_ownership(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    future_admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gauge_relative_weight(
      addr: string,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gauge_relative_weight_write(
      addr: string,
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gauge_type_names(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gauge_types(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gauge_types_(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gauges(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_corrected_info(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_gauge_weight(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_total_weight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get_type_weight(
      type_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_weights_sum_per_type(
      type_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    global_emission_rate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    last_user_vote(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    n_gauge_types(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    n_gauges(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    points_sum(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    points_total(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    points_type_weight(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    points_weight(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    time_sum(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    time_total(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    time_type_weight(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    time_weight(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vote_for_gauge_weights(
      _gauge_addr: string,
      _user_weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vote_user_power(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vote_user_slopes(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voting_escrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
