/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IAccountLiquidityInterface extends ethers.utils.Interface {
  functions: {
    "getGroupVars(address,address,uint256,uint256)": FunctionFragment;
    "getHypotheticalAccountLiquidity(address,address,uint256,uint256)": FunctionFragment;
    "getHypotheticalGroupSummary(address,address,uint256,uint256)": FunctionFragment;
    "getHypotheticalSafeLimit(address,address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getGroupVars",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHypotheticalAccountLiquidity",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHypotheticalGroupSummary",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHypotheticalSafeLimit",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getGroupVars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHypotheticalAccountLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHypotheticalGroupSummary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHypotheticalSafeLimit",
    data: BytesLike
  ): Result;

  events: {};
}

export class IAccountLiquidity extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IAccountLiquidityInterface;

  functions: {
    getGroupVars(
      account: string,
      cTokenModify: string,
      intraSafeLimitMantissa: BigNumberish,
      interSafeLimitMantissa: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [BigNumber] & { mantissa: BigNumber },
          [BigNumber] & { mantissa: BigNumber },
          [BigNumber] & { mantissa: BigNumber },
          [BigNumber] & { mantissa: BigNumber },
          [BigNumber] & { mantissa: BigNumber }
        ] & {
          groupId: number;
          cDepositVal: BigNumber;
          cBorrowVal: BigNumber;
          suDepositVal: BigNumber;
          suBorrowVal: BigNumber;
          intraCRate: [BigNumber] & { mantissa: BigNumber };
          intraMintRate: [BigNumber] & { mantissa: BigNumber };
          intraSuRate: [BigNumber] & { mantissa: BigNumber };
          interCRate: [BigNumber] & { mantissa: BigNumber };
          interSuRate: [BigNumber] & { mantissa: BigNumber };
        })[]
      ]
    >;

    getHypotheticalAccountLiquidity(
      account: string,
      cTokenModify: string,
      redeemTokens: BigNumberish,
      borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getHypotheticalGroupSummary(
      account: string,
      cTokenModify: string,
      redeemTokens: BigNumberish,
      borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        [
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [BigNumber] & { mantissa: BigNumber },
          [BigNumber] & { mantissa: BigNumber },
          [BigNumber] & { mantissa: BigNumber },
          [BigNumber] & { mantissa: BigNumber },
          [BigNumber] & { mantissa: BigNumber }
        ] & {
          groupId: number;
          cDepositVal: BigNumber;
          cBorrowVal: BigNumber;
          suDepositVal: BigNumber;
          suBorrowVal: BigNumber;
          intraCRate: [BigNumber] & { mantissa: BigNumber };
          intraMintRate: [BigNumber] & { mantissa: BigNumber };
          intraSuRate: [BigNumber] & { mantissa: BigNumber };
          interCRate: [BigNumber] & { mantissa: BigNumber };
          interSuRate: [BigNumber] & { mantissa: BigNumber };
        }
      ]
    >;

    getHypotheticalSafeLimit(
      account: string,
      cTokenModify: string,
      intraSafeLimitMantissa: BigNumberish,
      interSafeLimitMantissa: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  getGroupVars(
    account: string,
    cTokenModify: string,
    intraSafeLimitMantissa: BigNumberish,
    interSafeLimitMantissa: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      [BigNumber] & { mantissa: BigNumber },
      [BigNumber] & { mantissa: BigNumber },
      [BigNumber] & { mantissa: BigNumber },
      [BigNumber] & { mantissa: BigNumber },
      [BigNumber] & { mantissa: BigNumber }
    ] & {
      groupId: number;
      cDepositVal: BigNumber;
      cBorrowVal: BigNumber;
      suDepositVal: BigNumber;
      suBorrowVal: BigNumber;
      intraCRate: [BigNumber] & { mantissa: BigNumber };
      intraMintRate: [BigNumber] & { mantissa: BigNumber };
      intraSuRate: [BigNumber] & { mantissa: BigNumber };
      interCRate: [BigNumber] & { mantissa: BigNumber };
      interSuRate: [BigNumber] & { mantissa: BigNumber };
    })[]
  >;

  getHypotheticalAccountLiquidity(
    account: string,
    cTokenModify: string,
    redeemTokens: BigNumberish,
    borrowAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getHypotheticalGroupSummary(
    account: string,
    cTokenModify: string,
    redeemTokens: BigNumberish,
    borrowAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      [
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [BigNumber] & { mantissa: BigNumber },
        [BigNumber] & { mantissa: BigNumber },
        [BigNumber] & { mantissa: BigNumber },
        [BigNumber] & { mantissa: BigNumber },
        [BigNumber] & { mantissa: BigNumber }
      ] & {
        groupId: number;
        cDepositVal: BigNumber;
        cBorrowVal: BigNumber;
        suDepositVal: BigNumber;
        suBorrowVal: BigNumber;
        intraCRate: [BigNumber] & { mantissa: BigNumber };
        intraMintRate: [BigNumber] & { mantissa: BigNumber };
        intraSuRate: [BigNumber] & { mantissa: BigNumber };
        interCRate: [BigNumber] & { mantissa: BigNumber };
        interSuRate: [BigNumber] & { mantissa: BigNumber };
      }
    ]
  >;

  getHypotheticalSafeLimit(
    account: string,
    cTokenModify: string,
    intraSafeLimitMantissa: BigNumberish,
    interSafeLimitMantissa: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    getGroupVars(
      account: string,
      cTokenModify: string,
      intraSafeLimitMantissa: BigNumberish,
      interSafeLimitMantissa: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [BigNumber] & { mantissa: BigNumber },
        [BigNumber] & { mantissa: BigNumber },
        [BigNumber] & { mantissa: BigNumber },
        [BigNumber] & { mantissa: BigNumber },
        [BigNumber] & { mantissa: BigNumber }
      ] & {
        groupId: number;
        cDepositVal: BigNumber;
        cBorrowVal: BigNumber;
        suDepositVal: BigNumber;
        suBorrowVal: BigNumber;
        intraCRate: [BigNumber] & { mantissa: BigNumber };
        intraMintRate: [BigNumber] & { mantissa: BigNumber };
        intraSuRate: [BigNumber] & { mantissa: BigNumber };
        interCRate: [BigNumber] & { mantissa: BigNumber };
        interSuRate: [BigNumber] & { mantissa: BigNumber };
      })[]
    >;

    getHypotheticalAccountLiquidity(
      account: string,
      cTokenModify: string,
      redeemTokens: BigNumberish,
      borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getHypotheticalGroupSummary(
      account: string,
      cTokenModify: string,
      redeemTokens: BigNumberish,
      borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        [
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [BigNumber] & { mantissa: BigNumber },
          [BigNumber] & { mantissa: BigNumber },
          [BigNumber] & { mantissa: BigNumber },
          [BigNumber] & { mantissa: BigNumber },
          [BigNumber] & { mantissa: BigNumber }
        ] & {
          groupId: number;
          cDepositVal: BigNumber;
          cBorrowVal: BigNumber;
          suDepositVal: BigNumber;
          suBorrowVal: BigNumber;
          intraCRate: [BigNumber] & { mantissa: BigNumber };
          intraMintRate: [BigNumber] & { mantissa: BigNumber };
          intraSuRate: [BigNumber] & { mantissa: BigNumber };
          interCRate: [BigNumber] & { mantissa: BigNumber };
          interSuRate: [BigNumber] & { mantissa: BigNumber };
        }
      ]
    >;

    getHypotheticalSafeLimit(
      account: string,
      cTokenModify: string,
      intraSafeLimitMantissa: BigNumberish,
      interSafeLimitMantissa: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    getGroupVars(
      account: string,
      cTokenModify: string,
      intraSafeLimitMantissa: BigNumberish,
      interSafeLimitMantissa: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHypotheticalAccountLiquidity(
      account: string,
      cTokenModify: string,
      redeemTokens: BigNumberish,
      borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHypotheticalGroupSummary(
      account: string,
      cTokenModify: string,
      redeemTokens: BigNumberish,
      borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHypotheticalSafeLimit(
      account: string,
      cTokenModify: string,
      intraSafeLimitMantissa: BigNumberish,
      interSafeLimitMantissa: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getGroupVars(
      account: string,
      cTokenModify: string,
      intraSafeLimitMantissa: BigNumberish,
      interSafeLimitMantissa: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHypotheticalAccountLiquidity(
      account: string,
      cTokenModify: string,
      redeemTokens: BigNumberish,
      borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHypotheticalGroupSummary(
      account: string,
      cTokenModify: string,
      redeemTokens: BigNumberish,
      borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHypotheticalSafeLimit(
      account: string,
      cTokenModify: string,
      intraSafeLimitMantissa: BigNumberish,
      interSafeLimitMantissa: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
