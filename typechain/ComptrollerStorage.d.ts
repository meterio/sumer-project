/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ComptrollerStorageInterface extends ethers.utils.Interface {
  functions: {
    "accountAssets(address,uint256)": FunctionFragment;
    "admin()": FunctionFragment;
    "allMarkets(uint256)": FunctionFragment;
    "closeFactorMantissa()": FunctionFragment;
    "compAccrued(address)": FunctionFragment;
    "compBorrowSpeeds(address)": FunctionFragment;
    "compBorrowState(address)": FunctionFragment;
    "compBorrowerIndex(address,address)": FunctionFragment;
    "compContributorSpeeds(address)": FunctionFragment;
    "compInitialIndex()": FunctionFragment;
    "compSupplierIndex(address,address)": FunctionFragment;
    "compSupplySpeeds(address)": FunctionFragment;
    "compSupplyState(address)": FunctionFragment;
    "isComptroller()": FunctionFragment;
    "lastContributorBlock(address)": FunctionFragment;
    "liquidationIncentiveMantissa()": FunctionFragment;
    "markets(address)": FunctionFragment;
    "maxSupply(address)": FunctionFragment;
    "oracle()": FunctionFragment;
    "underWriterAdmin()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accountAssets",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allMarkets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeFactorMantissa",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "compAccrued", values: [string]): string;
  encodeFunctionData(
    functionFragment: "compBorrowSpeeds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "compBorrowState",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "compBorrowerIndex",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "compContributorSpeeds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "compInitialIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "compSupplierIndex",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "compSupplySpeeds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "compSupplyState",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isComptroller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastContributorBlock",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationIncentiveMantissa",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "markets", values: [string]): string;
  encodeFunctionData(functionFragment: "maxSupply", values: [string]): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "underWriterAdmin",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "accountAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allMarkets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closeFactorMantissa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compAccrued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compBorrowSpeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compBorrowState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compBorrowerIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compContributorSpeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compInitialIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compSupplierIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compSupplySpeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compSupplyState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isComptroller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastContributorBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationIncentiveMantissa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "markets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxSupply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "underWriterAdmin",
    data: BytesLike
  ): Result;

  events: {
    "CompBorrowSpeedUpdated(address,uint256)": EventFragment;
    "CompGranted(address,uint256)": EventFragment;
    "CompSupplySpeedUpdated(address,uint256)": EventFragment;
    "ContributorCompSpeedUpdated(address,uint256)": EventFragment;
    "DistributedBorrowerComp(address,address,uint256,uint256)": EventFragment;
    "DistributedSupplierComp(address,address,uint256,uint256)": EventFragment;
    "MarketEntered(address,address)": EventFragment;
    "MarketExited(address,address)": EventFragment;
    "MarketListed(address)": EventFragment;
    "NewCloseFactor(uint256,uint256)": EventFragment;
    "NewLiquidationIncentive(uint256,uint256)": EventFragment;
    "NewPriceOracle(address,address)": EventFragment;
    "SetMaxSupply(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CompBorrowSpeedUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CompGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CompSupplySpeedUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ContributorCompSpeedUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributedBorrowerComp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributedSupplierComp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketEntered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketExited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketListed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewCloseFactor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewLiquidationIncentive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPriceOracle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxSupply"): EventFragment;
}

export type CompBorrowSpeedUpdatedEvent = TypedEvent<
  [string, BigNumber] & { cToken: string; newSpeed: BigNumber }
>;

export type CompGrantedEvent = TypedEvent<
  [string, BigNumber] & { recipient: string; amount: BigNumber }
>;

export type CompSupplySpeedUpdatedEvent = TypedEvent<
  [string, BigNumber] & { cToken: string; newSpeed: BigNumber }
>;

export type ContributorCompSpeedUpdatedEvent = TypedEvent<
  [string, BigNumber] & { contributor: string; newSpeed: BigNumber }
>;

export type DistributedBorrowerCompEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    cToken: string;
    borrower: string;
    compDelta: BigNumber;
    compBorrowIndex: BigNumber;
  }
>;

export type DistributedSupplierCompEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    cToken: string;
    supplier: string;
    compDelta: BigNumber;
    compSupplyIndex: BigNumber;
  }
>;

export type MarketEnteredEvent = TypedEvent<
  [string, string] & { cToken: string; account: string }
>;

export type MarketExitedEvent = TypedEvent<
  [string, string] & { cToken: string; account: string }
>;

export type MarketListedEvent = TypedEvent<[string] & { cToken: string }>;

export type NewCloseFactorEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    oldCloseFactorMantissa: BigNumber;
    newCloseFactorMantissa: BigNumber;
  }
>;

export type NewLiquidationIncentiveEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    oldLiquidationIncentiveMantissa: BigNumber;
    newLiquidationIncentiveMantissa: BigNumber;
  }
>;

export type NewPriceOracleEvent = TypedEvent<
  [string, string] & { oldPriceOracle: string; newPriceOracle: string }
>;

export type SetMaxSupplyEvent = TypedEvent<
  [string, BigNumber] & { cToken: string; amount: BigNumber }
>;

export class ComptrollerStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ComptrollerStorageInterface;

  functions: {
    accountAssets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    allMarkets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;

    compAccrued(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    compBorrowSpeeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    compBorrowState(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

    compBorrowerIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    compContributorSpeeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    compInitialIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    compSupplierIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    compSupplySpeeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    compSupplyState(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

    isComptroller(overrides?: CallOverrides): Promise<[boolean]>;

    lastContributorBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    liquidationIncentiveMantissa(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    markets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, boolean] & {
        isListed: boolean;
        equalAssetGrouId: number;
        isComped: boolean;
      }
    >;

    maxSupply(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    underWriterAdmin(overrides?: CallOverrides): Promise<[string]>;
  };

  accountAssets(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  admin(overrides?: CallOverrides): Promise<string>;

  allMarkets(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  closeFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  compAccrued(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  compBorrowSpeeds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  compBorrowState(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

  compBorrowerIndex(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  compContributorSpeeds(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  compInitialIndex(overrides?: CallOverrides): Promise<BigNumber>;

  compSupplierIndex(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  compSupplySpeeds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  compSupplyState(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

  isComptroller(overrides?: CallOverrides): Promise<boolean>;

  lastContributorBlock(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  markets(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, number, boolean] & {
      isListed: boolean;
      equalAssetGrouId: number;
      isComped: boolean;
    }
  >;

  maxSupply(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  oracle(overrides?: CallOverrides): Promise<string>;

  underWriterAdmin(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    accountAssets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    admin(overrides?: CallOverrides): Promise<string>;

    allMarkets(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    compAccrued(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    compBorrowSpeeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compBorrowState(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

    compBorrowerIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compContributorSpeeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compInitialIndex(overrides?: CallOverrides): Promise<BigNumber>;

    compSupplierIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compSupplySpeeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compSupplyState(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

    isComptroller(overrides?: CallOverrides): Promise<boolean>;

    lastContributorBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    markets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, boolean] & {
        isListed: boolean;
        equalAssetGrouId: number;
        isComped: boolean;
      }
    >;

    maxSupply(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<string>;

    underWriterAdmin(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "CompBorrowSpeedUpdated(address,uint256)"(
      cToken?: string | null,
      newSpeed?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { cToken: string; newSpeed: BigNumber }
    >;

    CompBorrowSpeedUpdated(
      cToken?: string | null,
      newSpeed?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { cToken: string; newSpeed: BigNumber }
    >;

    "CompGranted(address,uint256)"(
      recipient?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { recipient: string; amount: BigNumber }
    >;

    CompGranted(
      recipient?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { recipient: string; amount: BigNumber }
    >;

    "CompSupplySpeedUpdated(address,uint256)"(
      cToken?: string | null,
      newSpeed?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { cToken: string; newSpeed: BigNumber }
    >;

    CompSupplySpeedUpdated(
      cToken?: string | null,
      newSpeed?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { cToken: string; newSpeed: BigNumber }
    >;

    "ContributorCompSpeedUpdated(address,uint256)"(
      contributor?: string | null,
      newSpeed?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { contributor: string; newSpeed: BigNumber }
    >;

    ContributorCompSpeedUpdated(
      contributor?: string | null,
      newSpeed?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { contributor: string; newSpeed: BigNumber }
    >;

    "DistributedBorrowerComp(address,address,uint256,uint256)"(
      cToken?: string | null,
      borrower?: string | null,
      compDelta?: null,
      compBorrowIndex?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        cToken: string;
        borrower: string;
        compDelta: BigNumber;
        compBorrowIndex: BigNumber;
      }
    >;

    DistributedBorrowerComp(
      cToken?: string | null,
      borrower?: string | null,
      compDelta?: null,
      compBorrowIndex?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        cToken: string;
        borrower: string;
        compDelta: BigNumber;
        compBorrowIndex: BigNumber;
      }
    >;

    "DistributedSupplierComp(address,address,uint256,uint256)"(
      cToken?: string | null,
      supplier?: string | null,
      compDelta?: null,
      compSupplyIndex?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        cToken: string;
        supplier: string;
        compDelta: BigNumber;
        compSupplyIndex: BigNumber;
      }
    >;

    DistributedSupplierComp(
      cToken?: string | null,
      supplier?: string | null,
      compDelta?: null,
      compSupplyIndex?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        cToken: string;
        supplier: string;
        compDelta: BigNumber;
        compSupplyIndex: BigNumber;
      }
    >;

    "MarketEntered(address,address)"(
      cToken?: null,
      account?: null
    ): TypedEventFilter<[string, string], { cToken: string; account: string }>;

    MarketEntered(
      cToken?: null,
      account?: null
    ): TypedEventFilter<[string, string], { cToken: string; account: string }>;

    "MarketExited(address,address)"(
      cToken?: null,
      account?: null
    ): TypedEventFilter<[string, string], { cToken: string; account: string }>;

    MarketExited(
      cToken?: null,
      account?: null
    ): TypedEventFilter<[string, string], { cToken: string; account: string }>;

    "MarketListed(address)"(
      cToken?: null
    ): TypedEventFilter<[string], { cToken: string }>;

    MarketListed(cToken?: null): TypedEventFilter<[string], { cToken: string }>;

    "NewCloseFactor(uint256,uint256)"(
      oldCloseFactorMantissa?: null,
      newCloseFactorMantissa?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldCloseFactorMantissa: BigNumber; newCloseFactorMantissa: BigNumber }
    >;

    NewCloseFactor(
      oldCloseFactorMantissa?: null,
      newCloseFactorMantissa?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldCloseFactorMantissa: BigNumber; newCloseFactorMantissa: BigNumber }
    >;

    "NewLiquidationIncentive(uint256,uint256)"(
      oldLiquidationIncentiveMantissa?: null,
      newLiquidationIncentiveMantissa?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      {
        oldLiquidationIncentiveMantissa: BigNumber;
        newLiquidationIncentiveMantissa: BigNumber;
      }
    >;

    NewLiquidationIncentive(
      oldLiquidationIncentiveMantissa?: null,
      newLiquidationIncentiveMantissa?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      {
        oldLiquidationIncentiveMantissa: BigNumber;
        newLiquidationIncentiveMantissa: BigNumber;
      }
    >;

    "NewPriceOracle(address,address)"(
      oldPriceOracle?: null,
      newPriceOracle?: null
    ): TypedEventFilter<
      [string, string],
      { oldPriceOracle: string; newPriceOracle: string }
    >;

    NewPriceOracle(
      oldPriceOracle?: null,
      newPriceOracle?: null
    ): TypedEventFilter<
      [string, string],
      { oldPriceOracle: string; newPriceOracle: string }
    >;

    "SetMaxSupply(address,uint256)"(
      cToken?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { cToken: string; amount: BigNumber }
    >;

    SetMaxSupply(
      cToken?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { cToken: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    accountAssets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    allMarkets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    compAccrued(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    compBorrowSpeeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compBorrowState(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compBorrowerIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compContributorSpeeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compInitialIndex(overrides?: CallOverrides): Promise<BigNumber>;

    compSupplierIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compSupplySpeeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compSupplyState(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isComptroller(overrides?: CallOverrides): Promise<BigNumber>;

    lastContributorBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    markets(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxSupply(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    underWriterAdmin(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    accountAssets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allMarkets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closeFactorMantissa(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    compAccrued(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    compBorrowSpeeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    compBorrowState(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    compBorrowerIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    compContributorSpeeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    compInitialIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    compSupplierIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    compSupplySpeeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    compSupplyState(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isComptroller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastContributorBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidationIncentiveMantissa(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    markets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxSupply(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underWriterAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
