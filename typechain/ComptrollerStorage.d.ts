/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ComptrollerStorageInterface extends ethers.utils.Interface {
  functions: {
    "accountAssets(address,uint256)": FunctionFragment;
    "allMarkets(uint256)": FunctionFragment;
    "closeFactorMantissa()": FunctionFragment;
    "heteroLiquidationIncentiveMantissa()": FunctionFragment;
    "homoLiquidationIncentiveMantissa()": FunctionFragment;
    "isComptroller()": FunctionFragment;
    "markets(address)": FunctionFragment;
    "maxSupply(address)": FunctionFragment;
    "sutokenLiquidationIncentiveMantissa()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accountAssets",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allMarkets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeFactorMantissa",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "heteroLiquidationIncentiveMantissa",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "homoLiquidationIncentiveMantissa",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isComptroller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "markets", values: [string]): string;
  encodeFunctionData(functionFragment: "maxSupply", values: [string]): string;
  encodeFunctionData(
    functionFragment: "sutokenLiquidationIncentiveMantissa",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "accountAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allMarkets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closeFactorMantissa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "heteroLiquidationIncentiveMantissa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "homoLiquidationIncentiveMantissa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isComptroller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "markets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxSupply", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sutokenLiquidationIncentiveMantissa",
    data: BytesLike
  ): Result;

  events: {
    "MarketEntered(address,address)": EventFragment;
    "MarketExited(address,address)": EventFragment;
    "MarketListed(address)": EventFragment;
    "NewCloseFactor(uint256,uint256)": EventFragment;
    "NewLiquidationIncentive(uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "NewPriceOracle(address,address)": EventFragment;
    "SetMaxSupply(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MarketEntered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketExited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketListed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewCloseFactor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewLiquidationIncentive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPriceOracle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxSupply"): EventFragment;
}

export type MarketEnteredEvent = TypedEvent<
  [string, string] & { cToken: string; account: string }
>;

export type MarketExitedEvent = TypedEvent<
  [string, string] & { cToken: string; account: string }
>;

export type MarketListedEvent = TypedEvent<[string] & { cToken: string }>;

export type NewCloseFactorEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    oldCloseFactorMantissa: BigNumber;
    newCloseFactorMantissa: BigNumber;
  }
>;

export type NewLiquidationIncentiveEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    oldHeteroIncentive: BigNumber;
    newHeteroIncentive: BigNumber;
    oldHomoIncentive: BigNumber;
    newHomoIncentive: BigNumber;
    oldSutokenIncentive: BigNumber;
    newSutokenIncentive: BigNumber;
  }
>;

export type NewPriceOracleEvent = TypedEvent<
  [string, string] & { oldPriceOracle: string; newPriceOracle: string }
>;

export type SetMaxSupplyEvent = TypedEvent<
  [string, BigNumber] & { cToken: string; amount: BigNumber }
>;

export class ComptrollerStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ComptrollerStorageInterface;

  functions: {
    accountAssets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    allMarkets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;

    heteroLiquidationIncentiveMantissa(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    homoLiquidationIncentiveMantissa(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isComptroller(overrides?: CallOverrides): Promise<[boolean]>;

    markets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, boolean] & {
        isListed: boolean;
        assetGroupId: number;
        isComped: boolean;
      }
    >;

    maxSupply(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    sutokenLiquidationIncentiveMantissa(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  accountAssets(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  allMarkets(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  closeFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  heteroLiquidationIncentiveMantissa(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  homoLiquidationIncentiveMantissa(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isComptroller(overrides?: CallOverrides): Promise<boolean>;

  markets(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, number, boolean] & {
      isListed: boolean;
      assetGroupId: number;
      isComped: boolean;
    }
  >;

  maxSupply(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  sutokenLiquidationIncentiveMantissa(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    accountAssets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    allMarkets(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    heteroLiquidationIncentiveMantissa(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    homoLiquidationIncentiveMantissa(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isComptroller(overrides?: CallOverrides): Promise<boolean>;

    markets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, boolean] & {
        isListed: boolean;
        assetGroupId: number;
        isComped: boolean;
      }
    >;

    maxSupply(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    sutokenLiquidationIncentiveMantissa(
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "MarketEntered(address,address)"(
      cToken?: null,
      account?: null
    ): TypedEventFilter<[string, string], { cToken: string; account: string }>;

    MarketEntered(
      cToken?: null,
      account?: null
    ): TypedEventFilter<[string, string], { cToken: string; account: string }>;

    "MarketExited(address,address)"(
      cToken?: null,
      account?: null
    ): TypedEventFilter<[string, string], { cToken: string; account: string }>;

    MarketExited(
      cToken?: null,
      account?: null
    ): TypedEventFilter<[string, string], { cToken: string; account: string }>;

    "MarketListed(address)"(
      cToken?: null
    ): TypedEventFilter<[string], { cToken: string }>;

    MarketListed(cToken?: null): TypedEventFilter<[string], { cToken: string }>;

    "NewCloseFactor(uint256,uint256)"(
      oldCloseFactorMantissa?: null,
      newCloseFactorMantissa?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldCloseFactorMantissa: BigNumber; newCloseFactorMantissa: BigNumber }
    >;

    NewCloseFactor(
      oldCloseFactorMantissa?: null,
      newCloseFactorMantissa?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldCloseFactorMantissa: BigNumber; newCloseFactorMantissa: BigNumber }
    >;

    "NewLiquidationIncentive(uint256,uint256,uint256,uint256,uint256,uint256)"(
      oldHeteroIncentive?: null,
      newHeteroIncentive?: null,
      oldHomoIncentive?: null,
      newHomoIncentive?: null,
      oldSutokenIncentive?: null,
      newSutokenIncentive?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        oldHeteroIncentive: BigNumber;
        newHeteroIncentive: BigNumber;
        oldHomoIncentive: BigNumber;
        newHomoIncentive: BigNumber;
        oldSutokenIncentive: BigNumber;
        newSutokenIncentive: BigNumber;
      }
    >;

    NewLiquidationIncentive(
      oldHeteroIncentive?: null,
      newHeteroIncentive?: null,
      oldHomoIncentive?: null,
      newHomoIncentive?: null,
      oldSutokenIncentive?: null,
      newSutokenIncentive?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        oldHeteroIncentive: BigNumber;
        newHeteroIncentive: BigNumber;
        oldHomoIncentive: BigNumber;
        newHomoIncentive: BigNumber;
        oldSutokenIncentive: BigNumber;
        newSutokenIncentive: BigNumber;
      }
    >;

    "NewPriceOracle(address,address)"(
      oldPriceOracle?: null,
      newPriceOracle?: null
    ): TypedEventFilter<
      [string, string],
      { oldPriceOracle: string; newPriceOracle: string }
    >;

    NewPriceOracle(
      oldPriceOracle?: null,
      newPriceOracle?: null
    ): TypedEventFilter<
      [string, string],
      { oldPriceOracle: string; newPriceOracle: string }
    >;

    "SetMaxSupply(address,uint256)"(
      cToken?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { cToken: string; amount: BigNumber }
    >;

    SetMaxSupply(
      cToken?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { cToken: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    accountAssets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allMarkets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    heteroLiquidationIncentiveMantissa(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    homoLiquidationIncentiveMantissa(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isComptroller(overrides?: CallOverrides): Promise<BigNumber>;

    markets(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxSupply(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    sutokenLiquidationIncentiveMantissa(
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountAssets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allMarkets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closeFactorMantissa(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    heteroLiquidationIncentiveMantissa(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    homoLiquidationIncentiveMantissa(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isComptroller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    markets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxSupply(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sutokenLiquidationIncentiveMantissa(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
