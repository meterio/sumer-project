/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface BoolComptrollerInterface extends utils.Interface {
  functions: {
    "borrowAllowed(address,address,uint256)": FunctionFragment;
    "borrowVerify(address,address,uint256)": FunctionFragment;
    "enterMarkets(address[])": FunctionFragment;
    "exitMarket(address)": FunctionFragment;
    "isComptroller()": FunctionFragment;
    "liquidateBorrowAllowed(address,address,address,address,uint256)": FunctionFragment;
    "liquidateBorrowVerify(address,address,address,address,uint256,uint256)": FunctionFragment;
    "liquidateCalculateSeizeTokens(address,address,uint256)": FunctionFragment;
    "mintAllowed(address,address,uint256)": FunctionFragment;
    "mintVerify(address,address,uint256,uint256)": FunctionFragment;
    "redeemAllowed(address,address,uint256)": FunctionFragment;
    "redeemVerify(address,address,uint256,uint256)": FunctionFragment;
    "repayBorrowAllowed(address,address,address,uint256)": FunctionFragment;
    "repayBorrowVerify(address,address,address,uint256,uint256)": FunctionFragment;
    "seizeAllowed(address,address,address,address,uint256)": FunctionFragment;
    "seizeVerify(address,address,address,address,uint256)": FunctionFragment;
    "setBorrowAllowed(bool)": FunctionFragment;
    "setBorrowVerify(bool)": FunctionFragment;
    "setCalculatedSeizeTokens(uint256)": FunctionFragment;
    "setFailCalculateSeizeTokens(bool)": FunctionFragment;
    "setLiquidateBorrowAllowed(bool)": FunctionFragment;
    "setLiquidateBorrowVerify(bool)": FunctionFragment;
    "setMintAllowed(bool)": FunctionFragment;
    "setMintVerify(bool)": FunctionFragment;
    "setRedeemAllowed(bool)": FunctionFragment;
    "setRedeemVerify(bool)": FunctionFragment;
    "setRepayBorrowAllowed(bool)": FunctionFragment;
    "setRepayBorrowVerify(bool)": FunctionFragment;
    "setSeizeAllowed(bool)": FunctionFragment;
    "setSeizeVerify(bool)": FunctionFragment;
    "setTransferAllowed(bool)": FunctionFragment;
    "setTransferVerify(bool)": FunctionFragment;
    "transferAllowed(address,address,address,uint256)": FunctionFragment;
    "transferVerify(address,address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "borrowAllowed"
      | "borrowVerify"
      | "enterMarkets"
      | "exitMarket"
      | "isComptroller"
      | "liquidateBorrowAllowed"
      | "liquidateBorrowVerify"
      | "liquidateCalculateSeizeTokens"
      | "mintAllowed"
      | "mintVerify"
      | "redeemAllowed"
      | "redeemVerify"
      | "repayBorrowAllowed"
      | "repayBorrowVerify"
      | "seizeAllowed"
      | "seizeVerify"
      | "setBorrowAllowed"
      | "setBorrowVerify"
      | "setCalculatedSeizeTokens"
      | "setFailCalculateSeizeTokens"
      | "setLiquidateBorrowAllowed"
      | "setLiquidateBorrowVerify"
      | "setMintAllowed"
      | "setMintVerify"
      | "setRedeemAllowed"
      | "setRedeemVerify"
      | "setRepayBorrowAllowed"
      | "setRepayBorrowVerify"
      | "setSeizeAllowed"
      | "setSeizeVerify"
      | "setTransferAllowed"
      | "setTransferVerify"
      | "transferAllowed"
      | "transferVerify"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "borrowAllowed",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowVerify",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enterMarkets",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "exitMarket", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isComptroller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateBorrowAllowed",
    values: [string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateBorrowVerify",
    values: [string, string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateCalculateSeizeTokens",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAllowed",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintVerify",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemAllowed",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemVerify",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayBorrowAllowed",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayBorrowVerify",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "seizeAllowed",
    values: [string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "seizeVerify",
    values: [string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBorrowAllowed",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBorrowVerify",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setCalculatedSeizeTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFailCalculateSeizeTokens",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidateBorrowAllowed",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidateBorrowVerify",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintAllowed",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintVerify",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setRedeemAllowed",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setRedeemVerify",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setRepayBorrowAllowed",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setRepayBorrowVerify",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSeizeAllowed",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSeizeVerify",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransferAllowed",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransferVerify",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAllowed",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferVerify",
    values: [string, string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "borrowAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exitMarket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isComptroller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateBorrowAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateBorrowVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateCalculateSeizeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintVerify", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayBorrowAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayBorrowVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seizeAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seizeVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBorrowAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBorrowVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCalculatedSeizeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFailCalculateSeizeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidateBorrowAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidateBorrowVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRedeemAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRedeemVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRepayBorrowAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRepayBorrowVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSeizeAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSeizeVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransferAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransferVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferVerify",
    data: BytesLike
  ): Result;

  events: {};
}

export interface BoolComptroller extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BoolComptrollerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    borrowAllowed(
      _cToken: string,
      _borrower: string,
      _borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrowVerify(
      _cToken: string,
      _borrower: string,
      _borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enterMarkets(
      _cTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exitMarket(
      _cToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isComptroller(overrides?: CallOverrides): Promise<[boolean]>;

    liquidateBorrowAllowed(
      _cTokenBorrowed: string,
      _cTokenCollateral: string,
      _liquidator: string,
      _borrower: string,
      _repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidateBorrowVerify(
      _cTokenBorrowed: string,
      _cTokenCollateral: string,
      _liquidator: string,
      _borrower: string,
      _repayAmount: BigNumberish,
      _seizeTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidateCalculateSeizeTokens(
      _cTokenBorrowed: string,
      _cTokenCollateral: string,
      _repayAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    mintAllowed(
      _cToken: string,
      _minter: string,
      _mintAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintVerify(
      _cToken: string,
      _minter: string,
      _mintAmount: BigNumberish,
      _mintTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemAllowed(
      _cToken: string,
      _redeemer: string,
      _redeemTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemVerify(
      _cToken: string,
      _redeemer: string,
      _redeemAmount: BigNumberish,
      _redeemTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repayBorrowAllowed(
      _cToken: string,
      _payer: string,
      _borrower: string,
      _repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repayBorrowVerify(
      _cToken: string,
      _payer: string,
      _borrower: string,
      _repayAmount: BigNumberish,
      _borrowerIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    seizeAllowed(
      _cTokenCollateral: string,
      _cTokenBorrowed: string,
      _borrower: string,
      _liquidator: string,
      _seizeTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    seizeVerify(
      _cTokenCollateral: string,
      _cTokenBorrowed: string,
      _liquidator: string,
      _borrower: string,
      _seizeTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBorrowAllowed(
      allowBorrow_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBorrowVerify(
      verifyBorrow_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCalculatedSeizeTokens(
      seizeTokens_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFailCalculateSeizeTokens(
      shouldFail: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidateBorrowAllowed(
      allowLiquidateBorrow_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidateBorrowVerify(
      verifyLiquidateBorrow_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMintAllowed(
      allowMint_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMintVerify(
      verifyMint_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRedeemAllowed(
      allowRedeem_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRedeemVerify(
      verifyRedeem_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRepayBorrowAllowed(
      allowRepayBorrow_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRepayBorrowVerify(
      verifyRepayBorrow_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSeizeAllowed(
      allowSeize_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSeizeVerify(
      verifySeize_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTransferAllowed(
      allowTransfer_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTransferVerify(
      verifyTransfer_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferAllowed(
      _cToken: string,
      _src: string,
      _dst: string,
      _transferTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferVerify(
      _cToken: string,
      _src: string,
      _dst: string,
      _transferTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  borrowAllowed(
    _cToken: string,
    _borrower: string,
    _borrowAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrowVerify(
    _cToken: string,
    _borrower: string,
    _borrowAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enterMarkets(
    _cTokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exitMarket(
    _cToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isComptroller(overrides?: CallOverrides): Promise<boolean>;

  liquidateBorrowAllowed(
    _cTokenBorrowed: string,
    _cTokenCollateral: string,
    _liquidator: string,
    _borrower: string,
    _repayAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidateBorrowVerify(
    _cTokenBorrowed: string,
    _cTokenCollateral: string,
    _liquidator: string,
    _borrower: string,
    _repayAmount: BigNumberish,
    _seizeTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidateCalculateSeizeTokens(
    _cTokenBorrowed: string,
    _cTokenCollateral: string,
    _repayAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  mintAllowed(
    _cToken: string,
    _minter: string,
    _mintAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintVerify(
    _cToken: string,
    _minter: string,
    _mintAmount: BigNumberish,
    _mintTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemAllowed(
    _cToken: string,
    _redeemer: string,
    _redeemTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemVerify(
    _cToken: string,
    _redeemer: string,
    _redeemAmount: BigNumberish,
    _redeemTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repayBorrowAllowed(
    _cToken: string,
    _payer: string,
    _borrower: string,
    _repayAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repayBorrowVerify(
    _cToken: string,
    _payer: string,
    _borrower: string,
    _repayAmount: BigNumberish,
    _borrowerIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  seizeAllowed(
    _cTokenCollateral: string,
    _cTokenBorrowed: string,
    _borrower: string,
    _liquidator: string,
    _seizeTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  seizeVerify(
    _cTokenCollateral: string,
    _cTokenBorrowed: string,
    _liquidator: string,
    _borrower: string,
    _seizeTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBorrowAllowed(
    allowBorrow_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBorrowVerify(
    verifyBorrow_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCalculatedSeizeTokens(
    seizeTokens_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFailCalculateSeizeTokens(
    shouldFail: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidateBorrowAllowed(
    allowLiquidateBorrow_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidateBorrowVerify(
    verifyLiquidateBorrow_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMintAllowed(
    allowMint_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMintVerify(
    verifyMint_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRedeemAllowed(
    allowRedeem_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRedeemVerify(
    verifyRedeem_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRepayBorrowAllowed(
    allowRepayBorrow_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRepayBorrowVerify(
    verifyRepayBorrow_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSeizeAllowed(
    allowSeize_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSeizeVerify(
    verifySeize_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTransferAllowed(
    allowTransfer_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTransferVerify(
    verifyTransfer_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferAllowed(
    _cToken: string,
    _src: string,
    _dst: string,
    _transferTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferVerify(
    _cToken: string,
    _src: string,
    _dst: string,
    _transferTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    borrowAllowed(
      _cToken: string,
      _borrower: string,
      _borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowVerify(
      _cToken: string,
      _borrower: string,
      _borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    enterMarkets(
      _cTokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    exitMarket(_cToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    isComptroller(overrides?: CallOverrides): Promise<boolean>;

    liquidateBorrowAllowed(
      _cTokenBorrowed: string,
      _cTokenCollateral: string,
      _liquidator: string,
      _borrower: string,
      _repayAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateBorrowVerify(
      _cTokenBorrowed: string,
      _cTokenCollateral: string,
      _liquidator: string,
      _borrower: string,
      _repayAmount: BigNumberish,
      _seizeTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidateCalculateSeizeTokens(
      _cTokenBorrowed: string,
      _cTokenCollateral: string,
      _repayAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    mintAllowed(
      _cToken: string,
      _minter: string,
      _mintAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintVerify(
      _cToken: string,
      _minter: string,
      _mintAmount: BigNumberish,
      _mintTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemAllowed(
      _cToken: string,
      _redeemer: string,
      _redeemTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemVerify(
      _cToken: string,
      _redeemer: string,
      _redeemAmount: BigNumberish,
      _redeemTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    repayBorrowAllowed(
      _cToken: string,
      _payer: string,
      _borrower: string,
      _repayAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    repayBorrowVerify(
      _cToken: string,
      _payer: string,
      _borrower: string,
      _repayAmount: BigNumberish,
      _borrowerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    seizeAllowed(
      _cTokenCollateral: string,
      _cTokenBorrowed: string,
      _borrower: string,
      _liquidator: string,
      _seizeTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seizeVerify(
      _cTokenCollateral: string,
      _cTokenBorrowed: string,
      _liquidator: string,
      _borrower: string,
      _seizeTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBorrowAllowed(
      allowBorrow_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBorrowVerify(
      verifyBorrow_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setCalculatedSeizeTokens(
      seizeTokens_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFailCalculateSeizeTokens(
      shouldFail: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidateBorrowAllowed(
      allowLiquidateBorrow_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidateBorrowVerify(
      verifyLiquidateBorrow_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintAllowed(
      allowMint_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintVerify(
      verifyMint_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setRedeemAllowed(
      allowRedeem_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setRedeemVerify(
      verifyRedeem_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setRepayBorrowAllowed(
      allowRepayBorrow_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setRepayBorrowVerify(
      verifyRepayBorrow_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setSeizeAllowed(
      allowSeize_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setSeizeVerify(
      verifySeize_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setTransferAllowed(
      allowTransfer_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setTransferVerify(
      verifyTransfer_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transferAllowed(
      _cToken: string,
      _src: string,
      _dst: string,
      _transferTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferVerify(
      _cToken: string,
      _src: string,
      _dst: string,
      _transferTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    borrowAllowed(
      _cToken: string,
      _borrower: string,
      _borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrowVerify(
      _cToken: string,
      _borrower: string,
      _borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enterMarkets(
      _cTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exitMarket(
      _cToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isComptroller(overrides?: CallOverrides): Promise<BigNumber>;

    liquidateBorrowAllowed(
      _cTokenBorrowed: string,
      _cTokenCollateral: string,
      _liquidator: string,
      _borrower: string,
      _repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidateBorrowVerify(
      _cTokenBorrowed: string,
      _cTokenCollateral: string,
      _liquidator: string,
      _borrower: string,
      _repayAmount: BigNumberish,
      _seizeTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidateCalculateSeizeTokens(
      _cTokenBorrowed: string,
      _cTokenCollateral: string,
      _repayAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintAllowed(
      _cToken: string,
      _minter: string,
      _mintAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintVerify(
      _cToken: string,
      _minter: string,
      _mintAmount: BigNumberish,
      _mintTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemAllowed(
      _cToken: string,
      _redeemer: string,
      _redeemTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemVerify(
      _cToken: string,
      _redeemer: string,
      _redeemAmount: BigNumberish,
      _redeemTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repayBorrowAllowed(
      _cToken: string,
      _payer: string,
      _borrower: string,
      _repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repayBorrowVerify(
      _cToken: string,
      _payer: string,
      _borrower: string,
      _repayAmount: BigNumberish,
      _borrowerIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    seizeAllowed(
      _cTokenCollateral: string,
      _cTokenBorrowed: string,
      _borrower: string,
      _liquidator: string,
      _seizeTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    seizeVerify(
      _cTokenCollateral: string,
      _cTokenBorrowed: string,
      _liquidator: string,
      _borrower: string,
      _seizeTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBorrowAllowed(
      allowBorrow_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBorrowVerify(
      verifyBorrow_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCalculatedSeizeTokens(
      seizeTokens_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFailCalculateSeizeTokens(
      shouldFail: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidateBorrowAllowed(
      allowLiquidateBorrow_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidateBorrowVerify(
      verifyLiquidateBorrow_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMintAllowed(
      allowMint_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMintVerify(
      verifyMint_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRedeemAllowed(
      allowRedeem_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRedeemVerify(
      verifyRedeem_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRepayBorrowAllowed(
      allowRepayBorrow_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRepayBorrowVerify(
      verifyRepayBorrow_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSeizeAllowed(
      allowSeize_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSeizeVerify(
      verifySeize_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTransferAllowed(
      allowTransfer_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTransferVerify(
      verifyTransfer_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferAllowed(
      _cToken: string,
      _src: string,
      _dst: string,
      _transferTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferVerify(
      _cToken: string,
      _src: string,
      _dst: string,
      _transferTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    borrowAllowed(
      _cToken: string,
      _borrower: string,
      _borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrowVerify(
      _cToken: string,
      _borrower: string,
      _borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enterMarkets(
      _cTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exitMarket(
      _cToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isComptroller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidateBorrowAllowed(
      _cTokenBorrowed: string,
      _cTokenCollateral: string,
      _liquidator: string,
      _borrower: string,
      _repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidateBorrowVerify(
      _cTokenBorrowed: string,
      _cTokenCollateral: string,
      _liquidator: string,
      _borrower: string,
      _repayAmount: BigNumberish,
      _seizeTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidateCalculateSeizeTokens(
      _cTokenBorrowed: string,
      _cTokenCollateral: string,
      _repayAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintAllowed(
      _cToken: string,
      _minter: string,
      _mintAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintVerify(
      _cToken: string,
      _minter: string,
      _mintAmount: BigNumberish,
      _mintTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemAllowed(
      _cToken: string,
      _redeemer: string,
      _redeemTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemVerify(
      _cToken: string,
      _redeemer: string,
      _redeemAmount: BigNumberish,
      _redeemTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repayBorrowAllowed(
      _cToken: string,
      _payer: string,
      _borrower: string,
      _repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repayBorrowVerify(
      _cToken: string,
      _payer: string,
      _borrower: string,
      _repayAmount: BigNumberish,
      _borrowerIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    seizeAllowed(
      _cTokenCollateral: string,
      _cTokenBorrowed: string,
      _borrower: string,
      _liquidator: string,
      _seizeTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    seizeVerify(
      _cTokenCollateral: string,
      _cTokenBorrowed: string,
      _liquidator: string,
      _borrower: string,
      _seizeTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBorrowAllowed(
      allowBorrow_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBorrowVerify(
      verifyBorrow_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCalculatedSeizeTokens(
      seizeTokens_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFailCalculateSeizeTokens(
      shouldFail: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidateBorrowAllowed(
      allowLiquidateBorrow_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidateBorrowVerify(
      verifyLiquidateBorrow_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMintAllowed(
      allowMint_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMintVerify(
      verifyMint_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRedeemAllowed(
      allowRedeem_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRedeemVerify(
      verifyRedeem_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRepayBorrowAllowed(
      allowRepayBorrow_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRepayBorrowVerify(
      verifyRepayBorrow_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSeizeAllowed(
      allowSeize_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSeizeVerify(
      verifySeize_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTransferAllowed(
      allowTransfer_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTransferVerify(
      verifyTransfer_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferAllowed(
      _cToken: string,
      _src: string,
      _dst: string,
      _transferTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferVerify(
      _cToken: string,
      _src: string,
      _dst: string,
      _transferTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
