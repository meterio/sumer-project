/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface InterestRateModelHarnessInterface extends utils.Interface {
  functions: {
    "borrowRate()": FunctionFragment;
    "failBorrowRate()": FunctionFragment;
    "getBorrowRate(uint256,uint256,uint256)": FunctionFragment;
    "getSupplyRate(uint256,uint256,uint256,uint256)": FunctionFragment;
    "isInterestRateModel()": FunctionFragment;
    "opaqueBorrowFailureCode()": FunctionFragment;
    "setBorrowRate(uint256)": FunctionFragment;
    "setFailBorrowRate(bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "borrowRate"
      | "failBorrowRate"
      | "getBorrowRate"
      | "getSupplyRate"
      | "isInterestRateModel"
      | "opaqueBorrowFailureCode"
      | "setBorrowRate"
      | "setFailBorrowRate"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "borrowRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "failBorrowRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowRate",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupplyRate",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isInterestRateModel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "opaqueBorrowFailureCode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBorrowRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFailBorrowRate",
    values: [boolean]
  ): string;

  decodeFunctionResult(functionFragment: "borrowRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "failBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupplyRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInterestRateModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "opaqueBorrowFailureCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFailBorrowRate",
    data: BytesLike
  ): Result;

  events: {};
}

export interface InterestRateModelHarness extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InterestRateModelHarnessInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    borrowRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    failBorrowRate(overrides?: CallOverrides): Promise<[boolean]>;

    getBorrowRate(
      _cash: BigNumberish,
      _borrows: BigNumberish,
      _reserves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSupplyRate(
      _cash: BigNumberish,
      _borrows: BigNumberish,
      _reserves: BigNumberish,
      _reserveFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isInterestRateModel(overrides?: CallOverrides): Promise<[boolean]>;

    opaqueBorrowFailureCode(overrides?: CallOverrides): Promise<[BigNumber]>;

    setBorrowRate(
      borrowRate_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFailBorrowRate(
      failBorrowRate_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  borrowRate(overrides?: CallOverrides): Promise<BigNumber>;

  failBorrowRate(overrides?: CallOverrides): Promise<boolean>;

  getBorrowRate(
    _cash: BigNumberish,
    _borrows: BigNumberish,
    _reserves: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSupplyRate(
    _cash: BigNumberish,
    _borrows: BigNumberish,
    _reserves: BigNumberish,
    _reserveFactor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isInterestRateModel(overrides?: CallOverrides): Promise<boolean>;

  opaqueBorrowFailureCode(overrides?: CallOverrides): Promise<BigNumber>;

  setBorrowRate(
    borrowRate_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFailBorrowRate(
    failBorrowRate_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    borrowRate(overrides?: CallOverrides): Promise<BigNumber>;

    failBorrowRate(overrides?: CallOverrides): Promise<boolean>;

    getBorrowRate(
      _cash: BigNumberish,
      _borrows: BigNumberish,
      _reserves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSupplyRate(
      _cash: BigNumberish,
      _borrows: BigNumberish,
      _reserves: BigNumberish,
      _reserveFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInterestRateModel(overrides?: CallOverrides): Promise<boolean>;

    opaqueBorrowFailureCode(overrides?: CallOverrides): Promise<BigNumber>;

    setBorrowRate(
      borrowRate_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFailBorrowRate(
      failBorrowRate_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    borrowRate(overrides?: CallOverrides): Promise<BigNumber>;

    failBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowRate(
      _cash: BigNumberish,
      _borrows: BigNumberish,
      _reserves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSupplyRate(
      _cash: BigNumberish,
      _borrows: BigNumberish,
      _reserves: BigNumberish,
      _reserveFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInterestRateModel(overrides?: CallOverrides): Promise<BigNumber>;

    opaqueBorrowFailureCode(overrides?: CallOverrides): Promise<BigNumber>;

    setBorrowRate(
      borrowRate_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFailBorrowRate(
      failBorrowRate_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    borrowRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    failBorrowRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBorrowRate(
      _cash: BigNumberish,
      _borrows: BigNumberish,
      _reserves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSupplyRate(
      _cash: BigNumberish,
      _borrows: BigNumberish,
      _reserves: BigNumberish,
      _reserveFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInterestRateModel(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    opaqueBorrowFailureCode(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBorrowRate(
      borrowRate_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFailBorrowRate(
      failBorrowRate_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
