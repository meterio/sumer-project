/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "ERC20BurnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20BurnableUpgradeable__factory>;
    getContractFactory(
      name: "ERC20PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PausableUpgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "ERC20Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Pausable__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "BaseJumpRateModelV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseJumpRateModelV2__factory>;
    getContractFactory(
      name: "CDaiDelegate",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CDaiDelegate__factory>;
    getContractFactory(
      name: "DaiJoinLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DaiJoinLike__factory>;
    getContractFactory(
      name: "GemLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GemLike__factory>;
    getContractFactory(
      name: "PotLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PotLike__factory>;
    getContractFactory(
      name: "VatLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VatLike__factory>;
    getContractFactory(
      name: "CErc20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CErc20__factory>;
    getContractFactory(
      name: "CompLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CompLike__factory>;
    getContractFactory(
      name: "CErc20Delegate",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CErc20Delegate__factory>;
    getContractFactory(
      name: "CErc20Delegator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CErc20Delegator__factory>;
    getContractFactory(
      name: "CErc20Immutable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CErc20Immutable__factory>;
    getContractFactory(
      name: "CEther",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CEther__factory>;
    getContractFactory(
      name: "Comptroller",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Comptroller__factory>;
    getContractFactory(
      name: "PriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PriceOracle__factory>;
    getContractFactory(
      name: "ComptrollerInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComptrollerInterface__factory>;
    getContractFactory(
      name: "ComptrollerV1Storage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComptrollerV1Storage__factory>;
    getContractFactory(
      name: "ComptrollerV2Storage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComptrollerV2Storage__factory>;
    getContractFactory(
      name: "ComptrollerV3Storage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComptrollerV3Storage__factory>;
    getContractFactory(
      name: "ComptrollerV4Storage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComptrollerV4Storage__factory>;
    getContractFactory(
      name: "ComptrollerV5Storage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComptrollerV5Storage__factory>;
    getContractFactory(
      name: "ComptrollerV6Storage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComptrollerV6Storage__factory>;
    getContractFactory(
      name: "ComptrollerV7Storage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComptrollerV7Storage__factory>;
    getContractFactory(
      name: "UnitrollerAdminStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UnitrollerAdminStorage__factory>;
    getContractFactory(
      name: "CToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CToken__factory>;
    getContractFactory(
      name: "CDelegateInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CDelegateInterface__factory>;
    getContractFactory(
      name: "CDelegationStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CDelegationStorage__factory>;
    getContractFactory(
      name: "CDelegatorInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CDelegatorInterface__factory>;
    getContractFactory(
      name: "CErc20Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CErc20Interface__factory>;
    getContractFactory(
      name: "CErc20Storage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CErc20Storage__factory>;
    getContractFactory(
      name: "CTokenInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CTokenInterface__factory>;
    getContractFactory(
      name: "CTokenStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CTokenStorage__factory>;
    getContractFactory(
      name: "DAIInterestRateModelV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DAIInterestRateModelV3__factory>;
    getContractFactory(
      name: "JugLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.JugLike__factory>;
    getContractFactory(
      name: "PotLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PotLike__factory>;
    getContractFactory(
      name: "EIP20Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP20Interface__factory>;
    getContractFactory(
      name: "EIP20NonStandardInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP20NonStandardInterface__factory>;
    getContractFactory(
      name: "ComptrollerErrorReporter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComptrollerErrorReporter__factory>;
    getContractFactory(
      name: "TokenErrorReporter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenErrorReporter__factory>;
    getContractFactory(
      name: "ChainlinkFeed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainlinkFeed__factory>;
    getContractFactory(
      name: "FeedPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeedPriceOracle__factory>;
    getContractFactory(
      name: "WitnetFeed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WitnetFeed__factory>;
    getContractFactory(
      name: "Comp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Comp__factory>;
    getContractFactory(
      name: "EIP712",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712__factory>;
    getContractFactory(
      name: "CompInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CompInterface__factory>;
    getContractFactory(
      name: "GovernorAlpha",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorAlpha__factory>;
    getContractFactory(
      name: "TimelockInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TimelockInterface__factory>;
    getContractFactory(
      name: "GovernorBravoDelegate",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorBravoDelegate__factory>;
    getContractFactory(
      name: "GovernorBravoDelegator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorBravoDelegator__factory>;
    getContractFactory(
      name: "CompInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CompInterface__factory>;
    getContractFactory(
      name: "GovernorAlpha",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorAlpha__factory>;
    getContractFactory(
      name: "GovernorBravoDelegateStorageV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorBravoDelegateStorageV1__factory>;
    getContractFactory(
      name: "GovernorBravoDelegatorStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorBravoDelegatorStorage__factory>;
    getContractFactory(
      name: "GovernorBravoEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorBravoEvents__factory>;
    getContractFactory(
      name: "TimelockInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TimelockInterface__factory>;
    getContractFactory(
      name: "InterestRateModel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InterestRateModel__factory>;
    getContractFactory(
      name: "JumpRateModel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.JumpRateModel__factory>;
    getContractFactory(
      name: "JumpRateModelV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.JumpRateModelV2__factory>;
    getContractFactory(
      name: "LegacyInterestRateModel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LegacyInterestRateModel__factory>;
    getContractFactory(
      name: "LegacyJumpRateModelV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LegacyJumpRateModelV2__factory>;
    getContractFactory(
      name: "CompoundLens",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CompoundLens__factory>;
    getContractFactory(
      name: "ComptrollerLensInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComptrollerLensInterface__factory>;
    getContractFactory(
      name: "GovernorBravoInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorBravoInterface__factory>;
    getContractFactory(
      name: "LockLiquidity",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LockLiquidity__factory>;
    getContractFactory(
      name: "Maximillion",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Maximillion__factory>;
    getContractFactory(
      name: "PriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PriceOracle__factory>;
    getContractFactory(
      name: "Reservoir",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Reservoir__factory>;
    getContractFactory(
      name: "SimplePriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimplePriceOracle__factory>;
    getContractFactory(
      name: "Owned",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Owned__factory>;
    getContractFactory(
      name: "CommunalFarm",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CommunalFarm__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "CompERC20MintablePauseable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CompERC20MintablePauseable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "ERC20MintablePauseableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20MintablePauseableUpgradeable__factory>;
    getContractFactory(
      name: "ERC20MinterBurnerPauser",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20MinterBurnerPauser__factory>;
    getContractFactory(
      name: "ERC20Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Pausable__factory>;
    getContractFactory(
      name: "ERC20PresetMinterPauser",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PresetMinterPauser__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "Farm_UniV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Farm_UniV3__factory>;
    getContractFactory(
      name: "IUniswapV3Pool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3Pool__factory>;
    getContractFactory(
      name: "IUniswapV3PositionsNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PositionsNFT__factory>;
    getContractFactory(
      name: "IUniswapV3PoolActions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolActions__factory>;
    getContractFactory(
      name: "IUniswapV3PoolDerivedState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolDerivedState__factory>;
    getContractFactory(
      name: "IUniswapV3PoolEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolEvents__factory>;
    getContractFactory(
      name: "IUniswapV3PoolImmutables",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolImmutables__factory>;
    getContractFactory(
      name: "IUniswapV3PoolOwnerActions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolOwnerActions__factory>;
    getContractFactory(
      name: "IUniswapV3PoolState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolState__factory>;
    getContractFactory(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair__factory>;
    getContractFactory(
      name: "CompLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CompLike__factory>;
    getContractFactory(
      name: "SuErc20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuErc20__factory>;
    getContractFactory(
      name: "SuErc20Delegate",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuErc20Delegate__factory>;
    getContractFactory(
      name: "SuErc20Delegator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuErc20Delegator__factory>;
    getContractFactory(
      name: "SuErc20Immutable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuErc20Immutable__factory>;
    getContractFactory(
      name: "SuTokenRateModel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuTokenRateModel__factory>;
    getContractFactory(
      name: "CDaiDelegateHarness",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CDaiDelegateHarness__factory>;
    getContractFactory(
      name: "CDaiDelegateMakerHarness",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CDaiDelegateMakerHarness__factory>;
    getContractFactory(
      name: "CDaiDelegateScenario",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CDaiDelegateScenario__factory>;
    getContractFactory(
      name: "CErc20DelegateHarness",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CErc20DelegateHarness__factory>;
    getContractFactory(
      name: "CErc20DelegateScenario",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CErc20DelegateScenario__factory>;
    getContractFactory(
      name: "CErc20DelegateScenarioExtra",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CErc20DelegateScenarioExtra__factory>;
    getContractFactory(
      name: "CErc20DelegatorScenario",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CErc20DelegatorScenario__factory>;
    getContractFactory(
      name: "CErc20Harness",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CErc20Harness__factory>;
    getContractFactory(
      name: "CErc20Scenario",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CErc20Scenario__factory>;
    getContractFactory(
      name: "CEvil",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CEvil__factory>;
    getContractFactory(
      name: "CEtherHarness",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CEtherHarness__factory>;
    getContractFactory(
      name: "CEtherScenario",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CEtherScenario__factory>;
    getContractFactory(
      name: "BoolComptroller",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BoolComptroller__factory>;
    getContractFactory(
      name: "ComptrollerBorked",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComptrollerBorked__factory>;
    getContractFactory(
      name: "ComptrollerHarness",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComptrollerHarness__factory>;
    getContractFactory(
      name: "ComptrollerKovan",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComptrollerKovan__factory>;
    getContractFactory(
      name: "ComptrollerRopsten",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComptrollerRopsten__factory>;
    getContractFactory(
      name: "EchoTypesComptroller",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EchoTypesComptroller__factory>;
    getContractFactory(
      name: "ComptrollerScenario",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComptrollerScenario__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Base",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Base__factory>;
    getContractFactory(
      name: "ERC20Harness",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Harness__factory>;
    getContractFactory(
      name: "ERC20NS",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20NS__factory>;
    getContractFactory(
      name: "NonStandardToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NonStandardToken__factory>;
    getContractFactory(
      name: "StandardToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StandardToken__factory>;
    getContractFactory(
      name: "InterestRateModelHarness",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InterestRateModelHarness__factory>;
    getContractFactory(
      name: "Timelock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Timelock__factory>;
    getContractFactory(
      name: "PriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PriceOracle__factory>;
    getContractFactory(
      name: "UnderwriterAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UnderwriterAdmin__factory>;
    getContractFactory(
      name: "UnderwriterProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UnderwriterProxy__factory>;
    getContractFactory(
      name: "UnderwriterAdminInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UnderwriterAdminInterface__factory>;
    getContractFactory(
      name: "UnderwriterProxyStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UnderwriterProxyStorage__factory>;
    getContractFactory(
      name: "UnderwriterStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UnderwriterStorage__factory>;
    getContractFactory(
      name: "Unitroller",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Unitroller__factory>;
    getContractFactory(
      name: "WhitePaperInterestRateModel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WhitePaperInterestRateModel__factory>;

    getContractAt(
      name: "AccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "ERC20BurnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20BurnableUpgradeable>;
    getContractAt(
      name: "ERC20PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PausableUpgradeable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "ERC20Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Pausable>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "BaseJumpRateModelV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseJumpRateModelV2>;
    getContractAt(
      name: "CDaiDelegate",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CDaiDelegate>;
    getContractAt(
      name: "DaiJoinLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DaiJoinLike>;
    getContractAt(
      name: "GemLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GemLike>;
    getContractAt(
      name: "PotLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PotLike>;
    getContractAt(
      name: "VatLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VatLike>;
    getContractAt(
      name: "CErc20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CErc20>;
    getContractAt(
      name: "CompLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CompLike>;
    getContractAt(
      name: "CErc20Delegate",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CErc20Delegate>;
    getContractAt(
      name: "CErc20Delegator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CErc20Delegator>;
    getContractAt(
      name: "CErc20Immutable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CErc20Immutable>;
    getContractAt(
      name: "CEther",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CEther>;
    getContractAt(
      name: "Comptroller",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Comptroller>;
    getContractAt(
      name: "PriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PriceOracle>;
    getContractAt(
      name: "ComptrollerInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ComptrollerInterface>;
    getContractAt(
      name: "ComptrollerV1Storage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ComptrollerV1Storage>;
    getContractAt(
      name: "ComptrollerV2Storage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ComptrollerV2Storage>;
    getContractAt(
      name: "ComptrollerV3Storage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ComptrollerV3Storage>;
    getContractAt(
      name: "ComptrollerV4Storage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ComptrollerV4Storage>;
    getContractAt(
      name: "ComptrollerV5Storage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ComptrollerV5Storage>;
    getContractAt(
      name: "ComptrollerV6Storage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ComptrollerV6Storage>;
    getContractAt(
      name: "ComptrollerV7Storage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ComptrollerV7Storage>;
    getContractAt(
      name: "UnitrollerAdminStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UnitrollerAdminStorage>;
    getContractAt(
      name: "CToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CToken>;
    getContractAt(
      name: "CDelegateInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CDelegateInterface>;
    getContractAt(
      name: "CDelegationStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CDelegationStorage>;
    getContractAt(
      name: "CDelegatorInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CDelegatorInterface>;
    getContractAt(
      name: "CErc20Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CErc20Interface>;
    getContractAt(
      name: "CErc20Storage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CErc20Storage>;
    getContractAt(
      name: "CTokenInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CTokenInterface>;
    getContractAt(
      name: "CTokenStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CTokenStorage>;
    getContractAt(
      name: "DAIInterestRateModelV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DAIInterestRateModelV3>;
    getContractAt(
      name: "JugLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.JugLike>;
    getContractAt(
      name: "PotLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PotLike>;
    getContractAt(
      name: "EIP20Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP20Interface>;
    getContractAt(
      name: "EIP20NonStandardInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP20NonStandardInterface>;
    getContractAt(
      name: "ComptrollerErrorReporter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ComptrollerErrorReporter>;
    getContractAt(
      name: "TokenErrorReporter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenErrorReporter>;
    getContractAt(
      name: "ChainlinkFeed",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainlinkFeed>;
    getContractAt(
      name: "FeedPriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FeedPriceOracle>;
    getContractAt(
      name: "WitnetFeed",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WitnetFeed>;
    getContractAt(
      name: "Comp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Comp>;
    getContractAt(
      name: "EIP712",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712>;
    getContractAt(
      name: "CompInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CompInterface>;
    getContractAt(
      name: "GovernorAlpha",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorAlpha>;
    getContractAt(
      name: "TimelockInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TimelockInterface>;
    getContractAt(
      name: "GovernorBravoDelegate",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorBravoDelegate>;
    getContractAt(
      name: "GovernorBravoDelegator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorBravoDelegator>;
    getContractAt(
      name: "CompInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CompInterface>;
    getContractAt(
      name: "GovernorAlpha",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorAlpha>;
    getContractAt(
      name: "GovernorBravoDelegateStorageV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorBravoDelegateStorageV1>;
    getContractAt(
      name: "GovernorBravoDelegatorStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorBravoDelegatorStorage>;
    getContractAt(
      name: "GovernorBravoEvents",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorBravoEvents>;
    getContractAt(
      name: "TimelockInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TimelockInterface>;
    getContractAt(
      name: "InterestRateModel",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InterestRateModel>;
    getContractAt(
      name: "JumpRateModel",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.JumpRateModel>;
    getContractAt(
      name: "JumpRateModelV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.JumpRateModelV2>;
    getContractAt(
      name: "LegacyInterestRateModel",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LegacyInterestRateModel>;
    getContractAt(
      name: "LegacyJumpRateModelV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LegacyJumpRateModelV2>;
    getContractAt(
      name: "CompoundLens",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CompoundLens>;
    getContractAt(
      name: "ComptrollerLensInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ComptrollerLensInterface>;
    getContractAt(
      name: "GovernorBravoInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorBravoInterface>;
    getContractAt(
      name: "LockLiquidity",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LockLiquidity>;
    getContractAt(
      name: "Maximillion",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Maximillion>;
    getContractAt(
      name: "PriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PriceOracle>;
    getContractAt(
      name: "Reservoir",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Reservoir>;
    getContractAt(
      name: "SimplePriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SimplePriceOracle>;
    getContractAt(
      name: "Owned",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Owned>;
    getContractAt(
      name: "CommunalFarm",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CommunalFarm>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "CompERC20MintablePauseable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CompERC20MintablePauseable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "ERC20MintablePauseableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20MintablePauseableUpgradeable>;
    getContractAt(
      name: "ERC20MinterBurnerPauser",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20MinterBurnerPauser>;
    getContractAt(
      name: "ERC20Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Pausable>;
    getContractAt(
      name: "ERC20PresetMinterPauser",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PresetMinterPauser>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "Farm_UniV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Farm_UniV3>;
    getContractAt(
      name: "IUniswapV3Pool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3Pool>;
    getContractAt(
      name: "IUniswapV3PositionsNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PositionsNFT>;
    getContractAt(
      name: "IUniswapV3PoolActions",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolActions>;
    getContractAt(
      name: "IUniswapV3PoolDerivedState",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolDerivedState>;
    getContractAt(
      name: "IUniswapV3PoolEvents",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolEvents>;
    getContractAt(
      name: "IUniswapV3PoolImmutables",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolImmutables>;
    getContractAt(
      name: "IUniswapV3PoolOwnerActions",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolOwnerActions>;
    getContractAt(
      name: "IUniswapV3PoolState",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolState>;
    getContractAt(
      name: "IUniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Pair>;
    getContractAt(
      name: "CompLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CompLike>;
    getContractAt(
      name: "SuErc20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuErc20>;
    getContractAt(
      name: "SuErc20Delegate",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuErc20Delegate>;
    getContractAt(
      name: "SuErc20Delegator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuErc20Delegator>;
    getContractAt(
      name: "SuErc20Immutable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuErc20Immutable>;
    getContractAt(
      name: "SuTokenRateModel",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuTokenRateModel>;
    getContractAt(
      name: "CDaiDelegateHarness",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CDaiDelegateHarness>;
    getContractAt(
      name: "CDaiDelegateMakerHarness",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CDaiDelegateMakerHarness>;
    getContractAt(
      name: "CDaiDelegateScenario",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CDaiDelegateScenario>;
    getContractAt(
      name: "CErc20DelegateHarness",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CErc20DelegateHarness>;
    getContractAt(
      name: "CErc20DelegateScenario",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CErc20DelegateScenario>;
    getContractAt(
      name: "CErc20DelegateScenarioExtra",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CErc20DelegateScenarioExtra>;
    getContractAt(
      name: "CErc20DelegatorScenario",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CErc20DelegatorScenario>;
    getContractAt(
      name: "CErc20Harness",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CErc20Harness>;
    getContractAt(
      name: "CErc20Scenario",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CErc20Scenario>;
    getContractAt(
      name: "CEvil",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CEvil>;
    getContractAt(
      name: "CEtherHarness",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CEtherHarness>;
    getContractAt(
      name: "CEtherScenario",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CEtherScenario>;
    getContractAt(
      name: "BoolComptroller",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BoolComptroller>;
    getContractAt(
      name: "ComptrollerBorked",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ComptrollerBorked>;
    getContractAt(
      name: "ComptrollerHarness",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ComptrollerHarness>;
    getContractAt(
      name: "ComptrollerKovan",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ComptrollerKovan>;
    getContractAt(
      name: "ComptrollerRopsten",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ComptrollerRopsten>;
    getContractAt(
      name: "EchoTypesComptroller",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EchoTypesComptroller>;
    getContractAt(
      name: "ComptrollerScenario",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ComptrollerScenario>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Base",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Base>;
    getContractAt(
      name: "ERC20Harness",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Harness>;
    getContractAt(
      name: "ERC20NS",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20NS>;
    getContractAt(
      name: "NonStandardToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NonStandardToken>;
    getContractAt(
      name: "StandardToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StandardToken>;
    getContractAt(
      name: "InterestRateModelHarness",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InterestRateModelHarness>;
    getContractAt(
      name: "Timelock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Timelock>;
    getContractAt(
      name: "PriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PriceOracle>;
    getContractAt(
      name: "UnderwriterAdmin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UnderwriterAdmin>;
    getContractAt(
      name: "UnderwriterProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UnderwriterProxy>;
    getContractAt(
      name: "UnderwriterAdminInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UnderwriterAdminInterface>;
    getContractAt(
      name: "UnderwriterProxyStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UnderwriterProxyStorage>;
    getContractAt(
      name: "UnderwriterStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UnderwriterStorage>;
    getContractAt(
      name: "Unitroller",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Unitroller>;
    getContractAt(
      name: "WhitePaperInterestRateModel",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WhitePaperInterestRateModel>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
