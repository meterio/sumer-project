/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CompoundLens,
  CompoundLensInterface,
} from "../../../../contracts/Lens/CompoundLens.sol/CompoundLens";

const _abi = [
  {
    constant: false,
    inputs: [
      {
        internalType: "contract CToken",
        name: "cToken",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "account",
        type: "address",
      },
    ],
    name: "cTokenBalances",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "cToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "balanceOf",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "borrowBalanceCurrent",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "balanceOfUnderlying",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tokenBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tokenAllowance",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.CTokenBalances",
        name: "",
        type: "tuple",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "contract CToken[]",
        name: "cTokens",
        type: "address[]",
      },
      {
        internalType: "address payable",
        name: "account",
        type: "address",
      },
    ],
    name: "cTokenBalancesAll",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "cToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "balanceOf",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "borrowBalanceCurrent",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "balanceOfUnderlying",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tokenBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tokenAllowance",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.CTokenBalances[]",
        name: "",
        type: "tuple[]",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "contract CToken",
        name: "cToken",
        type: "address",
      },
    ],
    name: "cTokenMetadata",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "cToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "exchangeRateCurrent",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "supplyRatePerBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "borrowRatePerBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "reserveFactorMantissa",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalBorrows",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalReserves",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalCash",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isListed",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "collateralFactorMantissa",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "underlyingAssetAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "cTokenDecimals",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "underlyingDecimals",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.CTokenMetadata",
        name: "",
        type: "tuple",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "contract CToken[]",
        name: "cTokens",
        type: "address[]",
      },
    ],
    name: "cTokenMetadataAll",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "cToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "exchangeRateCurrent",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "supplyRatePerBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "borrowRatePerBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "reserveFactorMantissa",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalBorrows",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalReserves",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalCash",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isListed",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "collateralFactorMantissa",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "underlyingAssetAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "cTokenDecimals",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "underlyingDecimals",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.CTokenMetadata[]",
        name: "",
        type: "tuple[]",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "contract CToken",
        name: "cToken",
        type: "address",
      },
    ],
    name: "cTokenUnderlyingPrice",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "cToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "underlyingPrice",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.CTokenUnderlyingPrice",
        name: "",
        type: "tuple",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "contract CToken[]",
        name: "cTokens",
        type: "address[]",
      },
    ],
    name: "cTokenUnderlyingPriceAll",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "cToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "underlyingPrice",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.CTokenUnderlyingPrice[]",
        name: "",
        type: "tuple[]",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "contract ComptrollerLensInterface",
        name: "comptroller",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getAccountLimits",
    outputs: [
      {
        components: [
          {
            internalType: "contract CToken[]",
            name: "markets",
            type: "address[]",
          },
          {
            internalType: "uint256",
            name: "liquidity",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "shortfall",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.AccountLimits",
        name: "",
        type: "tuple",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "contract Comp",
        name: "comp",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getCompBalanceMetadata",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "votes",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "delegate",
            type: "address",
          },
        ],
        internalType: "struct CompoundLens.CompBalanceMetadata",
        name: "",
        type: "tuple",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "contract Comp",
        name: "comp",
        type: "address",
      },
      {
        internalType: "contract ComptrollerLensInterface",
        name: "comptroller",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getCompBalanceMetadataExt",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "votes",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "delegate",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "allocated",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.CompBalanceMetadataExt",
        name: "",
        type: "tuple",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "contract Comp",
        name: "comp",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint32[]",
        name: "blockNumbers",
        type: "uint32[]",
      },
    ],
    name: "getCompVotes",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "blockNumber",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "votes",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.CompVotes[]",
        name: "",
        type: "tuple[]",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "contract GovernorBravoInterface",
        name: "governor",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "proposalIds",
        type: "uint256[]",
      },
    ],
    name: "getGovBravoProposals",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "proposalId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "proposer",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "eta",
            type: "uint256",
          },
          {
            internalType: "address[]",
            name: "targets",
            type: "address[]",
          },
          {
            internalType: "uint256[]",
            name: "values",
            type: "uint256[]",
          },
          {
            internalType: "string[]",
            name: "signatures",
            type: "string[]",
          },
          {
            internalType: "bytes[]",
            name: "calldatas",
            type: "bytes[]",
          },
          {
            internalType: "uint256",
            name: "startBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "forVotes",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "againstVotes",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "abstainVotes",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "canceled",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "executed",
            type: "bool",
          },
        ],
        internalType: "struct CompoundLens.GovBravoProposal[]",
        name: "",
        type: "tuple[]",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "contract GovernorBravoInterface",
        name: "governor",
        type: "address",
      },
      {
        internalType: "address",
        name: "voter",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "proposalIds",
        type: "uint256[]",
      },
    ],
    name: "getGovBravoReceipts",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "proposalId",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "hasVoted",
            type: "bool",
          },
          {
            internalType: "uint8",
            name: "support",
            type: "uint8",
          },
          {
            internalType: "uint96",
            name: "votes",
            type: "uint96",
          },
        ],
        internalType: "struct CompoundLens.GovBravoReceipt[]",
        name: "",
        type: "tuple[]",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "contract GovernorAlpha",
        name: "governor",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "proposalIds",
        type: "uint256[]",
      },
    ],
    name: "getGovProposals",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "proposalId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "proposer",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "eta",
            type: "uint256",
          },
          {
            internalType: "address[]",
            name: "targets",
            type: "address[]",
          },
          {
            internalType: "uint256[]",
            name: "values",
            type: "uint256[]",
          },
          {
            internalType: "string[]",
            name: "signatures",
            type: "string[]",
          },
          {
            internalType: "bytes[]",
            name: "calldatas",
            type: "bytes[]",
          },
          {
            internalType: "uint256",
            name: "startBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "forVotes",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "againstVotes",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "canceled",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "executed",
            type: "bool",
          },
        ],
        internalType: "struct CompoundLens.GovProposal[]",
        name: "",
        type: "tuple[]",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "contract GovernorAlpha",
        name: "governor",
        type: "address",
      },
      {
        internalType: "address",
        name: "voter",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "proposalIds",
        type: "uint256[]",
      },
    ],
    name: "getGovReceipts",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "proposalId",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "hasVoted",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "support",
            type: "bool",
          },
          {
            internalType: "uint96",
            name: "votes",
            type: "uint96",
          },
        ],
        internalType: "struct CompoundLens.GovReceipt[]",
        name: "",
        type: "tuple[]",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50613d7c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063595642191161008c57806396994869116100665780639699486914610238578063995ed99f14610258578063bdf950c914610278578063c5ae593414610298576100ea565b806359564219146101d857806375d80e90146101f85780637dd8f6d914610218576100ea565b80632b2d5ed6116100c85780632b2d5ed614610158578063416405d71461017857806343c811cc146101985780634b70d84b146101b8576100ea565b80630972bf8b146100ef578063158eca8b146101185780631ea6374114610138575b600080fd5b6101026100fd366004612af9565b6102b8565b60405161010f9190613ac0565b60405180910390f35b61012b610126366004612bd9565b61035b565b60405161010f9190613b86565b61014b610146366004612c8e565b610ab6565b60405161010f9190613ba3565b61016b610166366004612ab8565b610e3d565b60405161010f9190613ae2565b61018b610186366004612bf7565b610ed9565b60405161010f9190613bb1565b6101ab6101a6366004612cef565b611082565b60405161010f9190613b15565b6101cb6101c6366004612ab8565b6111dd565b60405161010f9190613ad1565b6101eb6101e6366004612c27565b61126e565b60405161010f9190613af3565b61020b610206366004612d49565b6113c6565b60405161010f9190613b04565b61022b610226366004612bf7565b611589565b60405161010f9190613b67565b61024b610246366004612d49565b6116c5565b60405161010f9190613b26565b61026b610266366004612cef565b611878565b60405161010f9190613b37565b61028b610286366004612bf7565b6119d2565b60405161010f9190613b78565b6102ab6102a6366004612bd9565b611da7565b60405161010f9190613b95565b604080518381526020808502820101909152606090839082908280156102f857816020015b6102e56121be565b8152602001906001900390816102dd5790505b50905060005b8281101561034f5761033087878381811061031557fe5b905060200201602061032a9190810190612bd9565b866119d2565b82828151811061033c57fe5b60209081029190910101526001016102fe565b509150505b9392505050565b6103636121fd565b6000826001600160a01b031663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156103a057600080fd5b505af11580156103b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103d89190810190612df9565b90506000836001600160a01b0316635fe3b5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561041557600080fd5b505afa158015610429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061044d9190810190612cd1565b9050600080826001600160a01b0316638e8f294b876040518263ffffffff1660e01b815260040161047e9190613a6e565b604080518083038186803b15801561049557600080fd5b505afa1580156104a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104cd9190810190612b9f565b91509150600080876001600160a01b031663ac784ddc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561050d57600080fd5b505afa158015610521573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105459190810190612b81565b1561055657506000905060126106b6565b6000889050806001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561059457600080fd5b505afa1580156105a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105cc91908101906129d6565b9250806001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561060757600080fd5b505afa15801561061b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061063f91908101906129d6565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561067757600080fd5b505afa15801561068b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506106af9190810190612f3c565b60ff169150505b604051806101c00160405280896001600160a01b03168152602001878152602001896001600160a01b031663ae9d70b06040518163ffffffff1660e01b815260040160206040518083038186803b15801561071057600080fd5b505afa158015610724573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107489190810190612df9565b8152602001896001600160a01b031663f8f9da286040518163ffffffff1660e01b815260040160206040518083038186803b15801561078657600080fd5b505afa15801561079a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107be9190810190612df9565b8152602001896001600160a01b031663173b99046040518163ffffffff1660e01b815260040160206040518083038186803b1580156107fc57600080fd5b505afa158015610810573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506108349190810190612df9565b8152602001896001600160a01b03166347bd37186040518163ffffffff1660e01b815260040160206040518083038186803b15801561087257600080fd5b505afa158015610886573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506108aa9190810190612df9565b8152602001896001600160a01b0316638f840ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108e857600080fd5b505afa1580156108fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506109209190810190612df9565b8152602001896001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561095e57600080fd5b505afa158015610972573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506109969190810190612df9565b8152602001896001600160a01b0316633b1d21a26040518163ffffffff1660e01b815260040160206040518083038186803b1580156109d457600080fd5b505afa1580156109e8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a0c9190810190612df9565b81526020018515158152602001848152602001836001600160a01b03168152602001896001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610a6757600080fd5b505afa158015610a7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a9f9190810190612f3c565b60ff16815260200191909152979650505050505050565b610abe612280565b6040516370a0823160e01b81526000906001600160a01b038616906370a0823190610aed908690600401613a6e565b60206040518083038186803b158015610b0557600080fd5b505afa158015610b19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b3d9190810190612df9565b6040516374d7814960e11b81529091506001600160a01b0385169063e9af029290610b6c908690600401613a6e565b600060405180830381600087803b158015610b8657600080fd5b505af1158015610b9a573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b03881691506370a0823190610bcd908790600401613a6e565b60206040518083038186803b158015610be557600080fd5b505afa158015610bf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610c1d9190810190612df9565b90506000856001600160a01b031663cc7ebdc4866040518263ffffffff1660e01b8152600401610c4d9190613a6e565b60206040518083038186803b158015610c6557600080fd5b505afa158015610c79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610c9d9190810190612df9565b90506000610cd282846040518060400160405280600e81526020016d1cdd5b4818dbdb5c081d1bdd185b60921b815250611f39565b90506000610d0682866040518060400160405280600d81526020016c1cdd5888185b1b1bd8d85d1959609a1b815250611f69565b905060405180608001604052808681526020018a6001600160a01b031663b4b5ea578a6040518263ffffffff1660e01b8152600401610d459190613a6e565b60206040518083038186803b158015610d5d57600080fd5b505afa158015610d71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d959190810190612f5a565b6001600160601b031681526020018a6001600160a01b031663587cde1e8a6040518263ffffffff1660e01b8152600401610dcf9190613a6e565b60206040518083038186803b158015610de757600080fd5b505afa158015610dfb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e1f91908101906129d6565b6001600160a01b031681526020019190915298975050505050505050565b60408051828152602080840282010190915260609082908290828015610e7d57816020015b610e6a6122b1565b815260200190600190039081610e625790505b50905060005b82811015610ece57610eaf868683818110610e9a57fe5b90506020020160206102a69190810190612bd9565b828281518110610ebb57fe5b6020908102919091010152600101610e83565b509150505b92915050565b610ee16122c8565b6040805160608101918290526370a0823160e01b909152806001600160a01b0385166370a08231610f158660648501613a6e565b60206040518083038186803b158015610f2d57600080fd5b505afa158015610f41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f659190810190612df9565b8152602001846001600160a01b031663b4b5ea57856040518263ffffffff1660e01b8152600401610f969190613a6e565b60206040518083038186803b158015610fae57600080fd5b505afa158015610fc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610fe69190810190612f5a565b6001600160601b03168152602001846001600160a01b031663587cde1e856040518263ffffffff1660e01b81526004016110209190613a6e565b60206040518083038186803b15801561103857600080fd5b505afa15801561104c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061107091908101906129d6565b6001600160a01b031690529392505050565b60606000825190506060816040519080825280602002602001820160405280156110c657816020015b6110b36122f2565b8152602001906001900390816110ab5790505b50905060005b8281101561034f576110dc612319565b876001600160a01b031663e23a9a528784815181106110f757fe5b6020026020010151896040518363ffffffff1660e01b815260040161111d929190613bcd565b60606040518083038186803b15801561113557600080fd5b505afa158015611149573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061116d9190810190612ddb565b9050604051806080016040528087848151811061118657fe5b60200260200101518152602001826000015115158152602001826020015160ff16815260200182604001516001600160601b03168152508383815181106111c957fe5b6020908102919091010152506001016110cc565b6040805182815260208084028201019091526060908290829082801561121d57816020015b61120a6121fd565b8152602001906001900390816112025790505b50905060005b82811015610ece5761124f86868381811061123a57fe5b90506020020160206101269190810190612bd9565b82828151811061125b57fe5b6020908102919091010152600101611223565b606080838390506040519080825280602002602001820160405280156112ae57816020015b61129b612339565b8152602001906001900390816112935790505b50905060005b838110156113bc5760405180604001604052808686848181106112d357fe5b90506020020160206112e89190810190612f1e565b63ffffffff168152602001886001600160a01b031663782d6fe18989898781811061130f57fe5b90506020020160206113249190810190612f1e565b6040518363ffffffff1660e01b8152600401611341929190613aa5565b60206040518083038186803b15801561135957600080fd5b505afa15801561136d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113919190810190612f5a565b6001600160601b03168152508282815181106113a957fe5b60209081029190910101526001016112b4565b5095945050505050565b6060808383905060405190808252806020026020018201604052801561140657816020015b6113f3612353565b8152602001906001900390816113eb5790505b50905060005b8381101561158057606080606080896001600160a01b031663328dd9828a8a8881811061143557fe5b905060200201356040518263ffffffff1660e01b81526004016114589190613bbf565b60006040518083038186803b15801561147057600080fd5b505afa158015611484573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114ac91908101906129fc565b9350935093509350604051806101c001604052806000815260200160006001600160a01b031681526020016000815260200185815260200184815260200183815260200182815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525086868151811061153557fe5b602002602001018190525061157086868151811061154f57fe5b60200260200101518b8b8b8981811061156457fe5b90506020020135611f95565b50506001909201915061140c9050565b50949350505050565b6115916123cf565b6000806000856001600160a01b0316635ec88c79866040518263ffffffff1660e01b81526004016115c29190613a6e565b60606040518083038186803b1580156115da57600080fd5b505afa1580156115ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116129190810190612edb565b9250925092508260001461162557600080fd5b604080516060810191829052632aff3bff60e21b909152806001600160a01b03881663abfceffc6116598960648501613a6e565b60006040518083038186803b15801561167157600080fd5b505afa158015611685573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116ad9190810190612b4d565b81526020810193909352604090920152949350505050565b6060808383905060405190808252806020026020018201604052801561170557816020015b6116f26123f0565b8152602001906001900390816116ea5790505b50905060005b8381101561158057606080606080896001600160a01b031663328dd9828a8a8881811061173457fe5b905060200201356040518263ffffffff1660e01b81526004016117579190613bbf565b60006040518083038186803b15801561176f57600080fd5b505afa158015611783573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117ab91908101906129fc565b9350935093509350604051806101a001604052806000815260200160006001600160a01b0316815260200160008152602001858152602001848152602001838152602001828152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525086868151811061182d57fe5b602002602001018190525061186886868151811061184757fe5b60200260200101518b8b8b8981811061185c57fe5b90506020020135612098565b50506001909201915061170b9050565b60606000825190506060816040519080825280602002602001820160405280156118bc57816020015b6118a96122f2565b8152602001906001900390816118a15790505b50905060005b8281101561034f576118d2612319565b876001600160a01b031663e23a9a528784815181106118ed57fe5b6020026020010151896040518363ffffffff1660e01b8152600401611913929190613bcd565b60606040518083038186803b15801561192b57600080fd5b505afa15801561193f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506119639190810190612dbd565b9050604051806080016040528087848151811061197c57fe5b6020026020010151815260200182600001511515815260200182602001511515815260200182604001516001600160601b03168152508383815181106119be57fe5b6020908102919091010152506001016118c2565b6119da6121be565b6040516370a0823160e01b81526000906001600160a01b038516906370a0823190611a09908690600401613a7c565b60206040518083038186803b158015611a2157600080fd5b505afa158015611a35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611a599190810190612df9565b90506000846001600160a01b03166317bfdfbc856040518263ffffffff1660e01b8152600401611a899190613a7c565b602060405180830381600087803b158015611aa357600080fd5b505af1158015611ab7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611adb9190810190612df9565b90506000856001600160a01b0316633af9e669866040518263ffffffff1660e01b8152600401611b0b9190613a7c565b602060405180830381600087803b158015611b2557600080fd5b505af1158015611b39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611b5d9190810190612df9565b9050600080876001600160a01b031663ac784ddc6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b9b57600080fd5b505afa158015611baf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611bd39190810190612b81565b15611bed5750506001600160a01b03851680319031611d6a565b60008890506000816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015611c2d57600080fd5b505afa158015611c41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611c6591908101906129d6565b6040516370a0823160e01b81529091506001600160a01b038216906370a0823190611c94908c90600401613a7c565b60206040518083038186803b158015611cac57600080fd5b505afa158015611cc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611ce49190810190612df9565b604051636eb1769f60e11b81529094506001600160a01b0382169063dd62ed3e90611d15908c908e90600401613a8a565b60206040518083038186803b158015611d2d57600080fd5b505afa158015611d41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611d659190810190612df9565b925050505b6040805160c0810182526001600160a01b039990991689526020890195909552938701929092526060860152608085015260a08401525090919050565b611daf6122b1565b6000826001600160a01b0316635fe3b5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611dea57600080fd5b505afa158015611dfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611e229190810190612cd1565b90506000816001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b158015611e5f57600080fd5b505afa158015611e73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611e979190810190612cd1565b90506040518060400160405280856001600160a01b03168152602001826001600160a01b031663fc57d4df876040518263ffffffff1660e01b8152600401611edf9190613b48565b60206040518083038186803b158015611ef757600080fd5b505afa158015611f0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611f2f9190810190612df9565b9052949350505050565b600083830182858210156115805760405162461bcd60e51b8152600401611f609190613b56565b60405180910390fd5b60008184841115611f8d5760405162461bcd60e51b8152600401611f609190613b56565b505050900390565b611f9d612465565b60405163013cf08b60e01b81526001600160a01b0384169063013cf08b90611fc9908590600401613bbf565b6101406040518083038186803b158015611fe257600080fd5b505afa158015611ff6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061201a9190810190612d9e565b918452506020808201516001600160a01b03169084015260408082015190840152606081015160e08085019190915260808201516101008086019190915260a08301516101208087019190915260c0840151610140870152918301516101608601528201511515610180850152015115156101a09092019190915250565b600080600080600080600080896001600160a01b031663013cf08b8a6040518263ffffffff1660e01b81526004016120d09190613bbf565b6101206040518083038186803b1580156120e957600080fd5b505afa1580156120fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506121219190810190612e17565b9850985098509850985098509850985050888b6000018181525050878b602001906001600160a01b031690816001600160a01b031681525050868b6040018181525050858b60e0018181525050848b610100018181525050838b610120018181525050828b610140018181525050818b610160019015159081151581525050808b6101800190151590811515815250505050505050505050505050565b6040518060c0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806101c0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000815260200160006001600160a01b0316815260200160008152602001600081525090565b6040518060800160405280600081526020016000815260200160006001600160a01b03168152602001600081525090565b604080518082019091526000808252602082015290565b6040518060600160405280600081526020016000815260200160006001600160a01b031681525090565b60408051608081018252600080825260208201819052918101829052606081019190915290565b604080516060810182526000808252602082018190529181019190915290565b604051806040016040528060008152602001600081525090565b604051806101c001604052806000815260200160006001600160a01b03168152602001600081526020016060815260200160608152602001606081526020016060815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b60405180606001604052806060815260200160008152602001600081525090565b604051806101a001604052806000815260200160006001600160a01b031681526020016000815260200160608152602001606081526020016060815260200160608152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b6040518061014001604052806000815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b8035610ed381613cec565b8051610ed381613cec565b600082601f8301126124ec57600080fd5b81516124ff6124fa82613c01565b613bdb565b9150818183526020840193506020810190508385602084028201111561252457600080fd5b60005b83811015612550578161253a88826124d0565b8452506020928301929190910190600101612527565b5050505092915050565b600082601f83011261256b57600080fd5b81516125796124fa82613c01565b81815260209384019390925082018360005b8381101561255057815186016125a188826127b7565b845250602092830192919091019060010161258b565b60008083601f8401126125c957600080fd5b5081356001600160401b038111156125e057600080fd5b6020830191508360208202830111156125f857600080fd5b9250929050565b600082601f83011261261057600080fd5b815161261e6124fa82613c01565b9150818183526020840193506020810190508385602084028201111561264357600080fd5b60005b8381101561255057816126598882612811565b8452506020928301929190910190600101612646565b600082601f83011261268057600080fd5b815161268e6124fa82613c01565b81815260209384019390925082018360005b8381101561255057815186016126b688826127b7565b84525060209283019291909101906001016126a0565b600082601f8301126126dd57600080fd5b81356126eb6124fa82613c01565b9150818183526020840193506020810190508385602084028201111561271057600080fd5b60005b838110156125505781612726888261299f565b8452506020928301929190910190600101612713565b600082601f83011261274d57600080fd5b815161275b6124fa82613c01565b9150818183526020840193506020810190508385602084028201111561278057600080fd5b60005b83811015612550578161279688826129aa565b8452506020928301929190910190600101612783565b8051610ed381613d03565b600082601f8301126127c857600080fd5b81516127d66124fa82613c21565b915080825260208301602083018583830111156127f257600080fd5b6127fd838284613cb6565b50505092915050565b8035610ed381613d0c565b8051610ed381613d0c565b6000610140828403121561282f57600080fd5b61283a610140613bdb565b9050600061284884846129aa565b8252506020612859848483016124d0565b602083015250604061286d848285016129aa565b6040830152506060612881848285016129aa565b6060830152506080612895848285016129aa565b60808301525060a06128a9848285016129aa565b60a08301525060c06128bd848285016129aa565b60c08301525060e06128d1848285016129aa565b60e0830152506101006128e6848285016127ac565b610100830152506101206128fc848285016127ac565b6101208301525092915050565b60006060828403121561291b57600080fd5b6129256060613bdb565b9050600061293384846127ac565b8252506020612944848483016127ac565b6020830152506040612958848285016129cb565b60408301525092915050565b60006060828403121561297657600080fd5b6129806060613bdb565b9050600061298e84846127ac565b8252506020612944848483016129c0565b8035610ed381613d15565b8051610ed381613d15565b8035610ed381613d1e565b8051610ed381613d27565b8051610ed381613d30565b6000602082840312156129e857600080fd5b60006129f484846124d0565b949350505050565b60008060008060808587031215612a1257600080fd5b84516001600160401b03811115612a2857600080fd5b612a34878288016124db565b94505060208501516001600160401b03811115612a5057600080fd5b612a5c8782880161273c565b93505060408501516001600160401b03811115612a7857600080fd5b612a848782880161266f565b92505060608501516001600160401b03811115612aa057600080fd5b612aac8782880161255a565b91505092959194509250565b60008060208385031215612acb57600080fd5b82356001600160401b03811115612ae157600080fd5b612aed858286016125b7565b92509250509250929050565b600080600060408486031215612b0e57600080fd5b83356001600160401b03811115612b2457600080fd5b612b30868287016125b7565b93509350506020612b43868287016124c5565b9150509250925092565b600060208284031215612b5f57600080fd5b81516001600160401b03811115612b7557600080fd5b6129f4848285016125ff565b600060208284031215612b9357600080fd5b60006129f484846127ac565b60008060408385031215612bb257600080fd5b6000612bbe85856127ac565b9250506020612bcf858286016129aa565b9150509250929050565b600060208284031215612beb57600080fd5b60006129f48484612806565b60008060408385031215612c0a57600080fd5b6000612c168585612806565b9250506020612bcf858286016124c5565b60008060008060608587031215612c3d57600080fd5b6000612c498787612806565b9450506020612c5a878288016124c5565b93505060408501356001600160401b03811115612c7657600080fd5b612c82878288016125b7565b95989497509550505050565b600080600060608486031215612ca357600080fd5b6000612caf8686612806565b9350506020612cc086828701612806565b9250506040612b43868287016124c5565b600060208284031215612ce357600080fd5b60006129f48484612811565b600080600060608486031215612d0457600080fd5b6000612d108686612806565b9350506020612d21868287016124c5565b92505060408401356001600160401b03811115612d3d57600080fd5b612b43868287016126cc565b600080600060408486031215612d5e57600080fd5b6000612d6a8686612806565b93505060208401356001600160401b03811115612d8657600080fd5b612d92868287016125b7565b92509250509250925092565b60006101408284031215612db157600080fd5b60006129f4848461281c565b600060608284031215612dcf57600080fd5b60006129f48484612909565b600060608284031215612ded57600080fd5b60006129f48484612964565b600060208284031215612e0b57600080fd5b60006129f484846129aa565b60008060008060008060008060006101208a8c031215612e3657600080fd5b6000612e428c8c6129aa565b9950506020612e538c828d016124d0565b9850506040612e648c828d016129aa565b9750506060612e758c828d016129aa565b9650506080612e868c828d016129aa565b95505060a0612e978c828d016129aa565b94505060c0612ea88c828d016129aa565b93505060e0612eb98c828d016127ac565b925050610100612ecb8c828d016127ac565b9150509295985092959850929598565b600080600060608486031215612ef057600080fd5b6000612efc86866129aa565b9350506020612f0d868287016129aa565b9250506040612b43868287016129aa565b600060208284031215612f3057600080fd5b60006129f484846129b5565b600060208284031215612f4e57600080fd5b60006129f484846129c0565b600060208284031215612f6c57600080fd5b60006129f484846129cb565b6000612f848383613040565b505060200190565b600061035483836134ac565b6000612f8483836134e4565b6000612fb08383613535565b505060c00190565b6000612fc483836135ab565b50506101c00190565b6000612fd983836136c0565b505060400190565b6000612fd98383613765565b60006103548383613776565b600061300583836138aa565b505060800190565b600061035483836138f4565b60006130058383613a13565b6000612f848383613a4a565b61303a81613ca0565b82525050565b61303a81613c5b565b600061305482613c4e565b61305e8185613c52565b935061306983613c48565b8060005b838110156130975781516130818882612f78565b975061308c83613c48565b92505060010161306d565b509495945050505050565b60006130ad82613c4e565b6130b78185613c52565b9350836020820285016130c985613c48565b8060005b8581101561310357848403895281516130e68582612f8c565b94506130f183613c48565b60209a909a01999250506001016130cd565b5091979650505050505050565b600061311b82613c4e565b6131258185613c52565b935061313083613c48565b8060005b838110156130975781516131488882612f98565b975061315383613c48565b925050600101613134565b600061316982613c4e565b6131738185613c52565b93508360208202850161318585613c48565b8060005b8581101561310357848403895281516131a28582612f8c565b94506131ad83613c48565b60209a909a0199925050600101613189565b60006131ca82613c4e565b6131d48185613c52565b93506131df83613c48565b8060005b838110156130975781516131f78882612fa4565b975061320283613c48565b9250506001016131e3565b600061321882613c4e565b6132228185613c52565b935061322d83613c48565b8060005b838110156130975781516132458882612fb8565b975061325083613c48565b925050600101613231565b600061326682613c4e565b6132708185613c52565b935061327b83613c48565b8060005b838110156130975781516132938882612fcd565b975061329e83613c48565b92505060010161327f565b60006132b482613c4e565b6132be8185613c52565b93506132c983613c48565b8060005b838110156130975781516132e18882612fe1565b97506132ec83613c48565b9250506001016132cd565b600061330282613c4e565b61330c8185613c52565b93508360208202850161331e85613c48565b8060005b85811015613103578484038952815161333b8582612fed565b945061334683613c48565b60209a909a0199925050600101613322565b600061336382613c4e565b61336d8185613c52565b935061337883613c48565b8060005b838110156130975781516133908882612ff9565b975061339b83613c48565b92505060010161337c565b60006133b182613c4e565b6133bb8185613c52565b9350836020820285016133cd85613c48565b8060005b8581101561310357848403895281516133ea858261300d565b94506133f583613c48565b60209a909a01999250506001016133d1565b600061341282613c4e565b61341c8185613c52565b935061342783613c48565b8060005b8381101561309757815161343f8882613019565b975061344a83613c48565b92505060010161342b565b600061346082613c4e565b61346a8185613c52565b935061347583613c48565b8060005b8381101561309757815161348d8882613025565b975061349883613c48565b925050600101613479565b61303a81613c66565b60006134b782613c4e565b6134c18185613c52565b93506134d1818560208601613cb6565b6134da81613ce2565b9093019392505050565b61303a81613c6b565b80516060808452600091908401906135058282613110565b915050602083015161351a6020860182613a4a565b50604083015161352d6040860182613a4a565b509392505050565b805160c08301906135468482613040565b5060208201516135596020850182613a4a565b50604082015161356c6040850182613a4a565b50606082015161357f6060850182613a4a565b5060808201516135926080850182613a4a565b5060a08201516135a560a0850182613a4a565b50505050565b80516101c08301906135bd8482613040565b5060208201516135d06020850182613a4a565b5060408201516135e36040850182613a4a565b5060608201516135f66060850182613a4a565b5060808201516136096080850182613a4a565b5060a082015161361c60a0850182613a4a565b5060c082015161362f60c0850182613a4a565b5060e082015161364260e0850182613a4a565b50610100820151613657610100850182613a4a565b5061012082015161366c6101208501826134a3565b50610140820151613681610140850182613a4a565b50610160820151613696610160850182613040565b506101808201516136ab610180850182613a4a565b506101a08201516135a56101a0850182613a4a565b805160408301906136d18482613040565b5060208201516135a56020850182613a4a565b805160808301906136f58482613a4a565b5060208201516137086020850182613a4a565b50604082015161371b6040850182613040565b5060608201516135a56060850182613a4a565b8051606083019061373f8482613a4a565b5060208201516137526020850182613a4a565b5060408201516135a56040850182613040565b805160408301906136d18482613a4a565b80516000906101c084019061378b8582613a4a565b50602083015161379e6020860182613040565b5060408301516137b16040860182613a4a565b50606083015184820360608601526137c98282613049565b915050608083015184820360808601526137e38282613455565b91505060a083015184820360a08601526137fd828261315e565b91505060c083015184820360c086015261381782826130a2565b91505060e083015161382c60e0860182613a4a565b50610100830151613841610100860182613a4a565b50610120830151613856610120860182613a4a565b5061014083015161386b610140860182613a4a565b50610160830151613880610160860182613a4a565b506101808301516138956101808601826134a3565b506101a083015161352d6101a08601826134a3565b805160808301906138bb8482613a4a565b5060208201516138ce60208501826134a3565b5060408201516138e16040850182613a5c565b5060608201516135a56060850182613a65565b80516000906101a08401906139098582613a4a565b50602083015161391c6020860182613040565b50604083015161392f6040860182613a4a565b50606083015184820360608601526139478282613049565b915050608083015184820360808601526139618282613455565b91505060a083015184820360a086015261397b828261315e565b91505060c083015184820360c086015261399582826130a2565b91505060e08301516139aa60e0860182613a4a565b506101008301516139bf610100860182613a4a565b506101208301516139d4610120860182613a4a565b506101408301516139e9610140860182613a4a565b506101608301516139fe6101608601826134a3565b5061018083015161352d6101808601826134a3565b80516080830190613a248482613a4a565b506020820151613a3760208501826134a3565b5060408201516138e160408501826134a3565b61303a81613c82565b61303a81613cab565b61303a81613c8e565b61303a81613c94565b60208101610ed38284613040565b60208101610ed38284613031565b60408101613a988285613031565b6103546020830184613040565b60408101613ab38285613040565b6103546020830184613a53565b6020808252810161035481846131bf565b60208082528101610354818461320d565b60208082528101610354818461325b565b6020808252810161035481846132a9565b6020808252810161035481846132f7565b602080825281016103548184613358565b6020808252810161035481846133a6565b602080825281016103548184613407565b60208101610ed382846134e4565b6020808252810161035481846134ac565b6020808252810161035481846134ed565b60c08101610ed38284613535565b6101c08101610ed382846135ab565b60408101610ed382846136c0565b60808101610ed382846136e4565b60608101610ed3828461372e565b60208101610ed38284613a4a565b60408101613a988285613a4a565b6040518181016001600160401b0381118282101715613bf957600080fd5b604052919050565b60006001600160401b03821115613c1757600080fd5b5060209081020190565b60006001600160401b03821115613c3757600080fd5b506020601f91909101601f19160190565b60200190565b5190565b90815260200190565b6000610ed382613c76565b151590565b6000610ed382613c5b565b6001600160a01b031690565b90565b63ffffffff1690565b60ff1690565b6001600160601b031690565b6000610ed382613c6b565b6000610ed382613c85565b60005b83811015613cd1578181015183820152602001613cb9565b838111156135a55750506000910152565b601f01601f191690565b613cf581613c5b565b8114613d0057600080fd5b50565b613cf581613c66565b613cf581613c6b565b613cf581613c82565b613cf581613c85565b613cf581613c8e565b613cf581613c9456fea365627a7a7231582099ec927aee62dd3b859a7996618174df9b318af48e8b98e4efd5289742a8c0286c6578706572696d656e74616cf564736f6c63430005100040";

type CompoundLensConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CompoundLensConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CompoundLens__factory extends ContractFactory {
  constructor(...args: CompoundLensConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CompoundLens> {
    return super.deploy(overrides || {}) as Promise<CompoundLens>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CompoundLens {
    return super.attach(address) as CompoundLens;
  }
  override connect(signer: Signer): CompoundLens__factory {
    return super.connect(signer) as CompoundLens__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CompoundLensInterface {
    return new utils.Interface(_abi) as CompoundLensInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CompoundLens {
    return new Contract(address, _abi, signerOrProvider) as CompoundLens;
  }
}
